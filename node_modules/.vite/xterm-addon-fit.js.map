{
  "version": 3,
  "sources": ["../xterm-addon-fit/lib/webpack:/FitAddon/webpack/universalModuleDefinition", "../xterm-addon-fit/lib/webpack:/FitAddon/src/FitAddon.ts", "../xterm-addon-fit/lib/webpack:/FitAddon/webpack/bootstrap", "../xterm-addon-fit/lib/webpack:/FitAddon/webpack/startup", "dep:xterm-addon-fit"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FitAddon\"] = factory();\n\telse\n\t\troot[\"FitAddon\"] = factory();\n})(self, function() {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon } from 'xterm';\n\ninterface ITerminalDimensions {\n  /**\n   * The number of rows in the terminal.\n   */\n  rows: number;\n\n  /**\n   * The number of columns in the terminal.\n   */\n  cols: number;\n}\n\nconst MINIMUM_COLS = 2;\nconst MINIMUM_ROWS = 1;\n\nexport class FitAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n\n  constructor() {}\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  public dispose(): void {}\n\n  public fit(): void {\n    const dims = this.proposeDimensions();\n    if (!dims || !this._terminal) {\n      return;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    // Force a full render\n    if (this._terminal.rows !== dims.rows || this._terminal.cols !== dims.cols) {\n      core._renderService.clear();\n      this._terminal.resize(dims.cols, dims.rows);\n    }\n  }\n\n  public proposeDimensions(): ITerminalDimensions | undefined {\n    if (!this._terminal) {\n      return undefined;\n    }\n\n    if (!this._terminal.element || !this._terminal.element.parentElement) {\n      return undefined;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    if (core._renderService.dimensions.actualCellWidth === 0 || core._renderService.dimensions.actualCellHeight === 0) {\n      return undefined;\n    }\n\n    const parentElementStyle = window.getComputedStyle(this._terminal.element.parentElement);\n    const parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\n    const parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\n    const elementStyle = window.getComputedStyle(this._terminal.element);\n    const elementPadding = {\n      top: parseInt(elementStyle.getPropertyValue('padding-top')),\n      bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\n      right: parseInt(elementStyle.getPropertyValue('padding-right')),\n      left: parseInt(elementStyle.getPropertyValue('padding-left'))\n    };\n    const elementPaddingVer = elementPadding.top + elementPadding.bottom;\n    const elementPaddingHor = elementPadding.right + elementPadding.left;\n    const availableHeight = parentElementHeight - elementPaddingVer;\n    const availableWidth = parentElementWidth - elementPaddingHor - core.viewport.scrollBarWidth;\n    const geometry = {\n      cols: Math.max(MINIMUM_COLS, Math.floor(availableWidth / core._renderService.dimensions.actualCellWidth)),\n      rows: Math.max(MINIMUM_ROWS, Math.floor(availableHeight / core._renderService.dimensions.actualCellHeight))\n    };\n    return geometry;\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(775);\n", "export default require(\"./node_modules/xterm-addon-fit/lib/xterm-addon-fit.js\");"],
  "mappings": ";;;;;;;KAAA,SAA2C,GAAM,GAAA;AAC1B,MAAA,OAAZ,WAAY,YAA8B,AAAA,OAAX,UAAW,WACnD,OAAO,UAAU,MACQ,AAAA,OAAX,UAAW,cAAc,OAAO,MAC9C,OAAO,IAAI,KACe,AAAA,OAAZ,WAAY,WAC1B,QAAkB,WAAI,MAEtB,EAAe,WAAI;MAClB,MAAM,WAAA;AACT,aAAA,OAAA;AAAA;AAAA,YAAA,IAAA,EAAA,KAAA,CAAA,IAAA,OAAA;AAAA,iBAAA,eAAA,IAAA,cAAA,EAAA,OAAA,SAAA,GAAA,WAAA;ACSA,cAGA,IAAA,WAAA;AAGE,0BAAA;;AA4DF,mBA1DS,GAAA,UAAA,WAAP,SAAgB,IAAA;AACd,mBAAK,YAAY;eAGZ,GAAA,UAAA,UAAP,WAAA;eAEO,GAAA,UAAA,MAAP,WAAA;AACE,kBAAM,KAAO,KAAK;AAClB,kBAAK,MAAS,KAAK,WAAnB;AAKA,oBAAM,KAAQ,KAAK,UAAkB;AAGjC,qBAAK,UAAU,SAAS,GAAK,QAAQ,KAAK,UAAU,SAAS,GAAK,QACpE,IAAK,eAAe,SACpB,KAAK,UAAU,OAAO,GAAK,MAAM,GAAK;;eAInC,GAAA,UAAA,oBAAP,WAAA;AACE,kBAAK,KAAK,aAIL,KAAK,UAAU,WAAY,KAAK,UAAU,QAAQ,eAAvD;AAKA,oBAAM,KAAQ,KAAK,UAAkB;AAErC,oBAAuD,AAAnD,GAAK,eAAe,WAAW,oBAAoB,KAAyD,AAApD,GAAK,eAAe,WAAW,qBAAqB,GAAhH;AAIA,sBAAM,KAAqB,OAAO,iBAAiB,KAAK,UAAU,QAAQ,gBACpE,KAAsB,SAAS,GAAmB,iBAAiB,YACnE,IAAqB,KAAK,IAAI,GAAG,SAAS,GAAmB,iBAAiB,YAC9E,IAAe,OAAO,iBAAiB,KAAK,UAAU,UAStD,IAAkB,KAPjB,UAAS,EAAa,iBAAiB,kBACpC,SAAS,EAAa,iBAAiB,qBAO3C,IAAiB,IANd,UAAS,EAAa,iBAAiB,oBACxC,SAAS,EAAa,iBAAiB,oBAKiB,GAAK,SAAS;AAK9E,yBAJiB,EACf,MAAM,KAAK,IA7DI,GA6Dc,KAAK,MAAM,IAAiB,GAAK,eAAe,WAAW,mBACxF,MAAM,KAAK,IA7DI,GA6Dc,KAAK,MAAM,IAAkB,GAAK,eAAe,WAAW;;;eAI/F;;AA/Da,aAAA,WAAA;aCrBT,IAA2B;ACE/B,eDCA,WAA6B,GAAA;AAE5B,cAAG,EAAyB;AAC3B,mBAAO,EAAyB,GAAU;AAG3C,cAAI,IAAS,EAAyB,KAAY,EAGjD,SAAS;AAOV,iBAHA,EAAoB,GAAU,GAAQ,EAAO,SAAS,IAG/C,EAAO;UCjBY;;;;;;;ACH3B,IAAO,0BAAQ;",
  "names": []
}
