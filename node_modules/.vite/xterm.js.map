{
  "version": 3,
  "sources": ["../xterm/lib/webpack:/xterm/webpack/universalModuleDefinition", "../xterm/lib/webpack:/xterm/src/browser/AccessibilityManager.ts", "../xterm/lib/webpack:/xterm/src/browser/Clipboard.ts", "../xterm/lib/webpack:/xterm/src/browser/ColorContrastCache.ts", "../xterm/lib/webpack:/xterm/src/browser/ColorManager.ts", "../xterm/lib/webpack:/xterm/src/browser/Dom.ts", "../xterm/lib/webpack:/xterm/src/browser/Lifecycle.ts", "../xterm/lib/webpack:/xterm/src/browser/Linkifier.ts", "../xterm/lib/webpack:/xterm/src/browser/Linkifier2.ts", "../xterm/lib/webpack:/xterm/src/browser/LocalizableStrings.ts", "../xterm/lib/webpack:/xterm/src/browser/MouseZoneManager.ts", "../xterm/lib/webpack:/xterm/src/browser/RenderDebouncer.ts", "../xterm/lib/webpack:/xterm/src/browser/ScreenDprMonitor.ts", "../xterm/lib/webpack:/xterm/src/browser/Terminal.ts", "../xterm/lib/webpack:/xterm/src/browser/TimeBasedDebouncer.ts", "../xterm/lib/webpack:/xterm/src/browser/Viewport.ts", "../xterm/lib/webpack:/xterm/src/browser/decorations/BufferDecorationRenderer.ts", "../xterm/lib/webpack:/xterm/src/browser/decorations/ColorZoneStore.ts", "../xterm/lib/webpack:/xterm/src/browser/decorations/OverviewRulerRenderer.ts", "../xterm/lib/webpack:/xterm/src/browser/input/CompositionHelper.ts", "../xterm/lib/webpack:/xterm/src/browser/input/Mouse.ts", "../xterm/lib/webpack:/xterm/src/browser/input/MoveToCell.ts", "../xterm/lib/webpack:/xterm/src/browser/public/Terminal.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/BaseRenderLayer.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/CursorRenderLayer.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/CustomGlyphs.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/GridCache.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/LinkRenderLayer.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/Renderer.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/RendererUtils.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/SelectionRenderLayer.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/TextRenderLayer.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/BaseCharAtlas.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/CharAtlasCache.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/CharAtlasUtils.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/Constants.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/DynamicCharAtlas.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/LRUMap.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRenderer.ts", "../xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts", "../xterm/lib/webpack:/xterm/src/browser/selection/SelectionModel.ts", "../xterm/lib/webpack:/xterm/src/browser/services/CharSizeService.ts", "../xterm/lib/webpack:/xterm/src/browser/services/CharacterJoinerService.ts", "../xterm/lib/webpack:/xterm/src/browser/services/CoreBrowserService.ts", "../xterm/lib/webpack:/xterm/src/browser/services/MouseService.ts", "../xterm/lib/webpack:/xterm/src/browser/services/RenderService.ts", "../xterm/lib/webpack:/xterm/src/browser/services/SelectionService.ts", "../xterm/lib/webpack:/xterm/src/browser/services/Services.ts", "../xterm/lib/webpack:/xterm/src/browser/services/SoundService.ts", "../xterm/lib/webpack:/xterm/src/common/CircularList.ts", "../xterm/lib/webpack:/xterm/src/common/Clone.ts", "../xterm/lib/webpack:/xterm/src/common/Color.ts", "../xterm/lib/webpack:/xterm/src/common/CoreTerminal.ts", "../xterm/lib/webpack:/xterm/src/common/EventEmitter.ts", "../xterm/lib/webpack:/xterm/src/common/InputHandler.ts", "../xterm/lib/webpack:/xterm/src/common/Lifecycle.ts", "../xterm/lib/webpack:/xterm/src/common/Platform.ts", "../xterm/lib/webpack:/xterm/src/common/SortedList.ts", "../xterm/lib/webpack:/xterm/src/common/TypedArrayUtils.ts", "../xterm/lib/webpack:/xterm/src/common/WindowsMode.ts", "../xterm/lib/webpack:/xterm/src/common/buffer/AttributeData.ts", "../xterm/lib/webpack:/xterm/src/common/buffer/Buffer.ts", "../xterm/lib/webpack:/xterm/src/common/buffer/BufferLine.ts", "../xterm/lib/webpack:/xterm/src/common/buffer/BufferRange.ts", "../xterm/lib/webpack:/xterm/src/common/buffer/BufferReflow.ts", "../xterm/lib/webpack:/xterm/src/common/buffer/BufferSet.ts", "../xterm/lib/webpack:/xterm/src/common/buffer/CellData.ts", "../xterm/lib/webpack:/xterm/src/common/buffer/Constants.ts", "../xterm/lib/webpack:/xterm/src/common/buffer/Marker.ts", "../xterm/lib/webpack:/xterm/src/common/data/Charsets.ts", "../xterm/lib/webpack:/xterm/src/common/data/EscapeSequences.ts", "../xterm/lib/webpack:/xterm/src/common/input/Keyboard.ts", "../xterm/lib/webpack:/xterm/src/common/input/TextDecoder.ts", "../xterm/lib/webpack:/xterm/src/common/input/UnicodeV6.ts", "../xterm/lib/webpack:/xterm/src/common/input/WriteBuffer.ts", "../xterm/lib/webpack:/xterm/src/common/input/XParseColor.ts", "../xterm/lib/webpack:/xterm/src/common/parser/Constants.ts", "../xterm/lib/webpack:/xterm/src/common/parser/DcsParser.ts", "../xterm/lib/webpack:/xterm/src/common/parser/EscapeSequenceParser.ts", "../xterm/lib/webpack:/xterm/src/common/parser/OscParser.ts", "../xterm/lib/webpack:/xterm/src/common/parser/Params.ts", "../xterm/lib/webpack:/xterm/src/common/public/AddonManager.ts", "../xterm/lib/webpack:/xterm/src/common/public/BufferApiView.ts", "../xterm/lib/webpack:/xterm/src/common/public/BufferLineApiView.ts", "../xterm/lib/webpack:/xterm/src/common/public/BufferNamespaceApi.ts", "../xterm/lib/webpack:/xterm/src/common/public/ParserApi.ts", "../xterm/lib/webpack:/xterm/src/common/public/UnicodeApi.ts", "../xterm/lib/webpack:/xterm/src/common/services/BufferService.ts", "../xterm/lib/webpack:/xterm/src/common/services/CharsetService.ts", "../xterm/lib/webpack:/xterm/src/common/services/CoreMouseService.ts", "../xterm/lib/webpack:/xterm/src/common/services/CoreService.ts", "../xterm/lib/webpack:/xterm/src/common/services/DecorationService.ts", "../xterm/lib/webpack:/xterm/src/common/services/DirtyRowService.ts", "../xterm/lib/webpack:/xterm/src/common/services/InstantiationService.ts", "../xterm/lib/webpack:/xterm/src/common/services/LogService.ts", "../xterm/lib/webpack:/xterm/src/common/services/OptionsService.ts", "../xterm/lib/webpack:/xterm/src/common/services/ServiceRegistry.ts", "../xterm/lib/webpack:/xterm/src/common/services/Services.ts", "../xterm/lib/webpack:/xterm/src/common/services/UnicodeService.ts", "../xterm/lib/webpack:/xterm/webpack/bootstrap", "../xterm/lib/webpack:/xterm/webpack/startup", "dep:xterm"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { ITerminal, IRenderDebouncer } from 'browser/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { isMac } from 'common/Platform';\nimport { TimeBasedDebouncer } from 'browser/TimeBasedDebouncer';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { Disposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { IRenderService } from 'browser/services/Services';\nimport { removeElementFromParent } from 'browser/Dom';\n\nconst MAX_ROWS_TO_READ = 20;\n\nconst enum BoundaryPosition {\n  TOP,\n  BOTTOM\n}\n\nexport class AccessibilityManager extends Disposable {\n  private _accessibilityTreeRoot: HTMLElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[];\n  private _liveRegion: HTMLElement;\n  private _liveRegionLineCount: number = 0;\n\n  private _renderRowsDebouncer: IRenderDebouncer;\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\n\n  /**\n   * This queue has a character pushed to it for keys that are pressed, if the\n   * next character added to the terminal is equal to the key char then it is\n   * not announced (added to live region) because it has already been announced\n   * by the textarea event (which cannot be canceled). There are some race\n   * condition cases if there is typing while data is streaming, but this covers\n   * the main case of typing into the prompt and inputting the answer to a\n   * question (Y/N, etc.).\n   */\n  private _charsToConsume: string[] = [];\n\n  private _charsToAnnounce: string = '';\n\n  constructor(\n    private readonly _terminal: ITerminal,\n    private readonly _renderService: IRenderService\n  ) {\n    super();\n    this._accessibilityTreeRoot = document.createElement('div');\n    this._accessibilityTreeRoot.classList.add('xterm-accessibility');\n    this._accessibilityTreeRoot.tabIndex = 0;\n\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.setAttribute('role', 'list');\n    this._rowContainer.classList.add('xterm-accessibility-tree');\n    this._rowElements = [];\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n\n    this._topBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.TOP);\n    this._bottomBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.BOTTOM);\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n    this._accessibilityTreeRoot.appendChild(this._rowContainer);\n\n    this._renderRowsDebouncer = new TimeBasedDebouncer(this._renderRows.bind(this));\n    this._refreshRows();\n\n    this._liveRegion = document.createElement('div');\n    this._liveRegion.classList.add('live-region');\n    this._liveRegion.setAttribute('aria-live', 'assertive');\n    this._accessibilityTreeRoot.appendChild(this._liveRegion);\n\n    if (!this._terminal.element) {\n      throw new Error('Cannot enable accessibility before Terminal.open');\n    }\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityTreeRoot);\n\n    this.register(this._renderRowsDebouncer);\n    this.register(this._terminal.onResize(e => this._onResize(e.rows)));\n    this.register(this._terminal.onRender(e => this._refreshRows(e.start, e.end)));\n    this.register(this._terminal.onScroll(() => this._refreshRows()));\n    // Line feed is an issue as the prompt won't be read out after a command is run\n    this.register(this._terminal.onA11yChar(char => this._onChar(char)));\n    this.register(this._terminal.onLineFeed(() => this._onChar('\\n')));\n    this.register(this._terminal.onA11yTab(spaceCount => this._onTab(spaceCount)));\n    this.register(this._terminal.onKey(e => this._onKey(e.key)));\n    this.register(this._terminal.onBlur(() => this._clearLiveRegion()));\n    this.register(this._renderService.onDimensionsChange(() => this._refreshRowsDimensions()));\n\n    this._screenDprMonitor = new ScreenDprMonitor();\n    this.register(this._screenDprMonitor);\n    this._screenDprMonitor.setListener(() => this._refreshRowsDimensions());\n    // This shouldn't be needed on modern browsers but is present in case the\n    // media query that drives the ScreenDprMonitor isn't supported\n    this.register(addDisposableDomListener(window, 'resize', () => this._refreshRowsDimensions()));\n  }\n\n  public dispose(): void {\n    super.dispose();\n    removeElementFromParent(this._accessibilityTreeRoot);\n    this._rowElements.length = 0;\n  }\n\n  private _onBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\n    const boundaryElement = e.target as HTMLElement;\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2];\n\n    // Don't scroll if the buffer top has reached the end in that direction\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\n    const lastRowPos = position === BoundaryPosition.TOP ? '1' : `${this._terminal.buffer.lines.length}`;\n    if (posInSet === lastRowPos) {\n      return;\n    }\n\n    // Don't scroll when the last focused item was not the second row (focus is going the other\n    // direction)\n    if (e.relatedTarget !== beforeBoundaryElement) {\n      return;\n    }\n\n    // Remove old boundary element from array\n    let topBoundaryElement: HTMLElement;\n    let bottomBoundaryElement: HTMLElement;\n    if (position === BoundaryPosition.TOP) {\n      topBoundaryElement = boundaryElement;\n      bottomBoundaryElement = this._rowElements.pop()!;\n      this._rowContainer.removeChild(bottomBoundaryElement);\n    } else {\n      topBoundaryElement = this._rowElements.shift()!;\n      bottomBoundaryElement = boundaryElement;\n      this._rowContainer.removeChild(topBoundaryElement);\n    }\n\n    // Remove listeners from old boundary elements\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Add new element to array/DOM\n    if (position === BoundaryPosition.TOP) {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.unshift(newElement);\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n    } else {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.push(newElement);\n      this._rowContainer.appendChild(newElement);\n    }\n\n    // Add listeners to new boundary elements\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Scroll up\n    this._terminal.scrollLines(position === BoundaryPosition.TOP ? -1 : 1);\n\n    // Focus new boundary before element\n    this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2].focus();\n\n    // Prevent the standard behavior\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  private _onResize(rows: number): void {\n    // Remove bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Grow rows as required\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n    // Shrink rows as required\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n\n    // Add bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n  }\n\n  private _createAccessibilityTreeNode(): HTMLElement {\n    const element = document.createElement('div');\n    element.setAttribute('role', 'listitem');\n    element.tabIndex = -1;\n    this._refreshRowDimensions(element);\n    return element;\n  }\n\n  private _onTab(spaceCount: number): void {\n    for (let i = 0; i < spaceCount; i++) {\n      this._onChar(' ');\n    }\n  }\n\n  private _onChar(char: string): void {\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n      if (this._charsToConsume.length > 0) {\n        // Have the screen reader ignore the char if it was just input\n        const shiftedChar = this._charsToConsume.shift();\n        if (shiftedChar !== char) {\n          this._charsToAnnounce += char;\n        }\n      } else {\n        this._charsToAnnounce += char;\n      }\n\n      if (char === '\\n') {\n        this._liveRegionLineCount++;\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n          this._liveRegion.textContent += Strings.tooMuchOutput;\n        }\n      }\n\n      // Only detach/attach on mac as otherwise messages can go unaccounced\n      if (isMac) {\n        if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\n          setTimeout(() => {\n            this._accessibilityTreeRoot.appendChild(this._liveRegion);\n          }, 0);\n        }\n      }\n    }\n  }\n\n  private _clearLiveRegion(): void {\n    this._liveRegion.textContent = '';\n    this._liveRegionLineCount = 0;\n\n    // Only detach/attach on mac as otherwise messages can go unaccounced\n    if (isMac) {\n      removeElementFromParent(this._liveRegion);\n    }\n  }\n\n  private _onKey(keyChar: string): void {\n    this._clearLiveRegion();\n    this._charsToConsume.push(keyChar);\n  }\n\n  private _refreshRows(start?: number, end?: number): void {\n    this._renderRowsDebouncer.refresh(start, end, this._terminal.rows);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    const buffer: IBuffer = this._terminal.buffer;\n    const setSize = buffer.lines.length.toString();\n    for (let i = start; i <= end; i++) {\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\n      const posInSet = (buffer.ydisp + i + 1).toString();\n      const element = this._rowElements[i];\n      if (element) {\n        if (lineData.length === 0) {\n          element.innerText = '\\u00a0';\n        } else {\n          element.textContent = lineData;\n        }\n        element.setAttribute('aria-posinset', posInSet);\n        element.setAttribute('aria-setsize', setSize);\n      }\n    }\n    this._announceCharacters();\n  }\n\n  private _refreshRowsDimensions(): void {\n    if (!this._renderService.dimensions.actualCellHeight) {\n      return;\n    }\n    if (this._rowElements.length !== this._terminal.rows) {\n      this._onResize(this._terminal.rows);\n    }\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._refreshRowDimensions(this._rowElements[i]);\n    }\n  }\n\n  private _refreshRowDimensions(element: HTMLElement): void {\n    element.style.height = `${this._renderService.dimensions.actualCellHeight}px`;\n  }\n\n  private _announceCharacters(): void {\n    if (this._charsToAnnounce.length === 0) {\n      return;\n    }\n    this._liveRegion.textContent += this._charsToAnnounce;\n    this._charsToAnnounce = '';\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionService } from 'browser/services/Services';\nimport { ICoreService } from 'common/services/Services';\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string): string {\n  return text.replace(/\\r?\\n/g, '\\r');\n}\n\n/**\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\n * @param text The pasted text to bracket\n */\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\n  if (bracketedPasteMode) {\n    return '\\x1b[200~' + text + '\\x1b[201~';\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, selectionService: ISelectionService): void {\n  if (ev.clipboardData) {\n    ev.clipboardData.setData('text/plain', selectionService.selectionText);\n  }\n  // Prevent or the original text will be copied.\n  ev.preventDefault();\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n * @param ev The original paste event to be handled\n * @param term The terminal on which to apply the handled paste event\n */\nexport function handlePasteEvent(ev: ClipboardEvent, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  ev.stopPropagation();\n  if (ev.clipboardData) {\n    const text = ev.clipboardData.getData('text/plain');\n    paste(text, textarea, coreService);\n  }\n}\n\nexport function paste(text: string, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  text = prepareTextForTerminal(text);\n  text = bracketTextForPaste(text, coreService.decPrivateModes.bracketedPasteMode);\n  coreService.triggerDataEvent(text, true);\n  textarea.value = '';\n}\n\n/**\n * Moves the textarea under the mouse cursor and focuses it.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n */\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement): void {\n\n  // Calculate textarea position relative to the screen element\n  const pos = screenElement.getBoundingClientRect();\n  const left = ev.clientX - pos.left - 10;\n  const top = ev.clientY - pos.top - 10;\n\n  // Bring textarea at the cursor position\n  textarea.style.width = '20px';\n  textarea.style.height = '20px';\n  textarea.style.left = `${left}px`;\n  textarea.style.top = `${top}px`;\n  textarea.style.zIndex = '1000';\n\n  textarea.focus();\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n * @param selectionService The terminal's selection manager.\n * @param shouldSelectWord If true and there is no selection the current word will be selected\n */\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement, selectionService: ISelectionService, shouldSelectWord: boolean): void {\n  moveTextAreaUnderMouseCursor(ev, textarea, screenElement);\n\n  if (shouldSelectWord) {\n    selectionService.rightClickSelect(ev);\n  }\n\n  // Get textarea ready to copy from the context menu\n  textarea.value = selectionService.selectionText;\n  textarea.select();\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { IColor } from 'common/Types';\n\nexport class ColorContrastCache implements IColorContrastCache {\n  private _color: { [bg: number]: { [fg: number]: IColor | null | undefined } | undefined } = {};\n  private _rgba: { [bg: number]: { [fg: number]: string | null | undefined } | undefined } = {};\n\n  public clear(): void {\n    this._color = {};\n    this._rgba = {};\n  }\n\n  public setCss(bg: number, fg: number, value: string | null): void {\n    if (!this._rgba[bg]) {\n      this._rgba[bg] = {};\n    }\n    this._rgba[bg]![fg] = value;\n  }\n\n  public getCss(bg: number, fg: number): string | null | undefined {\n    return this._rgba[bg] ? this._rgba[bg]![fg] : undefined;\n  }\n\n  public setColor(bg: number, fg: number, value: IColor | null): void {\n    if (!this._color[bg]) {\n      this._color[bg] = {};\n    }\n    this._color[bg]![fg] = value;\n  }\n\n  public getColor(bg: number, fg: number): IColor | null | undefined {\n    return this._color[bg] ? this._color[bg]![fg] : undefined;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorManager, IColorSet, IColorContrastCache } from 'browser/Types';\nimport { ITheme } from 'common/services/Services';\nimport { channels, color, css } from 'common/Color';\nimport { ColorContrastCache } from 'browser/ColorContrastCache';\nimport { ColorIndex, IColor } from 'common/Types';\n\n\ninterface IRestoreColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  ansi: IColor[];\n}\n\n\nconst DEFAULT_FOREGROUND = css.toColor('#ffffff');\nconst DEFAULT_BACKGROUND = css.toColor('#000000');\nconst DEFAULT_CURSOR = css.toColor('#ffffff');\nconst DEFAULT_CURSOR_ACCENT = css.toColor('#000000');\nconst DEFAULT_SELECTION = {\n  css: 'rgba(255, 255, 255, 0.3)',\n  rgba: 0xFFFFFF4D\n};\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n\n/**\n * Manages the source of truth for a terminal's colors.\n */\nexport class ColorManager implements IColorManager {\n  public colors: IColorSet;\n  private _ctx: CanvasRenderingContext2D;\n  private _litmusColor: CanvasGradient;\n  private _contrastCache: IColorContrastCache;\n  private _restoreColors!: IRestoreColorSet;\n\n  constructor(document: Document, public allowTransparency: boolean) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Could not get rendering context');\n    }\n    this._ctx = ctx;\n    this._ctx.globalCompositeOperation = 'copy';\n    this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\n    this._contrastCache = new ColorContrastCache();\n    this.colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selectionTransparent: DEFAULT_SELECTION,\n      selectionOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      selectionForeground: undefined,\n      ansi: DEFAULT_ANSI_COLORS.slice(),\n      contrastCache: this._contrastCache\n    };\n    this._updateRestoreColors();\n  }\n\n  public onOptionsChange(key: string): void {\n    if (key === 'minimumContrastRatio') {\n      this._contrastCache.clear();\n    }\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  public setTheme(theme: ITheme = {}): void {\n    this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\n    this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\n    this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\n    this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\n    this.colors.selectionTransparent = this._parseColor(theme.selection, DEFAULT_SELECTION, true);\n    this.colors.selectionOpaque = color.blend(this.colors.background, this.colors.selectionTransparent);\n    const nullColor: IColor = {\n      css: '',\n      rgba: 0\n    };\n    this.colors.selectionForeground = theme.selectionForeground ? this._parseColor(theme.selectionForeground, nullColor) : undefined;\n    if (this.colors.selectionForeground === nullColor) {\n      this.colors.selectionForeground = undefined;\n    }\n\n    /**\n     * If selection color is opaque, blend it with background with 0.3 opacity\n     * Issue #2737\n     */\n    if (color.isOpaque(this.colors.selectionTransparent)) {\n      const opacity = 0.3;\n      this.colors.selectionTransparent = color.opacity(this.colors.selectionTransparent, opacity);\n    }\n    this.colors.ansi[0] = this._parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\n    this.colors.ansi[1] = this._parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\n    this.colors.ansi[2] = this._parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\n    this.colors.ansi[3] = this._parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\n    this.colors.ansi[4] = this._parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\n    this.colors.ansi[5] = this._parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\n    this.colors.ansi[6] = this._parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\n    this.colors.ansi[7] = this._parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\n    this.colors.ansi[8] = this._parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\n    this.colors.ansi[9] = this._parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\n    this.colors.ansi[10] = this._parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\n    this.colors.ansi[11] = this._parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\n    this.colors.ansi[12] = this._parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\n    this.colors.ansi[13] = this._parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\n    this.colors.ansi[14] = this._parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\n    this.colors.ansi[15] = this._parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\n    // Clear our the cache\n    this._contrastCache.clear();\n    this._updateRestoreColors();\n  }\n\n  public restoreColor(slot?: ColorIndex): void {\n    // unset slot restores all ansi colors\n    if (slot === undefined) {\n      for (let i = 0; i < this._restoreColors.ansi.length; ++i) {\n        this.colors.ansi[i] = this._restoreColors.ansi[i];\n      }\n      return;\n    }\n    switch (slot) {\n      case ColorIndex.FOREGROUND:\n        this.colors.foreground = this._restoreColors.foreground;\n        break;\n      case ColorIndex.BACKGROUND:\n        this.colors.background = this._restoreColors.background;\n        break;\n      case ColorIndex.CURSOR:\n        this.colors.cursor = this._restoreColors.cursor;\n        break;\n      default:\n        this.colors.ansi[slot] = this._restoreColors.ansi[slot];\n    }\n  }\n\n  private _updateRestoreColors(): void {\n    this._restoreColors = {\n      foreground: this.colors.foreground,\n      background: this.colors.background,\n      cursor: this.colors.cursor,\n      ansi: this.colors.ansi.slice()\n    };\n  }\n\n  private _parseColor(\n    css: string | undefined,\n    fallback: IColor,\n    allowTransparency: boolean = this.allowTransparency\n  ): IColor {\n    if (css === undefined) {\n      return fallback;\n    }\n\n    // If parsing the value results in failure, then it must be ignored, and the attribute must\n    // retain its previous value.\n    // -- https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    this._ctx.fillStyle = this._litmusColor;\n    this._ctx.fillStyle = css;\n    if (typeof this._ctx.fillStyle !== 'string') {\n      console.warn(`Color: ${css} is invalid using fallback ${fallback.css}`);\n      return fallback;\n    }\n\n    this._ctx.fillRect(0, 0, 1, 1);\n    const data = this._ctx.getImageData(0, 0, 1, 1).data;\n\n    // Check if the printed color was transparent\n    if (data[3] !== 0xFF) {\n      if (!allowTransparency) {\n        // Ideally we'd just ignore the alpha channel, but...\n        //\n        // Browsers may not give back exactly the same RGB values we put in, because most/all\n        // convert the color to a pre-multiplied representation. getImageData converts that back to\n        // a un-premultipled representation, but the precision loss may make the RGB channels unuable\n        // on their own.\n        //\n        // E.g. In Chrome #12345610 turns into #10305010, and in the extreme case, 0xFFFFFF00 turns\n        // into 0x00000000.\n        //\n        // \"Note: Due to the lossy nature of converting to and from premultiplied alpha color values,\n        // pixels that have just been set using putImageData() might be returned to an equivalent\n        // getImageData() as different values.\"\n        // -- https://html.spec.whatwg.org/multipage/canvas.html#pixel-manipulation\n        //\n        // So let's just use the fallback color in this case instead.\n        console.warn(\n          `Color: ${css} is using transparency, but allowTransparency is false. ` +\n          `Using fallback ${fallback.css}.`\n        );\n        return fallback;\n      }\n\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // the color value has alpha less than 1.0, and the string is the color value in the CSS rgba()\n      const [r, g, b, a] = this._ctx.fillStyle.substring(5, this._ctx.fillStyle.length - 1).split(',').map(component => Number(component));\n      const alpha = Math.round(a * 255);\n      const rgba: number = channels.toRgba(r, g, b, alpha);\n      return {\n        rgba,\n        css\n      };\n    }\n\n    return {\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // if it has alpha equal to 1.0, then the string is a lowercase six-digit hex value, prefixed with a \"#\" character\n      css: this._ctx.fillStyle,\n      rgba: channels.toRgba(data[0], data[1], data[2], data[3])\n    };\n  }\n}\n", "/**\n * Copyright (c) 2020 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function removeElementFromParent(...elements: (HTMLElement | undefined)[]): void {\n  for (const e of elements) {\n    e?.parentElement?.removeChild(e);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param type The event type.\n * @param handler The handler for the listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifierEvent, ILinkMatcher, LinkMatcherHandler, ILinkMatcherOptions, ILinkifier, IMouseZoneManager, IMouseZone, IRegisteredLinkMatcher } from 'browser/Types';\nimport { IBufferStringIteratorResult } from 'common/buffer/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ILogService, IBufferService, IOptionsService, IUnicodeService } from 'common/services/Services';\n\n/**\n * Limit of the unwrapping line expansion (overscan) at the top and bottom\n * of the actual viewport in ASCII characters.\n * A limit of 2000 should match most sane urls.\n */\nconst OVERSCAN_CHAR_LIMIT = 2000;\n\n/**\n * The Linkifier applies links to rows shortly after they have been refreshed.\n */\nexport class Linkifier implements ILinkifier {\n  /**\n   * The time to wait after a row is changed before it is linkified. This prevents\n   * the costly operation of searching every row multiple times, potentially a\n   * huge amount of times.\n   */\n  protected static _timeBeforeLatency = 200;\n\n  protected _linkMatchers: IRegisteredLinkMatcher[] = [];\n\n  private _mouseZoneManager: IMouseZoneManager | undefined;\n  private _element: HTMLElement | undefined;\n\n  private _rowsTimeoutId: number | undefined;\n  private _nextLinkMatcherId = 0;\n  private _rowsToLinkify: { start: number | undefined, end: number | undefined };\n\n  private _onShowLinkUnderline = new EventEmitter<ILinkifierEvent>();\n  public get onShowLinkUnderline(): IEvent<ILinkifierEvent> { return this._onShowLinkUnderline.event; }\n  private _onHideLinkUnderline = new EventEmitter<ILinkifierEvent>();\n  public get onHideLinkUnderline(): IEvent<ILinkifierEvent> { return this._onHideLinkUnderline.event; }\n  private _onLinkTooltip = new EventEmitter<ILinkifierEvent>();\n  public get onLinkTooltip(): IEvent<ILinkifierEvent> { return this._onLinkTooltip.event; }\n\n  constructor(\n    @IBufferService protected readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IUnicodeService private readonly _unicodeService: IUnicodeService\n  ) {\n    this._rowsToLinkify = {\n      start: undefined,\n      end: undefined\n    };\n  }\n\n  /**\n   * Attaches the linkifier to the DOM, enabling linkification.\n   * @param mouseZoneManager The mouse zone manager to register link zones with.\n   */\n  public attachToDom(element: HTMLElement, mouseZoneManager: IMouseZoneManager): void {\n    this._element = element;\n    this._mouseZoneManager = mouseZoneManager;\n  }\n\n  /**\n   * Queue linkification on a set of rows.\n   * @param start The row to linkify from (inclusive).\n   * @param end The row to linkify to (inclusive).\n   */\n  public linkifyRows(start: number, end: number): void {\n    // Don't attempt linkify if not yet attached to DOM\n    if (!this._mouseZoneManager) {\n      return;\n    }\n\n    // Increase range to linkify\n    if (this._rowsToLinkify.start === undefined || this._rowsToLinkify.end === undefined) {\n      this._rowsToLinkify.start = start;\n      this._rowsToLinkify.end = end;\n    } else {\n      this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, start);\n      this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, end);\n    }\n\n    // Clear out any existing links on this row range\n    this._mouseZoneManager.clearAll(start, end);\n\n    // Restart timer\n    if (this._rowsTimeoutId) {\n      clearTimeout(this._rowsTimeoutId);\n    }\n\n    // Cannot use window.setTimeout since tests need to run in node\n    this._rowsTimeoutId = setTimeout(() => this._linkifyRows(), Linkifier._timeBeforeLatency) as any as number;\n  }\n\n  /**\n   * Linkifies the rows requested.\n   */\n  private _linkifyRows(): void {\n    this._rowsTimeoutId = undefined;\n    const buffer = this._bufferService.buffer;\n\n    if (this._rowsToLinkify.start === undefined || this._rowsToLinkify.end === undefined) {\n      this._logService.debug('_rowToLinkify was unset before _linkifyRows was called');\n      return;\n    }\n\n    // Ensure the start row exists\n    const absoluteRowIndexStart = buffer.ydisp + this._rowsToLinkify.start;\n    if (absoluteRowIndexStart >= buffer.lines.length) {\n      return;\n    }\n\n    // Invalidate bad end row values (if a resize happened)\n    const absoluteRowIndexEnd = buffer.ydisp + Math.min(this._rowsToLinkify.end, this._bufferService.rows) + 1;\n\n    // Iterate over the range of unwrapped content strings within start..end\n    // (excluding).\n    // _doLinkifyRow gets full unwrapped lines with the start row as buffer offset\n    // for every matcher.\n    // The unwrapping is needed to also match content that got wrapped across\n    // several buffer lines. To avoid a worst case scenario where the whole buffer\n    // contains just a single unwrapped string we limit this line expansion beyond\n    // the viewport to +OVERSCAN_CHAR_LIMIT chars (overscan) at top and bottom.\n    // This comes with the tradeoff that matches longer than OVERSCAN_CHAR_LIMIT\n    // chars will not match anymore at the viewport borders.\n    const overscanLineLimit = Math.ceil(OVERSCAN_CHAR_LIMIT / this._bufferService.cols);\n    const iterator = this._bufferService.buffer.iterator(\n      false, absoluteRowIndexStart, absoluteRowIndexEnd, overscanLineLimit, overscanLineLimit);\n    while (iterator.hasNext()) {\n      const lineData: IBufferStringIteratorResult = iterator.next();\n      for (let i = 0; i < this._linkMatchers.length; i++) {\n        this._doLinkifyRow(lineData.range.first, lineData.content, this._linkMatchers[i]);\n      }\n    }\n\n    this._rowsToLinkify.start = undefined;\n    this._rowsToLinkify.end = undefined;\n  }\n\n  /**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param regex The regular expression to search for. Specifically, this\n   * searches the textContent of the rows. You will want to use \\s to match a\n   * space ' ' character for example.\n   * @param handler The callback when the link is called.\n   * @param options Options for the link matcher.\n   * @return The ID of the new matcher, this can be used to deregister.\n   */\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options: ILinkMatcherOptions = {}): number {\n    if (!handler) {\n      throw new Error('handler must be defined');\n    }\n    const matcher: IRegisteredLinkMatcher = {\n      id: this._nextLinkMatcherId++,\n      regex,\n      handler,\n      matchIndex: options.matchIndex,\n      validationCallback: options.validationCallback,\n      hoverTooltipCallback: options.tooltipCallback,\n      hoverLeaveCallback: options.leaveCallback,\n      willLinkActivate: options.willLinkActivate,\n      priority: options.priority || 0\n    };\n    this._addLinkMatcherToList(matcher);\n    return matcher.id;\n  }\n\n  /**\n   * Inserts a link matcher to the list in the correct position based on the\n   * priority of each link matcher. New link matchers of equal priority are\n   * considered after older link matchers.\n   * @param matcher The link matcher to be added.\n   */\n  private _addLinkMatcherToList(matcher: IRegisteredLinkMatcher): void {\n    if (this._linkMatchers.length === 0) {\n      this._linkMatchers.push(matcher);\n      return;\n    }\n\n    for (let i = this._linkMatchers.length - 1; i >= 0; i--) {\n      if (matcher.priority <= this._linkMatchers[i].priority) {\n        this._linkMatchers.splice(i + 1, 0, matcher);\n        return;\n      }\n    }\n\n    this._linkMatchers.splice(0, 0, matcher);\n  }\n\n  /**\n   * Deregisters a link matcher if it has been registered.\n   * @param matcherId The link matcher's ID (returned after register)\n   * @return Whether a link matcher was found and deregistered.\n   */\n  public deregisterLinkMatcher(matcherId: number): boolean {\n    for (let i = 0; i < this._linkMatchers.length; i++) {\n      if (this._linkMatchers[i].id === matcherId) {\n        this._linkMatchers.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Linkifies a row given a specific handler.\n   * @param rowIndex The row index to linkify (absolute index).\n   * @param text string content of the unwrapped row.\n   * @param matcher The link matcher for this line.\n   */\n  private _doLinkifyRow(rowIndex: number, text: string, matcher: ILinkMatcher): void {\n    // clone regex to do a global search on text\n    const rex = new RegExp(matcher.regex.source, (matcher.regex.flags || '') + 'g');\n    let match;\n    let stringIndex = -1;\n    while ((match = rex.exec(text)) !== null) {\n      const uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n      if (!uri) {\n        // something matched but does not comply with the given matchIndex\n        // since this is most likely a bug the regex itself we simply do nothing here\n        this._logService.debug('match found without corresponding matchIndex', match, matcher);\n        break;\n      }\n\n      // Get index, match.index is for the outer match which includes negated chars\n      // therefore we cannot use match.index directly, instead we search the position\n      // of the match group in text again\n      // also correct regex and string search offsets for the next loop run\n      stringIndex = text.indexOf(uri, stringIndex + 1);\n      rex.lastIndex = stringIndex + uri.length;\n      if (stringIndex < 0) {\n        // invalid stringIndex (should not have happened)\n        break;\n      }\n\n      // get the buffer index as [absolute row, col] for the match\n      const bufferIndex = this._bufferService.buffer.stringIndexToBufferIndex(rowIndex, stringIndex);\n      if (bufferIndex[0] < 0) {\n        // invalid bufferIndex (should not have happened)\n        break;\n      }\n\n      const line = this._bufferService.buffer.lines.get(bufferIndex[0]);\n      if (!line) {\n        break;\n      }\n\n      const attr = line.getFg(bufferIndex[1]);\n      const fg = attr ? (attr >> 9) & 0x1ff : undefined;\n\n      if (matcher.validationCallback) {\n        matcher.validationCallback(uri, isValid => {\n          // Discard link if the line has already changed\n          if (this._rowsTimeoutId) {\n            return;\n          }\n          if (isValid) {\n            this._addLink(bufferIndex[1], bufferIndex[0] - this._bufferService.buffer.ydisp, uri, matcher, fg);\n          }\n        });\n      } else {\n        this._addLink(bufferIndex[1], bufferIndex[0] - this._bufferService.buffer.ydisp, uri, matcher, fg);\n      }\n    }\n  }\n\n  /**\n   * Registers a link to the mouse zone manager.\n   * @param x The column the link starts.\n   * @param y The row the link is on.\n   * @param uri The URI of the link.\n   * @param matcher The link matcher for the link.\n   * @param fg The link color for hover event.\n   */\n  private _addLink(x: number, y: number, uri: string, matcher: ILinkMatcher, fg: number | undefined): void {\n    if (!this._mouseZoneManager || !this._element) {\n      return;\n    }\n    // FIXME: get cell length from buffer to avoid mismatch after Unicode version change\n    const width = this._unicodeService.getStringCellWidth(uri);\n    const x1 = x % this._bufferService.cols;\n    const y1 = y + Math.floor(x / this._bufferService.cols);\n    let x2 = (x1 + width) % this._bufferService.cols;\n    let y2 = y1 + Math.floor((x1 + width) / this._bufferService.cols);\n    if (x2 === 0) {\n      x2 = this._bufferService.cols;\n      y2--;\n    }\n\n    this._mouseZoneManager.add(new MouseZone(\n      x1 + 1,\n      y1 + 1,\n      x2 + 1,\n      y2 + 1,\n      e => {\n        if (matcher.handler) {\n          return matcher.handler(e, uri);\n        }\n        const newWindow = window.open();\n        if (newWindow) {\n          newWindow.opener = null;\n          newWindow.location.href = uri;\n        } else {\n          console.warn('Opening link blocked as opener could not be cleared');\n        }\n      },\n      () => {\n        this._onShowLinkUnderline.fire(this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n        this._element!.classList.add('xterm-cursor-pointer');\n      },\n      e => {\n        this._onLinkTooltip.fire(this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n        if (matcher.hoverTooltipCallback) {\n          // Note that IViewportRange use 1-based coordinates to align with escape sequences such\n          // as CUP which use 1,1 as the default for row/col\n          matcher.hoverTooltipCallback(e, uri, { start: { x: x1, y: y1 }, end: { x: x2, y: y2 } });\n        }\n      },\n      () => {\n        this._onHideLinkUnderline.fire(this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n        this._element!.classList.remove('xterm-cursor-pointer');\n        if (matcher.hoverLeaveCallback) {\n          matcher.hoverLeaveCallback();\n        }\n      },\n      e => {\n        if (matcher.willLinkActivate) {\n          return matcher.willLinkActivate(e, uri);\n        }\n        return true;\n      }\n    ));\n  }\n\n  private _createLinkHoverEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n\nexport class MouseZone implements IMouseZone {\n  constructor(\n    public x1: number,\n    public y1: number,\n    public x2: number,\n    public y2: number,\n    public clickCallback: (e: MouseEvent) => any,\n    public hoverCallback: (e: MouseEvent) => any,\n    public tooltipCallback: (e: MouseEvent) => any,\n    public leaveCallback: () => void,\n    public willLinkActivate: (e: MouseEvent) => boolean\n  ) {\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifier2, ILinkProvider, IBufferCellPosition, ILink, ILinkifierEvent, ILinkDecorations, ILinkWithState } from 'browser/Types';\nimport { IDisposable } from 'common/Types';\nimport { IMouseService, IRenderService } from './services/Services';\nimport { IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable, getDisposeArrayDisposable, disposeArray } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\n\nexport class Linkifier2 extends Disposable implements ILinkifier2 {\n  private _element: HTMLElement | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _linkProviders: ILinkProvider[] = [];\n  public get currentLink(): ILinkWithState | undefined { return this._currentLink; }\n  protected _currentLink: ILinkWithState | undefined;\n  private _mouseDownLink: ILinkWithState | undefined;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _linkCacheDisposables: IDisposable[] = [];\n  private _lastBufferCell: IBufferCellPosition | undefined;\n  private _isMouseOut: boolean = true;\n  private _activeProviderReplies: Map<Number, ILinkWithState[] | undefined> | undefined;\n  private _activeLine: number = -1;\n\n  private _onShowLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public get onShowLinkUnderline(): IEvent<ILinkifierEvent> { return this._onShowLinkUnderline.event; }\n  private _onHideLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public get onHideLinkUnderline(): IEvent<ILinkifierEvent> { return this._onHideLinkUnderline.event; }\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.register(getDisposeArrayDisposable(this._linkCacheDisposables));\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._linkProviders.push(linkProvider);\n    return {\n      dispose: () => {\n        // Remove the link provider from the list\n        const providerIndex = this._linkProviders.indexOf(linkProvider);\n\n        if (providerIndex !== -1) {\n          this._linkProviders.splice(providerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public attachToDom(element: HTMLElement, mouseService: IMouseService, renderService: IRenderService): void {\n    this._element = element;\n    this._mouseService = mouseService;\n    this._renderService = renderService;\n\n    this.register(addDisposableDomListener(this._element, 'mouseleave', () => {\n      this._isMouseOut = true;\n      this._clearCurrentLink();\n    }));\n    this.register(addDisposableDomListener(this._element, 'mousemove', this._onMouseMove.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mousedown', this._handleMouseDown.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mouseup', this._handleMouseUp.bind(this)));\n  }\n\n  private _onMouseMove(event: MouseEvent): void {\n    this._lastMouseEvent = event;\n\n    if (!this._element || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n    this._isMouseOut = false;\n\n    // Ignore the event if it's an embedder created hover widget\n    const composedPath = event.composedPath() as HTMLElement[];\n    for (let i = 0; i < composedPath.length; i++) {\n      const target = composedPath[i];\n      // Hit Terminal.element, break and continue\n      if (target.classList.contains('xterm')) {\n        break;\n      }\n      // It's a hover, don't respect hover event\n      if (target.classList.contains('xterm-hover')) {\n        return;\n      }\n    }\n\n    if (!this._lastBufferCell || (position.x !== this._lastBufferCell.x || position.y !== this._lastBufferCell.y)) {\n      this._onHover(position);\n      this._lastBufferCell = position;\n    }\n  }\n\n  private _onHover(position: IBufferCellPosition): void {\n    // TODO: This currently does not cache link provider results across wrapped lines, activeLine should be something like `activeRange: {startY, endY}`\n    // Check if we need to clear the link\n    if (this._activeLine !== position.y) {\n      this._clearCurrentLink();\n      this._askForLink(position, false);\n      return;\n    }\n\n    // Check the if the link is in the mouse position\n    const isCurrentLinkInPosition = this._currentLink && this._linkAtPosition(this._currentLink.link, position);\n    if (!isCurrentLinkInPosition) {\n      this._clearCurrentLink();\n      this._askForLink(position, true);\n    }\n  }\n\n  private _askForLink(position: IBufferCellPosition, useLineCache: boolean): void {\n    if (!this._activeProviderReplies || !useLineCache) {\n      this._activeProviderReplies?.forEach(reply => {\n        reply?.forEach(linkWithState => {\n          if (linkWithState.link.dispose) {\n            linkWithState.link.dispose();\n          }\n        });\n      });\n      this._activeProviderReplies = new Map();\n      this._activeLine = position.y;\n    }\n    let linkProvided = false;\n\n    // There is no link cached, so ask for one\n    for (const [i, linkProvider] of this._linkProviders.entries()) {\n      if (useLineCache) {\n        const existingReply = this._activeProviderReplies?.get(i);\n        // If there isn't a reply, the provider hasn't responded yet.\n\n        // TODO: If there isn't a reply yet it means that the provider is still resolving. Ensuring\n        // provideLinks isn't triggered again saves ILink.hover firing twice though. This probably\n        // needs promises to get fixed\n        if (existingReply) {\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n        }\n      } else {\n        linkProvider.provideLinks(position.y, (links: ILink[] | undefined) => {\n          if (this._isMouseOut) {\n            return;\n          }\n          const linksWithState: ILinkWithState[] | undefined = links?.map(link  => ({ link }));\n          this._activeProviderReplies?.set(i, linksWithState);\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n\n          // If all providers have responded, remove lower priority links that intersect ranges of\n          // higher priority links\n          if (this._activeProviderReplies?.size === this._linkProviders.length) {\n            this._removeIntersectingLinks(position.y, this._activeProviderReplies);\n          }\n        });\n      }\n    }\n  }\n\n  private _removeIntersectingLinks(y: number, replies: Map<Number, ILinkWithState[] | undefined>): void {\n    const occupiedCells = new Set<number>();\n    for (let i = 0; i < replies.size; i++) {\n      const providerReply = replies.get(i);\n      if (!providerReply) {\n        continue;\n      }\n      for (let i = 0; i < providerReply.length; i++) {\n        const linkWithState = providerReply[i];\n        const startX = linkWithState.link.range.start.y < y ? 0 : linkWithState.link.range.start.x;\n        const endX = linkWithState.link.range.end.y > y ? this._bufferService.cols : linkWithState.link.range.end.x;\n        for (let x = startX; x <= endX; x++) {\n          if (occupiedCells.has(x)) {\n            providerReply.splice(i--, 1);\n            break;\n          }\n          occupiedCells.add(x);\n        }\n      }\n    }\n  }\n\n  private _checkLinkProviderResult(index: number, position: IBufferCellPosition, linkProvided: boolean): boolean {\n    if (!this._activeProviderReplies) {\n      return linkProvided;\n    }\n\n    const links = this._activeProviderReplies.get(index);\n\n    // Check if every provider before this one has come back undefined\n    let hasLinkBefore = false;\n    for (let j = 0; j < index; j++) {\n      if (!this._activeProviderReplies.has(j) || this._activeProviderReplies.get(j)) {\n        hasLinkBefore = true;\n      }\n    }\n\n    // If all providers with higher priority came back undefined, then this provider's link for\n    // the position should be used\n    if (!hasLinkBefore && links) {\n      const linkAtPosition = links.find(link => this._linkAtPosition(link.link, position));\n      if (linkAtPosition) {\n        linkProvided = true;\n        this._handleNewLink(linkAtPosition);\n      }\n    }\n\n    // Check if all the providers have responded\n    if (this._activeProviderReplies.size === this._linkProviders.length && !linkProvided) {\n      // Respect the order of the link providers\n      for (let j = 0; j < this._activeProviderReplies.size; j++) {\n        const currentLink = this._activeProviderReplies.get(j)?.find(link => this._linkAtPosition(link.link, position));\n        if (currentLink) {\n          linkProvided = true;\n          this._handleNewLink(currentLink);\n          break;\n        }\n      }\n    }\n\n    return linkProvided;\n  }\n\n  private _handleMouseDown(): void {\n    this._mouseDownLink = this._currentLink;\n  }\n\n  private _handleMouseUp(event: MouseEvent): void {\n    if (!this._element || !this._mouseService || !this._currentLink) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n\n    if (this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, position)) {\n      this._currentLink.link.activate(event, this._currentLink.link.text);\n    }\n  }\n\n  private _clearCurrentLink(startRow?: number, endRow?: number): void {\n    if (!this._element || !this._currentLink || !this._lastMouseEvent) {\n      return;\n    }\n\n    // If we have a start and end row, check that the link is within it\n    if (!startRow || !endRow || (this._currentLink.link.range.start.y >= startRow && this._currentLink.link.range.end.y <= endRow)) {\n      this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent);\n      this._currentLink = undefined;\n      disposeArray(this._linkCacheDisposables);\n    }\n  }\n\n  private _handleNewLink(linkWithState: ILinkWithState): void {\n    if (!this._element || !this._lastMouseEvent || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n\n    if (!position) {\n      return;\n    }\n\n    // Trigger hover if the we have a link at the position\n    if (this._linkAtPosition(linkWithState.link, position)) {\n      this._currentLink = linkWithState;\n      this._currentLink.state = {\n        decorations: {\n          underline: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.underline,\n          pointerCursor: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.pointerCursor\n        },\n        isHovered: true\n      };\n      this._linkHover(this._element, linkWithState.link, this._lastMouseEvent);\n\n      // Add listener for tracking decorations changes\n      linkWithState.link.decorations = {} as ILinkDecorations;\n      Object.defineProperties(linkWithState.link.decorations, {\n        pointerCursor: {\n          get: () => this._currentLink?.state?.decorations.pointerCursor,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink.state.decorations.pointerCursor !== v) {\n              this._currentLink.state.decorations.pointerCursor = v;\n              if (this._currentLink.state.isHovered) {\n                this._element?.classList.toggle('xterm-cursor-pointer', v);\n              }\n            }\n          }\n        },\n        underline: {\n          get: () => this._currentLink?.state?.decorations.underline,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink?.state?.decorations.underline !== v) {\n              this._currentLink.state.decorations.underline = v;\n              if (this._currentLink.state.isHovered) {\n                this._fireUnderlineEvent(linkWithState.link, v);\n              }\n            }\n          }\n        }\n      });\n\n      // Add listener for rerendering\n      if (this._renderService) {\n        this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange(e => {\n          // When start is 0 a scroll most likely occurred, make sure links above the fold also get\n          // cleared.\n          const start = e.start === 0 ? 0 : e.start + 1 + this._bufferService.buffer.ydisp;\n          this._clearCurrentLink(start, e.end + 1 + this._bufferService.buffer.ydisp);\n        }));\n      }\n    }\n  }\n\n  protected _linkHover(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = true;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, true);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.add('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.hover) {\n      link.hover(event, link.text);\n    }\n  }\n\n  private _fireUnderlineEvent(link: ILink, showEvent: boolean): void {\n    const range = link.range;\n    const scrollOffset = this._bufferService.buffer.ydisp;\n    const event = this._createLinkUnderlineEvent(range.start.x - 1, range.start.y - scrollOffset - 1, range.end.x, range.end.y - scrollOffset - 1, undefined);\n    const emitter = showEvent ? this._onShowLinkUnderline : this._onHideLinkUnderline;\n    emitter.fire(event);\n  }\n\n  protected _linkLeave(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = false;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, false);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.remove('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.leave) {\n      link.leave(event, link.text);\n    }\n  }\n\n  /**\n   * Check if the buffer position is within the link\n   * @param link\n   * @param position\n   */\n  private _linkAtPosition(link: ILink, position: IBufferCellPosition): boolean {\n    const sameLine = link.range.start.y === link.range.end.y;\n    const wrappedFromLeft = link.range.start.y < position.y;\n    const wrappedToRight = link.range.end.y > position.y;\n\n    // If the start and end have the same y, then the position must be between start and end x\n    // If not, then handle each case seperately, depending on which way it wraps\n    return ((sameLine && link.range.start.x <= position.x && link.range.end.x >= position.x) ||\n      (wrappedFromLeft && link.range.end.x >= position.x) ||\n      (wrappedToRight && link.range.start.x <= position.x) ||\n      (wrappedFromLeft && wrappedToRight)) &&\n      link.range.start.y <= position.y &&\n      link.range.end.y >= position.y;\n  }\n\n  /**\n   * Get the buffer position from a mouse event\n   * @param event\n   */\n  private _positionFromMouseEvent(event: MouseEvent, element: HTMLElement, mouseService: IMouseService): IBufferCellPosition | undefined {\n    const coords = mouseService.getCoords(event, element, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return;\n    }\n\n    return { x: coords[0], y: coords[1] + this._bufferService.buffer.ydisp };\n  }\n\n  private _createLinkUnderlineEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// eslint-disable-next-line prefer-const\nexport let promptLabel = 'Terminal input';\n\n// eslint-disable-next-line prefer-const\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IMouseService, ISelectionService } from 'browser/services/Services';\nimport { IMouseZoneManager, IMouseZone } from 'browser/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\n/**\n * The MouseZoneManager allows components to register zones within the terminal\n * that trigger hover and click callbacks.\n *\n * This class was intentionally made not so robust initially as the only case it\n * needed to support was single-line links which never overlap. Improvements can\n * be made in the future.\n */\nexport class MouseZoneManager extends Disposable implements IMouseZoneManager {\n  private _zones: IMouseZone[] = [];\n\n  private _areZonesActive: boolean = false;\n  private _mouseMoveListener: (e: MouseEvent) => any;\n  private _mouseLeaveListener: (e: MouseEvent) => any;\n  private _clickListener: (e: MouseEvent) => any;\n\n  private _tooltipTimeout: number | undefined;\n  private _currentZone: IMouseZone | undefined;\n  private _lastHoverCoords: [number | undefined, number | undefined] = [undefined, undefined];\n  private _initialSelectionLength: number = 0;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @ISelectionService private readonly _selectionService: ISelectionService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n\n    this.register(addDisposableDomListener(this._element, 'mousedown', e => this._onMouseDown(e)));\n\n    // These events are expensive, only listen to it when mouse zones are active\n    this._mouseMoveListener = e => this._onMouseMove(e);\n    this._mouseLeaveListener = e => this._onMouseLeave(e);\n    this._clickListener = e => this._onClick(e);\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this._deactivate();\n  }\n\n  public add(zone: IMouseZone): void {\n    this._zones.push(zone);\n    if (this._zones.length === 1) {\n      this._activate();\n    }\n  }\n\n  public clearAll(start?: number, end?: number): void {\n    // Exit if there's nothing to clear\n    if (this._zones.length === 0) {\n      return;\n    }\n\n    // Clear all if start/end weren't set\n    if (!start || !end) {\n      start = 0;\n      end = this._bufferService.rows - 1;\n    }\n\n    // Iterate through zones and clear them out if they're within the range\n    for (let i = 0; i < this._zones.length; i++) {\n      const zone = this._zones[i];\n      if ((zone.y1 > start && zone.y1 <= end + 1) ||\n          (zone.y2 > start && zone.y2 <= end + 1) ||\n          (zone.y1 < start && zone.y2 > end + 1)) {\n        if (this._currentZone && this._currentZone === zone) {\n          this._currentZone.leaveCallback();\n          this._currentZone = undefined;\n        }\n        this._zones.splice(i--, 1);\n      }\n    }\n\n    // Deactivate the mouse zone manager if all the zones have been removed\n    if (this._zones.length === 0) {\n      this._deactivate();\n    }\n  }\n\n  private _activate(): void {\n    if (!this._areZonesActive) {\n      this._areZonesActive = true;\n      this._element.addEventListener('mousemove', this._mouseMoveListener);\n      this._element.addEventListener('mouseleave', this._mouseLeaveListener);\n      this._element.addEventListener('click', this._clickListener);\n    }\n  }\n\n  private _deactivate(): void {\n    if (this._areZonesActive) {\n      this._areZonesActive = false;\n      this._element.removeEventListener('mousemove', this._mouseMoveListener);\n      this._element.removeEventListener('mouseleave', this._mouseLeaveListener);\n      this._element.removeEventListener('click', this._clickListener);\n    }\n  }\n\n  private _onMouseMove(e: MouseEvent): void {\n    // TODO: Ideally this would only clear the hover state when the mouse moves\n    // outside of the mouse zone\n    if (this._lastHoverCoords[0] !== e.pageX || this._lastHoverCoords[1] !== e.pageY) {\n      this._onHover(e);\n      // Record the current coordinates\n      this._lastHoverCoords = [e.pageX, e.pageY];\n    }\n  }\n\n  private _onHover(e: MouseEvent): void {\n    const zone = this._findZoneEventAt(e);\n\n    // Do nothing if the zone is the same\n    if (zone === this._currentZone) {\n      return;\n    }\n\n    // Fire the hover end callback and cancel any existing timer if a new zone\n    // is being hovered\n    if (this._currentZone) {\n      this._currentZone.leaveCallback();\n      this._currentZone = undefined;\n      if (this._tooltipTimeout) {\n        clearTimeout(this._tooltipTimeout);\n      }\n    }\n\n    // Exit if there is not zone\n    if (!zone) {\n      return;\n    }\n    this._currentZone = zone;\n\n    // Trigger the hover callback\n    if (zone.hoverCallback) {\n      zone.hoverCallback(e);\n    }\n\n    // Restart the tooltip timeout\n    this._tooltipTimeout = window.setTimeout(() => this._onTooltip(e), this._optionsService.rawOptions.linkTooltipHoverDuration);\n  }\n\n  private _onTooltip(e: MouseEvent): void {\n    this._tooltipTimeout = undefined;\n    const zone = this._findZoneEventAt(e);\n    zone?.tooltipCallback(e);\n  }\n\n  private _onMouseDown(e: MouseEvent): void {\n    // Store current terminal selection length, to check if we're performing\n    // a selection operation\n    this._initialSelectionLength = this._getSelectionLength();\n\n    // Ignore the event if there are no zones active\n    if (!this._areZonesActive) {\n      return;\n    }\n\n    // Find the active zone, prevent event propagation if found to prevent other\n    // components from handling the mouse event.\n    const zone = this._findZoneEventAt(e);\n    if (zone?.willLinkActivate(e)) {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  private _onMouseLeave(e: MouseEvent): void {\n    // Fire the hover end callback and cancel any existing timer if the mouse\n    // leaves the terminal element\n    if (this._currentZone) {\n      this._currentZone.leaveCallback();\n      this._currentZone = undefined;\n      if (this._tooltipTimeout) {\n        clearTimeout(this._tooltipTimeout);\n      }\n    }\n  }\n\n  private _onClick(e: MouseEvent): void {\n    // Find the active zone and click it if found and no selection was\n    // being performed\n    const zone = this._findZoneEventAt(e);\n    const currentSelectionLength = this._getSelectionLength();\n\n    if (zone && currentSelectionLength === this._initialSelectionLength) {\n      zone.clickCallback(e);\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  private _getSelectionLength(): number {\n    const selectionText = this._selectionService.selectionText;\n    return selectionText ? selectionText.length : 0;\n  }\n\n  private _findZoneEventAt(e: MouseEvent): IMouseZone | undefined {\n    const coords = this._mouseService.getCoords(e, this._screenElement, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return undefined;\n    }\n    const x = coords[0];\n    const y = coords[1];\n    for (let i = 0; i < this._zones.length; i++) {\n      const zone = this._zones[i];\n      if (zone.y1 === zone.y2) {\n        // Single line link\n        if (y === zone.y1 && x >= zone.x1 && x < zone.x2) {\n          return zone;\n        }\n      } else {\n        // Multi-line link\n        if ((y === zone.y1 && x >= zone.x1) ||\n            (y === zone.y2 && x < zone.x2) ||\n            (y > zone.y1 && y < zone.y2)) {\n          return zone;\n        }\n      }\n    }\n    return undefined;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\n\n/**\n * Debounces calls to render terminal rows using animation frames.\n */\nexport class RenderDebouncer implements IRenderDebouncerWithCallback {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n  private _animationFrame: number | undefined;\n  private _refreshCallbacks: FrameRequestCallback[] = [];\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    this._refreshCallbacks.push(callback);\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => this._innerRefresh());\n    }\n    return this._animationFrame;\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    if (this._animationFrame) {\n      return;\n    }\n\n    this._animationFrame = window.requestAnimationFrame(() => this._innerRefresh());\n  }\n\n  private _innerRefresh(): void {\n    this._animationFrame = undefined;\n\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      this._runRefreshCallbacks();\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n    this._runRefreshCallbacks();\n  }\n\n  private _runRefreshCallbacks(): void {\n    for (const callback of this._refreshCallbacks) {\n      callback(0);\n    }\n    this._refreshCallbacks = [];\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\n\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\n\n/**\n * The screen device pixel ratio monitor allows listening for when the\n * window.devicePixelRatio value changes. This is done not with polling but with\n * the use of window.matchMedia to watch media queries. When the event fires,\n * the listener will be reattached using a different media query to ensure that\n * any further changes will register.\n *\n * The listener should fire on both window zoom changes and switching to a\n * monitor with a different DPI.\n */\nexport class ScreenDprMonitor extends Disposable {\n  private _currentDevicePixelRatio: number = window.devicePixelRatio;\n  private _outerListener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | undefined;\n  private _listener: ScreenDprListener | undefined;\n  private _resolutionMediaMatchList: MediaQueryList | undefined;\n\n  public setListener(listener: ScreenDprListener): void {\n    if (this._listener) {\n      this.clearListener();\n    }\n    this._listener = listener;\n    this._outerListener = () => {\n      if (!this._listener) {\n        return;\n      }\n      this._listener(window.devicePixelRatio, this._currentDevicePixelRatio);\n      this._updateDpr();\n    };\n    this._updateDpr();\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.clearListener();\n  }\n\n  private _updateDpr(): void {\n    if (!this._outerListener) {\n      return;\n    }\n\n    // Clear listeners for old DPR\n    this._resolutionMediaMatchList?.removeListener(this._outerListener);\n\n    // Add listeners for new DPR\n    this._currentDevicePixelRatio = window.devicePixelRatio;\n    this._resolutionMediaMatchList = window.matchMedia(`screen and (resolution: ${window.devicePixelRatio}dppx)`);\n    this._resolutionMediaMatchList.addListener(this._outerListener);\n  }\n\n  public clearListener(): void {\n    if (!this._resolutionMediaMatchList || !this._listener || !this._outerListener) {\n      return;\n    }\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\n    this._resolutionMediaMatchList = undefined;\n    this._listener = undefined;\n    this._outerListener = undefined;\n  }\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { ICompositionHelper, ITerminal, IBrowser, CustomKeyEventHandler, ILinkifier, IMouseZoneManager, LinkMatcherHandler, ILinkMatcherOptions, IViewport, ILinkifier2, CharacterJoinerHandler } from 'browser/Types';\nimport { IRenderer } from 'browser/renderer/Types';\nimport { CompositionHelper } from 'browser/input/CompositionHelper';\nimport { Viewport } from 'browser/Viewport';\nimport { rightClickHandler, moveTextAreaUnderMouseCursor, handlePasteEvent, copyHandler, paste } from 'browser/Clipboard';\nimport { C0, C1_ESCAPED } from 'common/data/EscapeSequences';\nimport { WindowsOptionsReportType } from '../common/InputHandler';\nimport { Renderer } from 'browser/renderer/Renderer';\nimport { Linkifier } from 'browser/Linkifier';\nimport { SelectionService } from 'browser/services/SelectionService';\nimport * as Browser from 'common/Platform';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { SoundService } from 'browser/services/SoundService';\nimport { MouseZoneManager } from 'browser/MouseZoneManager';\nimport { AccessibilityManager } from './AccessibilityManager';\nimport { ITheme, IMarker, IDisposable, ISelectionPosition, ILinkProvider, IDecorationOptions, IDecoration } from 'xterm';\nimport { DomRenderer } from 'browser/renderer/dom/DomRenderer';\nimport { KeyboardResultType, CoreMouseEventType, CoreMouseButton, CoreMouseAction, ITerminalOptions, ScrollSource, IColorEvent, ColorIndex, ColorRequestType } from 'common/Types';\nimport { evaluateKeyboardEvent } from 'common/input/Keyboard';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { ColorManager } from 'browser/ColorManager';\nimport { RenderService } from 'browser/services/RenderService';\nimport { ICharSizeService, IRenderService, IMouseService, ISelectionService, ISoundService, ICoreBrowserService, ICharacterJoinerService } from 'browser/services/Services';\nimport { CharSizeService } from 'browser/services/CharSizeService';\nimport { IBuffer } from 'common/buffer/Types';\nimport { MouseService } from 'browser/services/MouseService';\nimport { Linkifier2 } from 'browser/Linkifier2';\nimport { CoreBrowserService } from 'browser/services/CoreBrowserService';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { color, rgba } from 'common/Color';\nimport { CharacterJoinerService } from 'browser/services/CharacterJoinerService';\nimport { toRgbString } from 'common/input/XParseColor';\nimport { BufferDecorationRenderer } from 'browser/decorations/BufferDecorationRenderer';\nimport { OverviewRulerRenderer } from 'browser/decorations/OverviewRulerRenderer';\nimport { DecorationService } from 'common/services/DecorationService';\nimport { IDecorationService } from 'common/services/Services';\n\n// Let it work inside Node.js for automated testing purposes.\nconst document: Document = (typeof window !== 'undefined') ? window.document : null as any;\n\nexport class Terminal extends CoreTerminal implements ITerminal {\n  public textarea: HTMLTextAreaElement | undefined;\n  public element: HTMLElement | undefined;\n  public screenElement: HTMLElement | undefined;\n\n  private _document: Document | undefined;\n  private _viewportScrollArea: HTMLElement | undefined;\n  private _viewportElement: HTMLElement | undefined;\n  private _helperContainer: HTMLElement | undefined;\n  private _compositionView: HTMLElement | undefined;\n\n  private _overviewRulerRenderer: OverviewRulerRenderer | undefined;\n\n  // private _visualBellTimer: number;\n\n  public browser: IBrowser = Browser as any;\n\n  private _customKeyEventHandler: CustomKeyEventHandler | undefined;\n\n  // browser services\n  private _decorationService: DecorationService;\n  private _charSizeService: ICharSizeService | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _characterJoinerService: ICharacterJoinerService | undefined;\n  private _selectionService: ISelectionService | undefined;\n  private _soundService: ISoundService | undefined;\n\n  /**\n   * Records whether the keydown event has already been handled and triggered a data event, if so\n   * the keypress event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyDownHandled: boolean = false;\n\n  /**\n   * Records whether a keydown event has occured since the last keyup event, i.e. whether a key\n   * is currently \"pressed\".\n   */\n  private _keyDownSeen: boolean = false;\n\n  /**\n   * Records whether the keypress event has already been handled and triggered a data event, if so\n   * the input event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyPressHandled: boolean = false;\n\n  /**\n   * Records whether there has been a keydown event for a dead key without a corresponding keydown\n   * event for the composed/alternative character. If we cancel the keydown event for the dead key,\n   * no events will be emitted for the final character.\n   */\n  private _unprocessedDeadKey: boolean = false;\n\n  public linkifier: ILinkifier;\n  public linkifier2: ILinkifier2;\n  public viewport: IViewport | undefined;\n  private _compositionHelper: ICompositionHelper | undefined;\n  private _mouseZoneManager: IMouseZoneManager | undefined;\n  private _accessibilityManager: AccessibilityManager | undefined;\n  private _colorManager: ColorManager | undefined;\n  private _theme: ITheme | undefined;\n\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onKey = new EventEmitter<{ key: string, domEvent: KeyboardEvent }>();\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._onKey.event; }\n  private _onRender = new EventEmitter<{ start: number, end: number }>();\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._onRender.event; }\n  private _onSelectionChange = new EventEmitter<void>();\n  public get onSelectionChange(): IEvent<void> { return this._onSelectionChange.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n  private _onBell = new EventEmitter<void>();\n  public get onBell(): IEvent<void> { return this._onBell.event; }\n\n  private _onFocus = new EventEmitter<void>();\n  public get onFocus(): IEvent<void> { return this._onFocus.event; }\n  private _onBlur = new EventEmitter<void>();\n  public get onBlur(): IEvent<void> { return this._onBlur.event; }\n  private _onA11yCharEmitter = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\n  private _onA11yTabEmitter = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\n\n  /**\n   * Creates a new `Terminal` object.\n   *\n   * @param options An object containing a set of options, the available options are:\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\n   *\n   * @public\n   * @class Xterm Xterm\n   * @alias module:xterm/src/xterm\n   */\n  constructor(\n    options: Partial<ITerminalOptions> = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    this.linkifier = this._instantiationService.createInstance(Linkifier);\n    this.linkifier2 = this.register(this._instantiationService.createInstance(Linkifier2));\n    this._decorationService = this._instantiationService.createInstance(DecorationService);\n    this._instantiationService.setService(IDecorationService, this._decorationService);\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this.bell()));\n    this.register(this._inputHandler.onRequestRefreshRows((start, end) => this.refresh(start, end)));\n    this.register(this._inputHandler.onRequestSendFocus(() => this._reportFocus()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(this._inputHandler.onRequestWindowsOptionsReport(type => this._reportWindowsOptions(type)));\n    this.register(this._inputHandler.onColor((event) => this._handleColorEvent(event)));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n\n    // Setup listeners\n    this.register(this._bufferService.onResize(e => this._afterResize(e.cols, e.rows)));\n  }\n\n  /**\n   * Handle color event from inputhandler for OSC 4|104 | 10|110 | 11|111 | 12|112.\n   * An event from OSC 4|104 may contain multiple set or report requests, and multiple\n   * or none restore requests (resetting all),\n   * while an event from OSC 10|110 | 11|111 | 12|112 always contains a single request.\n   */\n  private _handleColorEvent(event: IColorEvent): void {\n    if (!this._colorManager) return;\n    for (const req of event) {\n      let acc: 'foreground' | 'background' | 'cursor' | 'ansi' | undefined = undefined;\n      let ident = '';\n      switch (req.index) {\n        case ColorIndex.FOREGROUND: // OSC 10 | 110\n          acc = 'foreground';\n          ident = '10';\n          break;\n        case ColorIndex.BACKGROUND: // OSC 11 | 111\n          acc = 'background';\n          ident = '11';\n          break;\n        case ColorIndex.CURSOR: // OSC 12 | 112\n          acc = 'cursor';\n          ident = '12';\n          break;\n        default: // OSC 4 | 104\n          // we can skip the [0..255] range check here (already done in inputhandler)\n          acc = 'ansi';\n          ident = '4;' + req.index;\n      }\n      if (acc) {\n        switch (req.type) {\n          case ColorRequestType.REPORT:\n            const channels = color.toColorRGB(acc === 'ansi'\n              ? this._colorManager.colors.ansi[req.index]\n              : this._colorManager.colors[acc]);\n            this.coreService.triggerDataEvent(`${C0.ESC}]${ident};${toRgbString(channels)}${C1_ESCAPED.ST}`);\n            break;\n          case ColorRequestType.SET:\n            if (acc === 'ansi') this._colorManager.colors.ansi[req.index] = rgba.toColor(...req.color);\n            else this._colorManager.colors[acc] = rgba.toColor(...req.color);\n            break;\n          case ColorRequestType.RESTORE:\n            this._colorManager.restoreColor(req.index);\n            break;\n        }\n      }\n    }\n    this._renderService?.setColors(this._colorManager.colors);\n    this.viewport?.onThemeChange(this._colorManager.colors);\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._renderService?.dispose();\n    this._customKeyEventHandler = undefined;\n    this.write = () => { };\n    this.element?.parentNode?.removeChild(this.element);\n  }\n\n  protected _setup(): void {\n    super._setup();\n\n    this._customKeyEventHandler = undefined;\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  /**\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n   */\n  public focus(): void {\n    if (this.textarea) {\n      this.textarea.focus({ preventScroll: true });\n    }\n  }\n\n  protected _updateOptions(key: string): void {\n    super._updateOptions(key);\n\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'fontFamily':\n      case 'fontSize':\n        // When the font changes the size of the cells may change which requires a renderer clear\n        this._renderService?.clear();\n        this._charSizeService?.measure();\n        break;\n      case 'cursorBlink':\n      case 'cursorStyle':\n        // The DOM renderer needs a row refresh to update the cursor styles\n        this.refresh(this.buffer.y, this.buffer.y);\n        break;\n      case 'customGlyphs':\n      case 'drawBoldTextInBrightColors':\n      case 'letterSpacing':\n      case 'lineHeight':\n      case 'fontWeight':\n      case 'fontWeightBold':\n      case 'minimumContrastRatio':\n        // When the font changes the size of the cells may change which requires a renderer clear\n        if (this._renderService) {\n          this._renderService.clear();\n          this._renderService.onResize(this.cols, this.rows);\n          this.refresh(0, this.rows - 1);\n        }\n        break;\n      case 'rendererType':\n        if (this._renderService) {\n          this._renderService.setRenderer(this._createRenderer());\n          this._renderService.onResize(this.cols, this.rows);\n        }\n        break;\n      case 'scrollback':\n        this.viewport?.syncScrollArea();\n        break;\n      case 'screenReaderMode':\n        if (this.optionsService.rawOptions.screenReaderMode) {\n          if (!this._accessibilityManager && this._renderService) {\n            this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n          }\n        } else {\n          this._accessibilityManager?.dispose();\n          this._accessibilityManager = undefined;\n        }\n        break;\n      case 'tabStopWidth': this.buffers.setupTabStops(); break;\n      case 'theme':\n        this._setTheme(this.optionsService.rawOptions.theme);\n        break;\n    }\n  }\n\n  /**\n   * Binds the desired focus behavior on a given terminal object.\n   */\n  private _onTextAreaFocus(ev: KeyboardEvent): void {\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    }\n    this.updateCursorStyle(ev);\n    this.element!.classList.add('focus');\n    this._showCursor();\n    this._onFocus.fire();\n  }\n\n  /**\n   * Blur the terminal, calling the blur function on the terminal's underlying\n   * textarea.\n   */\n  public blur(): void {\n    return this.textarea?.blur();\n  }\n\n  /**\n   * Binds the desired blur behavior on a given terminal object.\n   */\n  private _onTextAreaBlur(): void {\n    // Text can safely be removed on blur. Doing it earlier could interfere with\n    // screen readers reading it out.\n    this.textarea!.value = '';\n    this.refresh(this.buffer.y, this.buffer.y);\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n    this.element!.classList.remove('focus');\n    this._onBlur.fire();\n  }\n\n  private _syncTextArea(): void {\n    if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper!.isComposing || !this._renderService) {\n      return;\n    }\n    const cursorY = this.buffer.ybase + this.buffer.y;\n    const bufferLine = this.buffer.lines.get(cursorY);\n    if (!bufferLine) {\n      return;\n    }\n    const cursorX = Math.min(this.buffer.x, this.cols - 1);\n    const cellHeight = this._renderService.dimensions.actualCellHeight;\n    const width = bufferLine.getWidth(cursorX);\n    const cellWidth = this._renderService.dimensions.actualCellWidth * width;\n    const cursorTop = this.buffer.y * this._renderService.dimensions.actualCellHeight;\n    const cursorLeft = cursorX * this._renderService.dimensions.actualCellWidth;\n\n    // Sync the textarea to the exact position of the composition view so the IME knows where the\n    // text is.\n    this.textarea.style.left = cursorLeft + 'px';\n    this.textarea.style.top = cursorTop + 'px';\n    this.textarea.style.width = cellWidth + 'px';\n    this.textarea.style.height = cellHeight + 'px';\n    this.textarea.style.lineHeight = cellHeight + 'px';\n    this.textarea.style.zIndex = '-5';\n  }\n\n  /**\n   * Initialize default behavior\n   */\n  private _initGlobal(): void {\n    this._bindKeys();\n\n    // Bind clipboard functionality\n    this.register(addDisposableDomListener(this.element!, 'copy', (event: ClipboardEvent) => {\n      // If mouse events are active it means the selection manager is disabled and\n      // copy should be handled by the host program.\n      if (!this.hasSelection()) {\n        return;\n      }\n      copyHandler(event, this._selectionService!);\n    }));\n    const pasteHandlerWrapper = (event: ClipboardEvent): void => handlePasteEvent(event, this.textarea!, this.coreService);\n    this.register(addDisposableDomListener(this.textarea!, 'paste', pasteHandlerWrapper));\n    this.register(addDisposableDomListener(this.element!, 'paste', pasteHandlerWrapper));\n\n    // Handle right click context menus\n    if (Browser.isFirefox) {\n      // Firefox doesn't appear to fire the contextmenu event on right click\n      this.register(addDisposableDomListener(this.element!, 'mousedown', (event: MouseEvent) => {\n        if (event.button === 2) {\n          rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n        }\n      }));\n    } else {\n      this.register(addDisposableDomListener(this.element!, 'contextmenu', (event: MouseEvent) => {\n        rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n      }));\n    }\n\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\n    // middle click to paste selection works. This only appears to work in Chrome\n    // at the time is writing.\n    if (Browser.isLinux) {\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\n      // that the regular click event doesn't fire for the middle mouse button.\n      this.register(addDisposableDomListener(this.element!, 'auxclick', (event: MouseEvent) => {\n        if (event.button === 1) {\n          moveTextAreaUnderMouseCursor(event, this.textarea!, this.screenElement!);\n        }\n      }));\n    }\n  }\n\n  /**\n   * Apply key handling to the terminal\n   */\n  private _bindKeys(): void {\n    this.register(addDisposableDomListener(this.textarea!, 'keyup', (ev: KeyboardEvent) => this._keyUp(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionstart', () => this._compositionHelper!.compositionstart()));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper!.compositionupdate(e)));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionend', () => this._compositionHelper!.compositionend()));\n    this.register(addDisposableDomListener(this.textarea!, 'input', (ev: InputEvent) => this._inputEvent(ev), true));\n    this.register(this.onRender(() => this._compositionHelper!.updateCompositionElements()));\n    this.register(this.onRender(e => this._queueLinkification(e.start, e.end)));\n  }\n\n  /**\n   * Opens the terminal within an element.\n   *\n   * @param parent The element to create the terminal within.\n   */\n  public open(parent: HTMLElement): void {\n    if (!parent) {\n      throw new Error('Terminal requires a parent element.');\n    }\n\n    if (!parent.isConnected) {\n      this._logService.debug('Terminal.open was called on an element that was not attached to the DOM');\n    }\n\n    this._document = parent.ownerDocument!;\n\n    // Create main element container\n    this.element = this._document.createElement('div');\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\n    this.element.classList.add('terminal');\n    this.element.classList.add('xterm');\n    this.element.setAttribute('tabindex', '0');\n    parent.appendChild(this.element);\n\n    // Performance: Use a document fragment to build the terminal\n    // viewport and helper elements detached from the DOM\n    const fragment = document.createDocumentFragment();\n    this._viewportElement = document.createElement('div');\n    this._viewportElement.classList.add('xterm-viewport');\n    fragment.appendChild(this._viewportElement);\n\n    this._viewportScrollArea = document.createElement('div');\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\n    this._viewportElement.appendChild(this._viewportScrollArea);\n\n    this.screenElement = document.createElement('div');\n    this.screenElement.classList.add('xterm-screen');\n    // Create the container that will hold helpers like the textarea for\n    // capturing DOM Events. Then produce the helpers.\n    this._helperContainer = document.createElement('div');\n    this._helperContainer.classList.add('xterm-helpers');\n    this.screenElement.appendChild(this._helperContainer);\n    fragment.appendChild(this.screenElement);\n\n    this.textarea = document.createElement('textarea');\n    this.textarea.classList.add('xterm-helper-textarea');\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\n    this.textarea.setAttribute('aria-multiline', 'false');\n    this.textarea.setAttribute('autocorrect', 'off');\n    this.textarea.setAttribute('autocapitalize', 'off');\n    this.textarea.setAttribute('spellcheck', 'false');\n    this.textarea.tabIndex = 0;\n    this.register(addDisposableDomListener(this.textarea, 'focus', (ev: KeyboardEvent) => this._onTextAreaFocus(ev)));\n    this.register(addDisposableDomListener(this.textarea, 'blur', () => this._onTextAreaBlur()));\n    this._helperContainer.appendChild(this.textarea);\n\n    const coreBrowserService = this._instantiationService.createInstance(CoreBrowserService, this.textarea);\n    this._instantiationService.setService(ICoreBrowserService, coreBrowserService);\n\n    this._charSizeService = this._instantiationService.createInstance(CharSizeService, this._document, this._helperContainer);\n    this._instantiationService.setService(ICharSizeService, this._charSizeService);\n\n    this._theme = this.options.theme || this._theme;\n    this._colorManager = new ColorManager(document, this.options.allowTransparency);\n    this.register(this.optionsService.onOptionChange(e => this._colorManager!.onOptionsChange(e)));\n    this._colorManager.setTheme(this._theme);\n\n    this._characterJoinerService = this._instantiationService.createInstance(CharacterJoinerService);\n    this._instantiationService.setService(ICharacterJoinerService, this._characterJoinerService);\n\n    const renderer = this._createRenderer();\n    this._renderService = this.register(this._instantiationService.createInstance(RenderService, renderer, this.rows, this.screenElement));\n    this._instantiationService.setService(IRenderService, this._renderService);\n    this.register(this._renderService.onRenderedViewportChange(e => this._onRender.fire(e)));\n    this.onResize(e => this._renderService!.resize(e.cols, e.rows));\n\n    this._compositionView = document.createElement('div');\n    this._compositionView.classList.add('composition-view');\n    this._compositionHelper = this._instantiationService.createInstance(CompositionHelper, this.textarea, this._compositionView);\n    this._helperContainer.appendChild(this._compositionView);\n\n    // Performance: Add viewport and helper elements from the fragment\n    this.element.appendChild(fragment);\n\n    this._soundService = this._instantiationService.createInstance(SoundService);\n    this._instantiationService.setService(ISoundService, this._soundService);\n    this._mouseService = this._instantiationService.createInstance(MouseService);\n    this._instantiationService.setService(IMouseService, this._mouseService);\n\n    this.viewport = this._instantiationService.createInstance(Viewport,\n      (amount: number) => this.scrollLines(amount, true, ScrollSource.VIEWPORT),\n      this._viewportElement,\n      this._viewportScrollArea,\n      this.element\n    );\n    this.viewport.onThemeChange(this._colorManager.colors);\n    this.register(this._inputHandler.onRequestSyncScrollBar(() => this.viewport!.syncScrollArea()));\n    this.register(this.viewport);\n\n    this.register(this.onCursorMove(() => {\n      this._renderService!.onCursorMove();\n      this._syncTextArea();\n    }));\n    this.register(this.onResize(() => this._renderService!.onResize(this.cols, this.rows)));\n    this.register(this.onBlur(() => this._renderService!.onBlur()));\n    this.register(this.onFocus(() => this._renderService!.onFocus()));\n    this.register(this._renderService.onDimensionsChange(() => this.viewport!.syncScrollArea()));\n\n    this._selectionService = this.register(this._instantiationService.createInstance(SelectionService,\n      this.element,\n      this.screenElement,\n      this.linkifier2\n    ));\n    this._instantiationService.setService(ISelectionService, this._selectionService);\n    this.register(this._selectionService.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent)));\n    this.register(this._selectionService.onSelectionChange(() => this._onSelectionChange.fire()));\n    this.register(this._selectionService.onRequestRedraw(e => this._renderService!.onSelectionChanged(e.start, e.end, e.columnSelectMode)));\n    this.register(this._selectionService.onLinuxMouseSelection(text => {\n      // If there's a new selection, put it into the textarea, focus and select it\n      // in order to register it as a selection on the OS. This event is fired\n      // only on Linux to enable middle click to paste selection.\n      this.textarea!.value = text;\n      this.textarea!.focus();\n      this.textarea!.select();\n    }));\n    this.register(this._onScroll.event(ev => {\n      this.viewport!.syncScrollArea();\n      this._selectionService!.refresh();\n    }));\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', () => this._selectionService!.refresh()));\n\n    this._mouseZoneManager = this._instantiationService.createInstance(MouseZoneManager, this.element, this.screenElement);\n    this.register(this._mouseZoneManager);\n    this.register(this.onScroll(() => this._mouseZoneManager!.clearAll()));\n    this.linkifier.attachToDom(this.element, this._mouseZoneManager);\n    this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService);\n    this.register(this._instantiationService.createInstance(BufferDecorationRenderer, this.screenElement));\n    // This event listener must be registered aftre MouseZoneManager is created\n    this.register(addDisposableDomListener(this.element, 'mousedown', (e: MouseEvent) => this._selectionService!.onMouseDown(e)));\n\n    // apply mouse event classes set by escape codes before terminal was attached\n    if (this.coreMouseService.areMouseEventsActive) {\n      this._selectionService.disable();\n      this.element.classList.add('enable-mouse-events');\n    } else {\n      this._selectionService.enable();\n    }\n\n    if (this.options.screenReaderMode) {\n      // Note that this must be done *after* the renderer is created in order to\n      // ensure the correct order of the dprchange event\n      this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n    }\n\n    if (this.options.overviewRulerWidth) {\n      this._overviewRulerRenderer = this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement);\n    }\n    this.optionsService.onOptionChange(() => {\n      if (!this._overviewRulerRenderer && this.options.overviewRulerWidth && this._viewportElement && this.screenElement) {\n        this._overviewRulerRenderer = this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement);\n      }\n    });\n    // Measure the character size\n    this._charSizeService.measure();\n\n    // Setup loop that draws to screen\n    this.refresh(0, this.rows - 1);\n\n    // Initialize global actions that need to be taken on the document.\n    this._initGlobal();\n\n    // Listen for mouse events and translate\n    // them into terminal mouse protocols.\n    this.bindMouse();\n  }\n\n  private _createRenderer(): IRenderer {\n    switch (this.options.rendererType) {\n      case 'canvas': return this._instantiationService.createInstance(Renderer, this._colorManager!.colors, this.screenElement!, this.linkifier, this.linkifier2);\n      case 'dom': return this._instantiationService.createInstance(DomRenderer, this._colorManager!.colors, this.element!, this.screenElement!, this._viewportElement!, this.linkifier, this.linkifier2);\n      default: throw new Error(`Unrecognized rendererType \"${this.options.rendererType}\"`);\n    }\n  }\n\n  /**\n   * Sets the theme on the renderer. The renderer must have been initialized.\n   * @param theme The theme to set.\n   */\n  private _setTheme(theme: ITheme): void {\n    this._theme = theme;\n    this._colorManager?.setTheme(theme);\n    this._renderService?.setColors(this._colorManager!.colors);\n    this.viewport?.onThemeChange(this._colorManager!.colors);\n  }\n\n  /**\n   * Bind certain mouse events to the terminal.\n   * By default only 3 button + wheel up/down is ativated. For higher buttons\n   * no mouse report will be created. Typically the standard actions will be active.\n   *\n   * There are several reasons not to enable support for higher buttons/wheel:\n   * - Button 4 and 5 are typically used for history back and forward navigation,\n   *   there is no straight forward way to supress/intercept those standard actions.\n   * - Support for higher buttons does not work in some platform/browser combinations.\n   * - Left/right wheel was not tested.\n   * - Emulators vary in mouse button support, typically only 3 buttons and\n   *   wheel up/down work reliable.\n   *\n   * TODO: Move mouse event code into its own file.\n   */\n  public bindMouse(): void {\n    const self = this;\n    const el = this.element!;\n\n    // send event to CoreMouseService\n    function sendEvent(ev: MouseEvent | WheelEvent): boolean {\n      // get mouse coordinates\n      const pos = self._mouseService!.getRawByteCoords(ev, self.screenElement!, self.cols, self.rows);\n      if (!pos) {\n        return false;\n      }\n\n      let but: CoreMouseButton;\n      let action: CoreMouseAction | undefined;\n      switch ((ev as any).overrideType || ev.type) {\n        case 'mousemove':\n          action = CoreMouseAction.MOVE;\n          if (ev.buttons === undefined) {\n            // buttons is not supported on macOS, try to get a value from button instead\n            but = CoreMouseButton.NONE;\n            if (ev.button !== undefined) {\n              but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n            }\n          } else {\n            // according to MDN buttons only reports up to button 5 (AUX2)\n            but = ev.buttons & 1 ? CoreMouseButton.LEFT :\n              ev.buttons & 4 ? CoreMouseButton.MIDDLE :\n                ev.buttons & 2 ? CoreMouseButton.RIGHT :\n                  CoreMouseButton.NONE; // fallback to NONE\n          }\n          break;\n        case 'mouseup':\n          action = CoreMouseAction.UP;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'mousedown':\n          action = CoreMouseAction.DOWN;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'wheel':\n          const amount = self.viewport!.getLinesScrolled(ev as WheelEvent);\n\n          if (amount === 0) {\n            return false;\n          }\n\n          action = (ev as WheelEvent).deltaY < 0 ? CoreMouseAction.UP : CoreMouseAction.DOWN;\n          but = CoreMouseButton.WHEEL;\n          break;\n        default:\n          // dont handle other event types by accident\n          return false;\n      }\n\n      // exit if we cannot determine valid button/action values\n      // do nothing for higher buttons than wheel\n      if (action === undefined || but === undefined || but > CoreMouseButton.WHEEL) {\n        return false;\n      }\n\n      return self.coreMouseService.triggerMouseEvent({\n        col: pos.x - 33, // FIXME: why -33 here?\n        row: pos.y - 33,\n        button: but,\n        action,\n        ctrl: ev.ctrlKey,\n        alt: ev.altKey,\n        shift: ev.shiftKey\n      });\n    }\n\n    /**\n     * Event listener state handling.\n     * We listen to the onProtocolChange event of CoreMouseService and put\n     * requested listeners in `requestedEvents`. With this the listeners\n     * have all bits to do the event listener juggling.\n     * Note: 'mousedown' currently is \"always on\" and not managed\n     * by onProtocolChange.\n     */\n    const requestedEvents: { [key: string]: ((ev: Event) => void) | null } = {\n      mouseup: null,\n      wheel: null,\n      mousedrag: null,\n      mousemove: null\n    };\n    const eventListeners: { [key: string]: (ev: any) => void | boolean } = {\n      mouseup: (ev: MouseEvent) => {\n        sendEvent(ev);\n        if (!ev.buttons) {\n          // if no other button is held remove global handlers\n          this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n          if (requestedEvents.mousedrag) {\n            this._document!.removeEventListener('mousemove', requestedEvents.mousedrag);\n          }\n        }\n        return this.cancel(ev);\n      },\n      wheel: (ev: WheelEvent) => {\n        sendEvent(ev);\n        return this.cancel(ev, true);\n      },\n      mousedrag: (ev: MouseEvent) => {\n        // deal only with move while a button is held\n        if (ev.buttons) {\n          sendEvent(ev);\n        }\n      },\n      mousemove: (ev: MouseEvent) => {\n        // deal only with move without any button\n        if (!ev.buttons) {\n          sendEvent(ev);\n        }\n      }\n    };\n    this.register(this.coreMouseService.onProtocolChange(events => {\n      // apply global changes on events\n      if (events) {\n        if (this.optionsService.rawOptions.logLevel === 'debug') {\n          this._logService.debug('Binding to mouse events:', this.coreMouseService.explainEvents(events));\n        }\n        this.element!.classList.add('enable-mouse-events');\n        this._selectionService!.disable();\n      } else {\n        this._logService.debug('Unbinding from mouse events.');\n        this.element!.classList.remove('enable-mouse-events');\n        this._selectionService!.enable();\n      }\n\n      // add/remove handlers from requestedEvents\n\n      if (!(events & CoreMouseEventType.MOVE)) {\n        el.removeEventListener('mousemove', requestedEvents.mousemove!);\n        requestedEvents.mousemove = null;\n      } else if (!requestedEvents.mousemove) {\n        el.addEventListener('mousemove', eventListeners.mousemove);\n        requestedEvents.mousemove = eventListeners.mousemove;\n      }\n\n      if (!(events & CoreMouseEventType.WHEEL)) {\n        el.removeEventListener('wheel', requestedEvents.wheel!);\n        requestedEvents.wheel = null;\n      } else if (!requestedEvents.wheel) {\n        el.addEventListener('wheel', eventListeners.wheel, { passive: false });\n        requestedEvents.wheel = eventListeners.wheel;\n      }\n\n      if (!(events & CoreMouseEventType.UP)) {\n        this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n        requestedEvents.mouseup = null;\n      } else if (!requestedEvents.mouseup) {\n        requestedEvents.mouseup = eventListeners.mouseup;\n      }\n\n      if (!(events & CoreMouseEventType.DRAG)) {\n        this._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);\n        requestedEvents.mousedrag = null;\n      } else if (!requestedEvents.mousedrag) {\n        requestedEvents.mousedrag = eventListeners.mousedrag;\n      }\n    }));\n    // force initial onProtocolChange so we dont miss early mouse requests\n    this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol;\n\n    /**\n     * \"Always on\" event listeners.\n     */\n    this.register(addDisposableDomListener(el, 'mousedown', (ev: MouseEvent) => {\n      ev.preventDefault();\n      this.focus();\n\n      // Don't send the mouse button to the pty if mouse events are disabled or\n      // if the selection manager is having selection forced (ie. a modifier is\n      // held).\n      if (!this.coreMouseService.areMouseEventsActive || this._selectionService!.shouldForceSelection(ev)) {\n        return;\n      }\n\n      sendEvent(ev);\n\n      // Register additional global handlers which should keep reporting outside\n      // of the terminal element.\n      // Note: Other emulators also do this for 'mousedown' while a button\n      // is held, we currently limit 'mousedown' to the terminal only.\n      if (requestedEvents.mouseup) {\n        this._document!.addEventListener('mouseup', requestedEvents.mouseup);\n      }\n      if (requestedEvents.mousedrag) {\n        this._document!.addEventListener('mousemove', requestedEvents.mousedrag);\n      }\n\n      return this.cancel(ev);\n    }));\n\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\n      // do nothing, if app side handles wheel itself\n      if (requestedEvents.wheel) return;\n\n      if (!this.buffer.hasScrollback) {\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\n        const amount = this.viewport!.getLinesScrolled(ev);\n\n        // Do nothing if there's no vertical scroll\n        if (amount === 0) {\n          return;\n        }\n\n        // Construct and send sequences\n        const sequence = C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n        let data = '';\n        for (let i = 0; i < Math.abs(amount); i++) {\n          data += sequence;\n        }\n        this.coreService.triggerDataEvent(data, true);\n        return this.cancel(ev, true);\n      }\n\n      // normal viewport scrolling\n      // conditionally stop event, if the viewport still had rows to scroll within\n      if (this.viewport!.onWheel(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n\n    this.register(addDisposableDomListener(el, 'touchstart', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      this.viewport!.onTouchStart(ev);\n      return this.cancel(ev);\n    }, { passive: true }));\n\n    this.register(addDisposableDomListener(el, 'touchmove', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      if (!this.viewport!.onTouchMove(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n  }\n\n\n  /**\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n   * opportunity.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  public refresh(start: number, end: number): void {\n    this._renderService?.refreshRows(start, end);\n  }\n\n  /**\n   * Queues linkification for the specified rows.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  private _queueLinkification(start: number, end: number): void {\n    this.linkifier?.linkifyRows(start, end);\n  }\n\n  /**\n   * Change the cursor style for different selection modes\n   */\n  public updateCursorStyle(ev: KeyboardEvent): void {\n    if (this._selectionService?.shouldColumnSelect(ev)) {\n      this.element!.classList.add('column-select');\n    } else {\n      this.element!.classList.remove('column-select');\n    }\n  }\n\n  /**\n   * Display the cursor element\n   */\n  private _showCursor(): void {\n    if (!this.coreService.isCursorInitialized) {\n      this.coreService.isCursorInitialized = true;\n      this.refresh(this.buffer.y, this.buffer.y);\n    }\n  }\n\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source = ScrollSource.TERMINAL): void {\n    super.scrollLines(disp, suppressScrollEvent, source);\n    this.refresh(0, this.rows - 1);\n  }\n\n  public paste(data: string): void {\n    paste(data, this.textarea!, this.coreService);\n  }\n\n  /**\n   * Attaches a custom key event handler which is run before keys are processed,\n   * giving consumers of xterm.js ultimate control as to what keys should be\n   * processed by the terminal and what keys should not.\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\n   * propagation and/or prevent the default action. The function returns whether\n   * the event should be processed by xterm.js.\n   */\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\n    this._customKeyEventHandler = customKeyEventHandler;\n  }\n\n  /**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param regex The regular expression to search for, specifically\n   * this searches the textContent of the rows. You will want to use \\s to match\n   * a space ' ' character for example.\n   * @param handler The callback when the link is called.\n   * @param options Options for the link matcher.\n   * @return The ID of the new matcher, this can be used to deregister.\n   */\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options?: ILinkMatcherOptions): number {\n    const matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\n    this.refresh(0, this.rows - 1);\n    return matcherId;\n  }\n\n  /**\n   * Deregisters a link matcher if it has been registered.\n   * @param matcherId The link matcher's ID (returned after register)\n   */\n  public deregisterLinkMatcher(matcherId: number): void {\n    if (this.linkifier.deregisterLinkMatcher(matcherId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this.linkifier2.registerLinkProvider(linkProvider);\n  }\n\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    const joinerId = this._characterJoinerService.register(handler);\n    this.refresh(0, this.rows - 1);\n    return joinerId;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): void {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    if (this._characterJoinerService.deregister(joinerId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    // Disallow markers on the alt buffer\n    if (this.buffer !== this.buffers.normal) {\n      return;\n    }\n\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    return this._decorationService.registerDecoration(decorationOptions);\n  }\n\n  /**\n   * Gets whether the terminal has an active selection.\n   */\n  public hasSelection(): boolean {\n    return this._selectionService ? this._selectionService.hasSelection : false;\n  }\n\n  /**\n   * Selects text within the terminal.\n   * @param column The column the selection starts at..\n   * @param row The row the selection starts at.\n   * @param length The length of the selection.\n   */\n  public select(column: number, row: number, length: number): void {\n    this._selectionService!.setSelection(column, row, length);\n  }\n\n  /**\n   * Gets the terminal's current selection, this is useful for implementing copy\n   * behavior outside of xterm.js.\n   */\n  public getSelection(): string {\n    return this._selectionService ? this._selectionService.selectionText : '';\n  }\n\n  public getSelectionPosition(): ISelectionPosition | undefined {\n    if (!this._selectionService || !this._selectionService.hasSelection) {\n      return undefined;\n    }\n\n    return {\n      startColumn: this._selectionService.selectionStart![0],\n      startRow: this._selectionService.selectionStart![1],\n      endColumn: this._selectionService.selectionEnd![0],\n      endRow: this._selectionService.selectionEnd![1]\n    };\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._selectionService?.clearSelection();\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._selectionService?.selectAll();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._selectionService?.selectLines(start, end);\n  }\n\n  /**\n   * Handle a keydown event\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keydown event to be handled.\n   */\n  protected _keyDown(event: KeyboardEvent): boolean | undefined {\n    this._keyDownHandled = false;\n    this._keyDownSeen = true;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n      return false;\n    }\n\n    // Ignore composing with Alt key on Mac when macOptionIsMeta is enabled\n    const shouldIgnoreComposition = this.browser.isMac && this.options.macOptionIsMeta && event.altKey;\n\n    if (!shouldIgnoreComposition && !this._compositionHelper!.keydown(event)) {\n      if (this.buffer.ybase !== this.buffer.ydisp) {\n        this._bufferService.scrollToBottom();\n      }\n      return false;\n    }\n\n    if (!shouldIgnoreComposition && (event.key === 'Dead' || event.key === 'AltGraph')) {\n      this._unprocessedDeadKey = true;\n    }\n\n    const result = evaluateKeyboardEvent(event, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);\n\n    this.updateCursorStyle(event);\n\n    if (result.type === KeyboardResultType.PAGE_DOWN || result.type === KeyboardResultType.PAGE_UP) {\n      const scrollCount = this.rows - 1;\n      this.scrollLines(result.type === KeyboardResultType.PAGE_UP ? -scrollCount : scrollCount);\n      return this.cancel(event, true);\n    }\n\n    if (result.type === KeyboardResultType.SELECT_ALL) {\n      this.selectAll();\n    }\n\n    if (this._isThirdLevelShift(this.browser, event)) {\n      return true;\n    }\n\n    if (result.cancel) {\n      // The event is canceled at the end already, is this necessary?\n      this.cancel(event, true);\n    }\n\n    if (!result.key) {\n      return true;\n    }\n\n    // HACK: Process A-Z in the keypress event to fix an issue with macOS IMEs where lower case\n    // letters cannot be input while caps lock is on.\n    if (event.key && !event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\n      if (event.key.charCodeAt(0) >= 65 && event.key.charCodeAt(0) <= 90) {\n        return true;\n      }\n    }\n\n    if (this._unprocessedDeadKey) {\n      this._unprocessedDeadKey = false;\n      return true;\n    }\n\n    // If ctrl+c or enter is being sent, clear out the textarea. This is done so that screen readers\n    // will announce deleted characters. This will not work 100% of the time but it should cover\n    // most scenarios.\n    if (result.key === C0.ETX || result.key === C0.CR) {\n      this.textarea!.value = '';\n    }\n\n    this._onKey.fire({ key: result.key, domEvent: event });\n    this._showCursor();\n    this.coreService.triggerDataEvent(result.key, true);\n\n    // Cancel events when not in screen reader mode so events don't get bubbled up and handled by\n    // other listeners. When screen reader mode is enabled, this could cause issues if the event\n    // is handled at a higher level, this is a compromise in order to echo keys to the screen\n    // reader.\n    if (!this.optionsService.rawOptions.screenReaderMode) {\n      return this.cancel(event, true);\n    }\n\n    this._keyDownHandled = true;\n  }\n\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\n    const thirdLevelKey =\n      (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.altKey && ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.getModifierState('AltGraph'));\n\n    if (ev.type === 'keypress') {\n      return thirdLevelKey;\n    }\n\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n  }\n\n  protected _keyUp(ev: KeyboardEvent): void {\n    this._keyDownSeen = false;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return;\n    }\n\n    if (!wasModifierKeyOnlyEvent(ev)) {\n      this.focus();\n    }\n\n    this.updateCursorStyle(ev);\n    this._keyPressHandled = false;\n  }\n\n  /**\n   * Handle a keypress event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keypress event to be handled.\n   */\n  protected _keyPress(ev: KeyboardEvent): boolean {\n    let key;\n\n    this._keyPressHandled = false;\n\n    if (this._keyDownHandled) {\n      return false;\n    }\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return false;\n    }\n\n    this.cancel(ev);\n\n    if (ev.charCode) {\n      key = ev.charCode;\n    } else if (ev.which === null || ev.which === undefined) {\n      key = ev.keyCode;\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\n      key = ev.which;\n    } else {\n      return false;\n    }\n\n    if (!key || (\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\n    )) {\n      return false;\n    }\n\n    key = String.fromCharCode(key);\n\n    this._onKey.fire({ key, domEvent: ev });\n    this._showCursor();\n    this.coreService.triggerDataEvent(key, true);\n\n    this._keyPressHandled = true;\n\n    // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n    // keys could be ignored\n    this._unprocessedDeadKey = false;\n\n    return true;\n  }\n\n  /**\n   * Handle an input event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\n   * @param ev The input event to be handled.\n   */\n  protected _inputEvent(ev: InputEvent): boolean {\n    // Only support emoji IMEs when screen reader mode is disabled as the event must bubble up to\n    // support reading out character input which can doubling up input characters\n    // Based on these event traces: https://github.com/xtermjs/xterm.js/issues/3679\n    if (ev.data && ev.inputType === 'insertText' && (!ev.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {\n      if (this._keyPressHandled) {\n        return false;\n      }\n\n      // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n      // keys could be ignored\n      this._unprocessedDeadKey = false;\n\n      const text = ev.data;\n      this.coreService.triggerDataEvent(text, true);\n\n      this.cancel(ev);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Ring the bell.\n   * Note: We could do sweet things with webaudio here\n   */\n  public bell(): void {\n    if (this._soundBell()) {\n      this._soundService?.playBellSound();\n    }\n\n    this._onBell.fire();\n\n    // if (this._visualBell()) {\n    //   this.element.classList.add('visual-bell-active');\n    //   clearTimeout(this._visualBellTimer);\n    //   this._visualBellTimer = window.setTimeout(() => {\n    //     this.element.classList.remove('visual-bell-active');\n    //   }, 200);\n    // }\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      // Check if we still need to measure the char size (fixes #785).\n      if (this._charSizeService && !this._charSizeService.hasValidSize) {\n        this._charSizeService.measure();\n      }\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  private _afterResize(x: number, y: number): void {\n    this._charSizeService?.measure();\n\n    // Sync the scroll area to make sure scroll events don't fire and scroll the viewport to an\n    // invalid location\n    this.viewport?.syncScrollArea(true);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.clearAllMarkers();\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this.refresh(0, this.rows - 1);\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n    const customKeyEventHandler = this._customKeyEventHandler;\n\n    this._setup();\n    super.reset();\n    this._selectionService?.reset();\n    this._decorationService.reset();\n\n    // reattach\n    this._customKeyEventHandler = customKeyEventHandler;\n\n    // do a full screen refresh\n    this.refresh(0, this.rows - 1);\n    this.viewport?.syncScrollArea();\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderService?.clearTextureAtlas();\n  }\n\n  private _reportFocus(): void {\n    if (this.element?.classList.contains('focus')) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    } else {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n  }\n\n  private _reportWindowsOptions(type: WindowsOptionsReportType): void {\n    if (!this._renderService) {\n      return;\n    }\n\n    switch (type) {\n      case WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:\n        const canvasWidth = this._renderService.dimensions.scaledCanvasWidth.toFixed(0);\n        const canvasHeight = this._renderService.dimensions.scaledCanvasHeight.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[4;${canvasHeight};${canvasWidth}t`);\n        break;\n      case WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:\n        const cellWidth = this._renderService.dimensions.scaledCellWidth.toFixed(0);\n        const cellHeight = this._renderService.dimensions.scaledCellHeight.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[6;${cellHeight};${cellWidth}t`);\n        break;\n    }\n  }\n\n  // TODO: Remove cancel function and cancelEvents option\n  public cancel(ev: Event, force?: boolean): boolean | undefined {\n    if (!this.options.cancelEvents && !force) {\n      return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n  }\n\n  private _visualBell(): boolean {\n    return false;\n    // return this.options.bellStyle === 'visual' ||\n    //     this.options.bellStyle === 'both';\n  }\n\n  private _soundBell(): boolean {\n    return this.options.bellStyle === 'sound';\n    // return this.options.bellStyle === 'sound' ||\n    //     this.options.bellStyle === 'both';\n  }\n}\n\n/**\n * Helpers\n */\n\nfunction wasModifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nconst RENDER_DEBOUNCE_THRESHOLD_MS = 1000; // 1 Second\n\nimport { IRenderDebouncer } from 'browser/Types';\n\n/**\n * Debounces calls to update screen readers to update at most once configurable interval of time.\n */\nexport class TimeBasedDebouncer implements IRenderDebouncer {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n\n  // The last moment that the Terminal was refreshed at\n  private _lastRefreshMs = 0;\n  // Whether a trailing refresh should be triggered due to a refresh request that was throttled\n  private _additionalRefreshRequested = false;\n\n  private _refreshTimeoutID: number | undefined;\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void,\n    private readonly _debounceThresholdMS = RENDER_DEBOUNCE_THRESHOLD_MS\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._refreshTimeoutID) {\n      clearTimeout(this._refreshTimeoutID);\n    }\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    // Only refresh if the time since last refresh is above a threshold, otherwise wait for\n    // enough time to pass before refreshing again.\n    const refreshRequestTime: number = Date.now();\n    if (refreshRequestTime - this._lastRefreshMs >= this._debounceThresholdMS) {\n      // Enough time has lapsed since the last refresh; refresh immediately\n      this._lastRefreshMs = refreshRequestTime;\n      this._innerRefresh();\n    } else if (!this._additionalRefreshRequested) {\n      // This is the first additional request throttled; set up trailing refresh\n      const elapsed = refreshRequestTime - this._lastRefreshMs;\n      const waitPeriodBeforeTrailingRefresh = this._debounceThresholdMS - elapsed;\n      this._additionalRefreshRequested = true;\n\n      this._refreshTimeoutID = window.setTimeout(() => {\n        this._lastRefreshMs = Date.now();\n        this._innerRefresh();\n        this._additionalRefreshRequested = false;\n        this._refreshTimeoutID = undefined; // No longer need to clear the timeout\n      }, waitPeriodBeforeTrailingRefresh);\n    }\n  }\n\n  private _innerRefresh(): void {\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n  }\n}\n\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IViewport } from 'browser/Types';\nimport { ICharSizeService, IRenderService } from 'browser/services/Services';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport extends Disposable implements IViewport {\n  public scrollBarWidth: number = 0;\n  private _currentRowHeight: number = 0;\n  private _currentScaledCellHeight: number = 0;\n  private _lastRecordedBufferLength: number = 0;\n  private _lastRecordedViewportHeight: number = 0;\n  private _lastRecordedBufferHeight: number = 0;\n  private _lastTouchY: number = 0;\n  private _lastScrollTop: number = 0;\n  private _activeBuffer: IBuffer;\n  private _renderDimensions: IRenderDimensions;\n\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\n  // is scrolled so we can \"scroll\" over partial lines and feel natural on touchpads. This is a\n  // quick fix and could have a more robust solution in place that reset the value when needed.\n  private _wheelPartialScroll: number = 0;\n\n  private _refreshAnimationFrame: number | null = null;\n  private _ignoreNextScrollEvent: boolean = false;\n\n  constructor(\n    private readonly _scrollLines: (amount: number) => void,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _scrollArea: HTMLElement,\n    private readonly _element: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that case,\n    // therefore we account for a standard amount to make it visible\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', this._onScroll.bind(this)));\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n    this._renderDimensions = this._renderService.dimensions;\n    this.register(this._renderService.onDimensionsChange(e => this._renderDimensions = e));\n\n    // Perform this async to ensure the ICharSizeService is ready.\n    setTimeout(() => this.syncScrollArea(), 0);\n  }\n\n  public onThemeChange(colors: IColorSet): void {\n    this._viewportElement.style.backgroundColor = colors.background.css;\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   */\n  private _refresh(immediate: boolean): void {\n    if (immediate) {\n      this._innerRefresh();\n      if (this._refreshAnimationFrame !== null) {\n        cancelAnimationFrame(this._refreshAnimationFrame);\n      }\n      return;\n    }\n    if (this._refreshAnimationFrame === null) {\n      this._refreshAnimationFrame = requestAnimationFrame(() => this._innerRefresh());\n    }\n  }\n\n  private _innerRefresh(): void {\n    if (this._charSizeService.height > 0) {\n      this._currentRowHeight = this._renderService.dimensions.scaledCellHeight / window.devicePixelRatio;\n      this._currentScaledCellHeight = this._renderService.dimensions.scaledCellHeight;\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.canvasHeight);\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\n        this._lastRecordedBufferHeight = newBufferHeight;\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this._bufferService.buffer.ydisp * this._currentRowHeight;\n    if (this._viewportElement.scrollTop !== scrollTop) {\n      // Ignore the next scroll event which will be triggered by setting the scrollTop as we do not\n      // want this event to scroll the terminal\n      this._ignoreNextScrollEvent = true;\n      this._viewportElement.scrollTop = scrollTop;\n    }\n\n    this._refreshAnimationFrame = null;\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(immediate: boolean = false): void {\n    // If buffer height changed\n    if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) {\n      this._lastRecordedBufferLength = this._bufferService.buffer.lines.length;\n      this._refresh(immediate);\n      return;\n    }\n\n    // If viewport height changed\n    if (this._lastRecordedViewportHeight !== this._renderService.dimensions.canvasHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If the buffer position doesn't match last scroll top\n    if (this._lastScrollTop !== this._activeBuffer.ydisp * this._currentRowHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If row height changed\n    if (this._renderDimensions.scaledCellHeight !== this._currentScaledCellHeight) {\n      this._refresh(immediate);\n      return;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private _onScroll(ev: Event): void {\n    // Record current scroll top position\n    this._lastScrollTop = this._viewportElement.scrollTop;\n\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\n    // which causes the terminal to scroll the buffer to the top\n    if (!this._viewportElement.offsetParent) {\n      return;\n    }\n\n    // Ignore the event if it was flagged to ignore (when the source of the event is from Viewport)\n    if (this._ignoreNextScrollEvent) {\n      this._ignoreNextScrollEvent = false;\n      // Still trigger the scroll so lines get refreshed\n      this._scrollLines(0);\n      return;\n    }\n\n    const newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n    const diff = newRow - this._bufferService.buffer.ydisp;\n    this._scrollLines(diff);\n  }\n\n  /**\n   * Handles bubbling of scroll event in case the viewport has reached top or bottom\n   * @param ev The scroll event.\n   * @param amount The amount scrolled\n   */\n  private _bubbleScroll(ev: Event, amount: number): boolean {\n    const scrollPosFromTop = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;\n    if ((amount < 0 && this._viewportElement.scrollTop !== 0) ||\n      (amount > 0 && scrollPosFromTop < this._lastRecordedBufferHeight)) {\n      if (ev.cancelable) {\n        ev.preventDefault();\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public onWheel(ev: WheelEvent): boolean {\n    const amount = this._getPixelsScrolled(ev);\n    if (amount === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += amount;\n    return this._bubbleScroll(ev, amount);\n  }\n\n  private _getPixelsScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      amount *= this._currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._currentRowHeight * this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  /**\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\n   * is being used.\n   * @param ev The mouse wheel event.\n   */\n  public getLinesScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_LINE\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\n      this._wheelPartialScroll += amount;\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n      this._wheelPartialScroll %= 1;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  private _applyScrollModifier(amount: number, ev: WheelEvent): number {\n    const modifier = this._optionsService.rawOptions.fastScrollModifier;\n    // Multiply the scroll speed when the modifier is down\n    if ((modifier === 'alt' && ev.altKey) ||\n      (modifier === 'ctrl' && ev.ctrlKey) ||\n      (modifier === 'shift' && ev.shiftKey)) {\n      return amount * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity;\n    }\n\n    return amount * this._optionsService.rawOptions.scrollSensitivity;\n  }\n\n  /**\n   * Handles the touchstart event, recording the touch occurred.\n   * @param ev The touch event.\n   */\n  public onTouchStart(ev: TouchEvent): void {\n    this._lastTouchY = ev.touches[0].pageY;\n  }\n\n  /**\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\n   * @param ev The touch event.\n   */\n  public onTouchMove(ev: TouchEvent): boolean {\n    const deltaY = this._lastTouchY - ev.touches[0].pageY;\n    this._lastTouchY = ev.touches[0].pageY;\n    if (deltaY === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += deltaY;\n    return this._bubbleScroll(ev, deltaY);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IRenderService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IInternalDecoration } from 'common/services/Services';\n\nexport class BufferDecorationRenderer extends Disposable {\n  private readonly _container: HTMLElement;\n  private readonly _decorationElements: Map<IInternalDecoration, HTMLElement> = new Map();\n\n  private _animationFrame: number | undefined;\n  private _altBufferIsActive: boolean = false;\n  private _dimensionsChanged: boolean = false;\n\n  constructor(\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    this._container = document.createElement('div');\n    this._container.classList.add('xterm-decoration-container');\n    this._screenElement.appendChild(this._container);\n\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._renderService.onDimensionsChange(() => {\n      this._dimensionsChanged = true;\n      this._queueRefresh();\n    }));\n    this.register(addDisposableDomListener(window, 'resize', () => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;\n    }));\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh()));\n    this.register(this._decorationService.onDecorationRemoved(decoration => this._removeDecoration(decoration)));\n  }\n\n  public override dispose(): void {\n    this._container.remove();\n    this._decorationElements.clear();\n    super.dispose();\n  }\n\n  private _queueRefresh(): void {\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._renderService.addRefreshCallback(() => {\n      this.refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n\n  public refreshDecorations(): void {\n    for (const decoration of this._decorationService.decorations) {\n      this._renderDecoration(decoration);\n    }\n    this._dimensionsChanged = false;\n  }\n\n  private _renderDecoration(decoration: IInternalDecoration): void {\n    this._refreshStyle(decoration);\n    if (this._dimensionsChanged) {\n      this._refreshXPosition(decoration);\n    }\n  }\n\n  private _createElement(decoration: IInternalDecoration): HTMLElement {\n    const element = document.createElement('div');\n    element.classList.add('xterm-decoration');\n    element.style.width = `${Math.round((decoration.options.width || 1) * this._renderService.dimensions.actualCellWidth)}px`;\n    element.style.height = `${(decoration.options.height || 1) * this._renderService.dimensions.actualCellHeight}px`;\n    element.style.top = `${(decoration.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.actualCellHeight}px`;\n    element.style.lineHeight = `${this._renderService.dimensions.actualCellHeight}px`;\n\n    const x = decoration.options.x ?? 0;\n    if (x && x > this._bufferService.cols) {\n      // exceeded the container width, so hide\n      element.style.display = 'none';\n    }\n    this._refreshXPosition(decoration, element);\n\n    return element;\n  }\n\n  private _refreshStyle(decoration: IInternalDecoration): void {\n    const line = decoration.marker.line - this._bufferService.buffers.active.ydisp;\n    if (line < 0 || line >= this._bufferService.rows) {\n      // outside of viewport\n      if (decoration.element) {\n        decoration.element.style.display = 'none';\n        decoration.onRenderEmitter.fire(decoration.element);\n      }\n    } else {\n      let element = this._decorationElements.get(decoration);\n      if (!element) {\n        decoration.onDispose(() => this._removeDecoration(decoration));\n        element = this._createElement(decoration);\n        decoration.element = element;\n        this._decorationElements.set(decoration, element);\n        this._container.appendChild(element);\n      }\n      element.style.top = `${line * this._renderService.dimensions.actualCellHeight}px`;\n      element.style.display = this._altBufferIsActive ? 'none' : 'block';\n      decoration.onRenderEmitter.fire(element);\n    }\n  }\n\n  private _refreshXPosition(decoration: IInternalDecoration, element: HTMLElement | undefined = decoration.element): void {\n    if (!element) {\n      return;\n    }\n    const x = decoration.options.x ?? 0;\n    if ((decoration.options.anchor || 'left') === 'right') {\n      element.style.right = x ? `${x * this._renderService.dimensions.actualCellWidth}px` : '';\n    } else {\n      element.style.left = x ? `${x * this._renderService.dimensions.actualCellWidth}px` : '';\n    }\n  }\n\n  private _removeDecoration(decoration: IInternalDecoration): void {\n    this._decorationElements.get(decoration)?.remove();\n    this._decorationElements.delete(decoration);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInternalDecoration } from 'common/services/Services';\n\nexport interface IColorZoneStore {\n  readonly zones: IColorZone[];\n  clear(): void;\n  addDecoration(decoration: IInternalDecoration): void;\n  /**\n   * Sets the amount of padding in lines that will be added between zones, if new lines intersect\n   * the padding they will be merged into the same zone.\n   */\n  setPadding(padding: { [position: string]: number }): void;\n}\n\nexport interface IColorZone {\n  /** Color in a format supported by canvas' fillStyle. */\n  color: string;\n  position: 'full' | 'left' | 'center' | 'right' | undefined;\n  startBufferLine: number;\n  endBufferLine: number;\n}\n\ninterface IMinimalDecorationForColorZone {\n  marker: Pick<IInternalDecoration['marker'], 'line'>;\n  options: Pick<IInternalDecoration['options'], 'overviewRulerOptions'>;\n}\n\nexport class ColorZoneStore implements IColorZoneStore {\n  private _zones: IColorZone[] = [];\n\n  // The zone pool is used to keep zone objects from being freed between clearing the color zone\n  // store and fetching the zones. This helps reduce GC pressure since the color zones are\n  // accumulated on potentially every scroll event.\n  private _zonePool: IColorZone[] = [];\n  private _zonePoolIndex = 0;\n\n  private _linePadding: { [position: string]: number } = {\n    full: 0,\n    left: 0,\n    center: 0,\n    right: 0\n  };\n\n  public get zones(): IColorZone[] {\n    // Trim the zone pool to free unused memory\n    this._zonePool.length = Math.min(this._zonePool.length, this._zones.length);\n    return this._zones;\n  }\n\n  public clear(): void {\n    this._zones.length = 0;\n    this._zonePoolIndex = 0;\n  }\n\n  public addDecoration(decoration: IMinimalDecorationForColorZone): void {\n    if (!decoration.options.overviewRulerOptions) {\n      return;\n    }\n    for (const z of this._zones) {\n      if (z.color === decoration.options.overviewRulerOptions.color &&\n          z.position === decoration.options.overviewRulerOptions.position) {\n        if (this._lineIntersectsZone(z, decoration.marker.line)) {\n          return;\n        }\n        if (this._lineAdjacentToZone(z, decoration.marker.line, decoration.options.overviewRulerOptions.position)) {\n          this._addLineToZone(z, decoration.marker.line);\n          return;\n        }\n      }\n    }\n    // Create using zone pool if possible\n    if (this._zonePoolIndex < this._zonePool.length) {\n      this._zonePool[this._zonePoolIndex].color = decoration.options.overviewRulerOptions.color;\n      this._zonePool[this._zonePoolIndex].position = decoration.options.overviewRulerOptions.position;\n      this._zonePool[this._zonePoolIndex].startBufferLine = decoration.marker.line;\n      this._zonePool[this._zonePoolIndex].endBufferLine = decoration.marker.line;\n      this._zones.push(this._zonePool[this._zonePoolIndex++]);\n      return;\n    }\n    // Create\n    this._zones.push({\n      color: decoration.options.overviewRulerOptions.color,\n      position: decoration.options.overviewRulerOptions.position,\n      startBufferLine: decoration.marker.line,\n      endBufferLine: decoration.marker.line\n    });\n    this._zonePool.push(this._zones[this._zones.length - 1]);\n    this._zonePoolIndex++;\n  }\n\n  public setPadding(padding: { [position: string]: number }): void {\n    this._linePadding = padding;\n  }\n\n  private _lineIntersectsZone(zone: IColorZone, line: number): boolean {\n    return (\n      line >= zone.startBufferLine &&\n      line <= zone.endBufferLine\n    );\n  }\n\n  private _lineAdjacentToZone(zone: IColorZone, line: number, position: IColorZone['position']): boolean {\n    return (\n      (line >= zone.startBufferLine - this._linePadding[position || 'full']) &&\n      (line <= zone.endBufferLine + this._linePadding[position || 'full'])\n    );\n  }\n\n  private _addLineToZone(zone: IColorZone, line: number): void {\n    zone.startBufferLine = Math.min(zone.startBufferLine, line);\n    zone.endBufferLine = Math.max(zone.endBufferLine, line);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorZoneStore, IColorZone, IColorZoneStore } from 'browser/decorations/ColorZoneStore';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IRenderService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IInternalDecoration, IOptionsService } from 'common/services/Services';\n\n// Helper objects to avoid excessive calculation and garbage collection during rendering. These are\n// static values for each render and can be accessed using the decoration position as the key.\nconst drawHeight = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawWidth = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawX = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\n\nexport class OverviewRulerRenderer extends Disposable {\n  private readonly _canvas: HTMLCanvasElement;\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _colorZoneStore: IColorZoneStore = new ColorZoneStore();\n  private get _width(): number {\n    return this._optionsService.options.overviewRulerWidth || 0;\n  }\n  private _animationFrame: number | undefined;\n\n  private _shouldUpdateDimensions: boolean | undefined = true;\n  private _shouldUpdateAnchor: boolean | undefined = true;\n  private _lastKnownBufferLength: number = 0;\n\n  private _containerHeight: number | undefined;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add('xterm-decoration-overview-ruler');\n    this._refreshCanvasDimensions();\n    this._viewportElement.parentElement?.insertBefore(this._canvas, this._viewportElement);\n    const ctx = this._canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Ctx cannot be null');\n    } else {\n      this._ctx = ctx;\n    }\n    this._registerDecorationListeners();\n    this._registerBufferChangeListeners();\n    this._registerDimensionChangeListeners();\n  }\n\n  /**\n   * On decoration add or remove, redraw\n   */\n  private _registerDecorationListeners(): void {\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh(undefined, true)));\n    this.register(this._decorationService.onDecorationRemoved(() => this._queueRefresh(undefined, true)));\n  }\n\n  /**\n   * On buffer change, redraw\n   * and hide the canvas if the alt buffer is active\n   */\n  private _registerBufferChangeListeners(): void {\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._canvas!.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? 'none' : 'block';\n    }));\n    this.register(this._bufferService.onScroll(() => {\n      if (this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length) {\n        this._refreshDrawHeightConstants();\n        this._refreshColorZonePadding();\n      }\n    }));\n  }\n  /**\n   * On dimension change, update canvas dimensions\n   * and then redraw\n   */\n  private _registerDimensionChangeListeners(): void {\n    // container height changed\n    this.register(this._renderService.onRender((): void => {\n      if (!this._containerHeight || this._containerHeight !== this._screenElement.clientHeight) {\n        this._queueRefresh(true);\n        this._containerHeight = this._screenElement.clientHeight;\n      }\n    }));\n    // overview ruler width changed\n    this.register(this._optionsService.onOptionChange(o => {\n      if (o === 'overviewRulerWidth') {\n        this._queueRefresh(true);\n      }\n    }));\n    // device pixel ratio changed\n    this.register(addDisposableDomListener(window, 'resize', () => {\n      this._queueRefresh(true);\n    }));\n    // set the canvas dimensions\n    this._queueRefresh(true);\n  }\n\n  public override dispose(): void {\n    this._canvas?.remove();\n    super.dispose();\n  }\n\n  private _refreshDrawConstants(): void {\n    // width\n    const outerWidth = Math.floor(this._canvas.width / 3);\n    const innerWidth = Math.ceil(this._canvas.width / 3);\n    drawWidth.full = this._canvas.width;\n    drawWidth.left = outerWidth;\n    drawWidth.center = innerWidth;\n    drawWidth.right = outerWidth;\n    // height\n    this._refreshDrawHeightConstants();\n    // x\n    drawX.full = 0;\n    drawX.left = 0;\n    drawX.center = drawWidth.left;\n    drawX.right = drawWidth.left + drawWidth.center;\n  }\n\n  private _refreshDrawHeightConstants(): void {\n    drawHeight.full = Math.round(2 * window.devicePixelRatio);\n    // Calculate actual pixels per line\n    const pixelsPerLine = this._canvas.height / this._bufferService.buffer.lines.length;\n    // Clamp actual pixels within a range\n    const nonFullHeight = Math.round(Math.max(Math.min(pixelsPerLine, 12), 6) * window.devicePixelRatio);\n    drawHeight.left = nonFullHeight;\n    drawHeight.center = nonFullHeight;\n    drawHeight.right = nonFullHeight;\n  }\n\n  private _refreshColorZonePadding(): void {\n    this._colorZoneStore.setPadding({\n      full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.full),\n      left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.left),\n      center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.center),\n      right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.right)\n    });\n    this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;\n  }\n\n  private _refreshCanvasDimensions(): void {\n    this._canvas.style.width = `${this._width}px`;\n    this._canvas.width = Math.round(this._width * window.devicePixelRatio);\n    this._canvas.style.height = `${this._screenElement.clientHeight}px`;\n    this._canvas.height = Math.round(this._screenElement.clientHeight * window.devicePixelRatio);\n    this._refreshDrawConstants();\n    this._refreshColorZonePadding();\n  }\n\n  private _refreshDecorations(): void {\n    if (this._shouldUpdateDimensions) {\n      this._refreshCanvasDimensions();\n    }\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    this._colorZoneStore.clear();\n    for (const decoration of this._decorationService.decorations) {\n      this._colorZoneStore.addDecoration(decoration);\n    }\n    this._ctx.lineWidth = 1;\n    const zones = this._colorZoneStore.zones;\n    for (const zone of zones) {\n      if (zone.position !== 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    for (const zone of zones) {\n      if (zone.position === 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    this._shouldUpdateDimensions = false;\n    this._shouldUpdateAnchor = false;\n  }\n\n  private _renderColorZone(zone: IColorZone): void {\n    // TODO: Is _decorationElements needed?\n\n    this._ctx.fillStyle = zone.color;\n    this._ctx.fillRect(\n      /* x */ drawX[zone.position || 'full'],\n      /* y */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        (zone.startBufferLine / this._bufferService.buffers.active.lines.length) - drawHeight[zone.position || 'full'] / 2\n      ),\n      /* w */ drawWidth[zone.position || 'full'],\n      /* h */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        ((zone.endBufferLine - zone.startBufferLine) / this._bufferService.buffers.active.lines.length) + drawHeight[zone.position || 'full']\n      )\n    );\n  }\n\n  private _queueRefresh(updateCanvasDimensions?: boolean, updateAnchor?: boolean): void {\n    this._shouldUpdateDimensions = updateCanvasDimensions || this._shouldUpdateDimensions;\n    this._shouldUpdateAnchor = updateAnchor || this._shouldUpdateAnchor;\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = window.requestAnimationFrame(() => {\n      this._refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderService } from 'browser/services/Services';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private _isComposing: boolean;\n  public get isComposing(): boolean { return this._isComposing; }\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private _compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private _isSendingComposition: boolean;\n\n  /**\n   * Data already sent due to keydown event.\n   */\n  private _dataAlreadySent: string;\n\n  constructor(\n    private readonly _textarea: HTMLTextAreaElement,\n    private readonly _compositionView: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    this._isComposing = false;\n    this._isSendingComposition = false;\n    this._compositionPosition = { start: 0, end: 0 };\n    this._dataAlreadySent = '';\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart(): void {\n    this._isComposing = true;\n    this._compositionPosition.start = this._textarea.value.length;\n    this._compositionView.textContent = '';\n    this._dataAlreadySent = '';\n    this._compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param ev The event.\n   */\n  public compositionupdate(ev: Pick<CompositionEvent, 'data'>): void {\n    this._compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this._compositionPosition.end = this._textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend(): void {\n    this._finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @return Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent): boolean {\n    if (this._isComposing || this._isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      }\n      if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      }\n      // Finish composition immediately. This is mainly here for the case where enter is\n      // pressed and the handler needs to be triggered before the command is executed.\n      this._finalizeComposition(false);\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this._handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropagation Whether to wait for events to propagate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is sent before\n   *   the command is executed.\n   */\n  private _finalizeComposition(waitForPropagation: boolean): void {\n    this._compositionView.classList.remove('active');\n    this._isComposing = false;\n\n    if (!waitForPropagation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this._isSendingComposition = false;\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n      this._coreService.triggerDataEvent(input, true);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this._compositionPosition.start,\n        end: this._compositionPosition.end\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved.\n      // This solution was used because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this._isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this._isSendingComposition) {\n          this._isSendingComposition = false;\n          let input;\n          // Add length of data already sent due to keydown event,\n          // otherwise input characters can be duplicated. (Issue #3191)\n          currentCompositionPosition.start += this._dataAlreadySent.length;\n          if (this._isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this._textarea.value.substring(currentCompositionPosition.start);\n          }\n          if (input.length > 0) {\n            this._coreService.triggerDataEvent(input, true);\n          }\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private _handleAnyTextareaChanges(): void {\n    const oldValue = this._textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this._isComposing) {\n        const newValue = this._textarea.value;\n        const diff = newValue.replace(oldValue, '');\n        if (diff.length > 0) {\n          this._dataAlreadySent = diff;\n          this._coreService.triggerDataEvent(diff, true);\n        }\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean): void {\n    if (!this._isComposing) {\n      return;\n    }\n\n    if (this._bufferService.buffer.isCursorInViewport) {\n      const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n\n      const cellHeight = this._renderService.dimensions.actualCellHeight;\n      const cursorTop = this._bufferService.buffer.y * this._renderService.dimensions.actualCellHeight;\n      const cursorLeft = cursorX * this._renderService.dimensions.actualCellWidth;\n\n      this._compositionView.style.left = cursorLeft + 'px';\n      this._compositionView.style.top = cursorTop + 'px';\n      this._compositionView.style.height = cellHeight + 'px';\n      this._compositionView.style.lineHeight = cellHeight + 'px';\n      this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n      this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\n      this._textarea.style.left = cursorLeft + 'px';\n      this._textarea.style.top = cursorTop + 'px';\n      // Ensure the text area is at least 1x1, otherwise certain IMEs may break\n      this._textarea.style.width = Math.max(compositionViewBounds.width, 1) + 'px';\n      this._textarea.style.height = Math.max(compositionViewBounds.height, 1) + 'px';\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function getCoordsRelativeToElement(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement): [number, number] {\n  const rect = element.getBoundingClientRect();\n  const elementStyle = window.getComputedStyle(element);\n  const leftPadding = parseInt(elementStyle.getPropertyValue('padding-left'));\n  const topPadding = parseInt(elementStyle.getPropertyValue('padding-top'));\n  return [\n    event.clientX - rect.left - leftPadding,\n    event.clientY - rect.top - topPadding\n  ];\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event. The result\n * is returned as an array in the form [x, y] instead of an object as it's a\n * little faster and this function is used in some low level code.\n * @param event The mouse event.\n * @param element The terminal's container element.\n * @param colCount The number of columns in the terminal.\n * @param rowCount The number of rows n the terminal.\n * @param isSelection Whether the request is for the selection or not. This will\n * apply an offset to the x value such that the left half of the cell will\n * select that cell and the right half will select the next cell.\n */\nexport function getCoords(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, hasValidCharSize: boolean, actualCellWidth: number, actualCellHeight: number, isSelection?: boolean): [number, number] | undefined {\n  // Coordinates cannot be measured if there are no valid\n  if (!hasValidCharSize) {\n    return undefined;\n  }\n\n  const coords = getCoordsRelativeToElement(window, event, element);\n  if (!coords) {\n    return undefined;\n  }\n\n  coords[0] = Math.ceil((coords[0] + (isSelection ? actualCellWidth / 2 : 0)) / actualCellWidth);\n  coords[1] = Math.ceil(coords[1] / actualCellHeight);\n\n  // Ensure coordinates are within the terminal viewport. Note that selections\n  // need an addition point of precision to cover the end point (as characters\n  // cover half of one char and half of the next).\n  coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n  coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n\n  return coords;\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event, wrapping\n * them to the bounds of the terminal and adding 32 to both the x and y values\n * as expected by xterm.\n */\nexport function getRawByteCoords(coords: [number, number] | undefined): { x: number, y: number } | undefined {\n  if (!coords) {\n    return undefined;\n  }\n\n  // xterm sends raw bytes and starts at 32 (SP) for each.\n  return { x: coords[0] + 32, y: coords[1] + 32 };\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { C0 } from 'common/data/EscapeSequences';\nimport { IBufferService } from 'common/services/Services';\n\nconst enum Direction {\n  UP = 'A',\n  DOWN = 'B',\n  RIGHT = 'C',\n  LEFT = 'D'\n}\n\n/**\n * Concatenates all the arrow sequences together.\n * Resets the starting row to an unwrapped row, moves to the requested row,\n * then moves to requested col.\n */\nexport function moveToCellSequence(targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startX = bufferService.buffer.x;\n  const startY = bufferService.buffer.y;\n\n  // The alt buffer should try to navigate between rows\n  if (!bufferService.buffer.hasScrollback) {\n    return resetStartingRow(startX, startY, targetX, targetY, bufferService, applicationCursor) +\n      moveToRequestedRow(startY, targetY, bufferService, applicationCursor) +\n      moveToRequestedCol(startX, startY, targetX, targetY, bufferService, applicationCursor);\n  }\n\n  // Only move horizontally for the normal buffer\n  let direction;\n  if (startY === targetY) {\n    direction = startX > targetX ? Direction.LEFT : Direction.RIGHT;\n    return repeat(Math.abs(startX - targetX), sequence(direction, applicationCursor));\n  }\n  direction = startY > targetY ? Direction.LEFT : Direction.RIGHT;\n  const rowDifference = Math.abs(startY - targetY);\n  const cellsToMove = colsFromRowEnd(startY > targetY ? targetX : startX, bufferService) +\n    (rowDifference - 1) * bufferService.cols + 1 /* wrap around 1 row */ +\n    colsFromRowBeginning(startY > targetY ? startX : targetX, bufferService);\n  return repeat(cellsToMove, sequence(direction, applicationCursor));\n}\n\n/**\n * Find the number of cols from a row beginning to a col.\n */\nfunction colsFromRowBeginning(currX: number, bufferService: IBufferService): number {\n  return currX - 1;\n}\n\n/**\n * Find the number of cols from a col to row end.\n */\nfunction colsFromRowEnd(currX: number, bufferService: IBufferService): number {\n  return bufferService.cols - currX;\n}\n\n/**\n * If the initial position of the cursor is on a row that is wrapped, move the\n * cursor up to the first row that is not wrapped to have accurate vertical\n * positioning.\n */\nfunction resetStartingRow(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length === 0) {\n    return '';\n  }\n  return repeat(bufferLine(\n    startX, startY, startX,\n    startY - wrappedRowsForRow(bufferService, startY), false, bufferService\n  ).length, sequence(Direction.LEFT, applicationCursor));\n}\n\n/**\n * Using the reset starting and ending row, move to the requested row,\n * ignoring wrapped rows\n */\nfunction moveToRequestedRow(startY: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startRow = startY - wrappedRowsForRow(bufferService, startY);\n  const endRow = targetY - wrappedRowsForRow(bufferService, targetY);\n\n  const rowsToMove = Math.abs(startRow - endRow) - wrappedRowsCount(startY, targetY, bufferService);\n\n  return repeat(rowsToMove, sequence(verticalDirection(startY, targetY), applicationCursor));\n}\n\n/**\n * Move to the requested col on the ending row\n */\nfunction moveToRequestedCol(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  let startRow;\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(bufferService, targetY);\n  } else {\n    startRow = startY;\n  }\n\n  const endRow = targetY;\n  const direction = horizontalDirection(startX, startY, targetX, targetY, bufferService, applicationCursor);\n\n  return repeat(bufferLine(\n    startX, startRow, targetX, endRow,\n    direction === Direction.RIGHT, bufferService\n  ).length, sequence(direction, applicationCursor));\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Calculates the number of wrapped rows between the unwrapped starting and\n * ending rows. These rows need to ignored since the cursor skips over them.\n */\nfunction wrappedRowsCount(startY: number, targetY: number, bufferService: IBufferService): number {\n  let wrappedRows = 0;\n  const startRow = startY - wrappedRowsForRow(bufferService, startY);\n  const endRow = targetY - wrappedRowsForRow(bufferService, targetY);\n\n  for (let i = 0; i < Math.abs(startRow - endRow); i++) {\n    const direction = verticalDirection(startY, targetY) === Direction.UP ? -1 : 1;\n    const line = bufferService.buffer.lines.get(startRow + (direction * i));\n    if (line?.isWrapped) {\n      wrappedRows++;\n    }\n  }\n\n  return wrappedRows;\n}\n\n/**\n * Calculates the number of wrapped rows that make up a given row.\n * @param currentRow The row to determine how many wrapped rows make it up\n */\nfunction wrappedRowsForRow(bufferService: IBufferService, currentRow: number): number {\n  let rowCount = 0;\n  let line = bufferService.buffer.lines.get(currentRow);\n  let lineWraps = line?.isWrapped;\n\n  while (lineWraps && currentRow >= 0 && currentRow < bufferService.rows) {\n    rowCount++;\n    line = bufferService.buffer.lines.get(--currentRow);\n    lineWraps = line?.isWrapped;\n  }\n\n  return rowCount;\n}\n\n/**\n * Direction determiners\n */\n\n/**\n * Determines if the right or left arrow is needed\n */\nfunction horizontalDirection(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): Direction {\n  let startRow;\n  if (moveToRequestedRow(targetX, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(bufferService, targetY);\n  } else {\n    startRow = startY;\n  }\n\n  if ((startX < targetX &&\n    startRow <= targetY) || // down/right or same y/right\n    (startX >= targetX &&\n    startRow < targetY)) {  // down/left or same y/left\n    return Direction.RIGHT;\n  }\n  return Direction.LEFT;\n}\n\n/**\n * Determines if the up or down arrow is needed\n */\nfunction verticalDirection(startY: number, targetY: number): Direction {\n  return startY > targetY ? Direction.UP : Direction.DOWN;\n}\n\n/**\n * Constructs the string of chars in the buffer from a starting row and col\n * to an ending row and col\n * @param startCol The starting column position\n * @param startRow The starting row position\n * @param endCol The ending column position\n * @param endRow The ending row position\n * @param forward Direction to move\n */\nfunction bufferLine(\n  startCol: number,\n  startRow: number,\n  endCol: number,\n  endRow: number,\n  forward: boolean,\n  bufferService: IBufferService\n): string {\n  let currentCol = startCol;\n  let currentRow = startRow;\n  let bufferStr = '';\n\n  while (currentCol !== endCol || currentRow !== endRow) {\n    currentCol += forward ? 1 : -1;\n\n    if (forward && currentCol > bufferService.cols - 1) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, startCol, currentCol\n      );\n      currentCol = 0;\n      startCol = 0;\n      currentRow++;\n    } else if (!forward && currentCol < 0) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, 0, startCol + 1\n      );\n      currentCol = bufferService.cols - 1;\n      startCol = currentCol;\n      currentRow--;\n    }\n  }\n\n  return bufferStr + bufferService.buffer.translateBufferLineToString(\n    currentRow, false, startCol, currentCol\n  );\n}\n\n/**\n * Constructs the escape sequence for clicking an arrow\n * @param direction The direction to move\n */\nfunction sequence(direction: Direction, applicationCursor: boolean): string {\n  const mod =  applicationCursor ? 'O' : '[';\n  return C0.ESC + mod + direction;\n}\n\n/**\n * Returns a string repeated a given number of times\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n * @param count The number of times to repeat the string\n * @param string The string that is to be repeated\n */\nfunction repeat(count: number, str: string): string {\n  count = Math.floor(count);\n  let rpt = '';\n  for (let i = 0; i < count; i++) {\n    rpt += str;\n  }\n  return rpt;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal as ITerminalApi, IMarker, IDisposable, ILinkMatcherOptions, ITheme, ILocalizableStrings, ITerminalAddon, ISelectionPosition, IBufferNamespace as IBufferNamespaceApi, IParser, ILinkProvider, IUnicodeHandling, FontWeight, IModes, IDecorationOptions, IDecoration } from 'xterm';\nimport { ITerminal } from 'browser/Types';\nimport { Terminal as TerminalCore } from 'browser/Terminal';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { IEvent } from 'common/EventEmitter';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ITerminalOptions } from 'common/Types';\n\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal implements ITerminalApi {\n  private _core: ITerminal;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: ITerminalOptions;\n\n  constructor(options?: ITerminalOptions) {\n    this._core = new TerminalCore(options);\n    this._addonManager = new AddonManager();\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.rawOptions.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._core.onKey; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._core.onRender; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onSelectionChange(): IEvent<void> { return this._core.onSelectionChange; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n  public get onWriteParsed(): IEvent<void> { return this._core.onWriteParsed; }\n\n  public get element(): HTMLElement | undefined { return this._core.element; }\n  public get parser(): IParser {\n    this._checkProposedApi();\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get textarea(): HTMLTextAreaElement | undefined { return this._core.textarea; }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    this._checkProposedApi();\n    if (!this._buffer) {\n      this._buffer = new BufferNamespaceApi(this._core);\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): ITerminalOptions {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public blur(): void {\n    this._core.blur();\n  }\n  public focus(): void {\n    this._core.focus();\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public open(parent: HTMLElement): void {\n    this._core.open(parent);\n  }\n  public attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void {\n    this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n  }\n  public registerLinkMatcher(regex: RegExp, handler: (event: MouseEvent, uri: string) => void, options?: ILinkMatcherOptions): number {\n    this._checkProposedApi();\n    return this._core.registerLinkMatcher(regex, handler, options);\n  }\n  public deregisterLinkMatcher(matcherId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterLinkMatcher(matcherId);\n  }\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._checkProposedApi();\n    return this._core.registerLinkProvider(linkProvider);\n  }\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    this._checkProposedApi();\n    return this._core.registerCharacterJoiner(handler);\n  }\n  public deregisterCharacterJoiner(joinerId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterCharacterJoiner(joinerId);\n  }\n  public registerMarker(cursorYOffset: number = 0): IMarker | undefined {\n    this._checkProposedApi();\n    this._verifyIntegers(cursorYOffset);\n    return this._core.addMarker(cursorYOffset);\n  }\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    this._checkProposedApi();\n    this._verifyPositiveIntegers(decorationOptions.x ?? 0, decorationOptions.width ?? 0, decorationOptions.height ?? 0);\n    return this._core.registerDecoration(decorationOptions);\n  }\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    return this.registerMarker(cursorYOffset);\n  }\n  public hasSelection(): boolean {\n    return this._core.hasSelection();\n  }\n  public select(column: number, row: number, length: number): void {\n    this._verifyIntegers(column, row, length);\n    this._core.select(column, row, length);\n  }\n  public getSelection(): string {\n    return this._core.getSelection();\n  }\n  public getSelectionPosition(): ISelectionPosition | undefined {\n    return this._core.getSelectionPosition();\n  }\n  public clearSelection(): void {\n    this._core.clearSelection();\n  }\n  public selectAll(): void {\n    this._core.selectAll();\n  }\n  public selectLines(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.selectLines(start, end);\n  }\n  public dispose(): void {\n    this._addonManager.dispose();\n    this._core.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeUtf8(data: Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public paste(data: string): void {\n    this._core.paste(data);\n  }\n  public getOption(key: 'bellSound' | 'bellStyle' | 'cursorStyle' | 'fontFamily' | 'logLevel' | 'rendererType' | 'termName' | 'wordSeparator'): string;\n  public getOption(key: 'allowTransparency' | 'altClickMovesCursor' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'disableStdin' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'visualBell'): boolean;\n  public getOption(key: 'cols' | 'fontSize' | 'letterSpacing' | 'lineHeight' | 'rows' | 'tabStopWidth' | 'scrollback'): number;\n  public getOption(key: 'fontWeight' | 'fontWeightBold'): FontWeight;\n  public getOption(key: string): any;\n  public getOption(key: any): any {\n    return this._core.optionsService.getOption(key);\n  }\n  public setOption(key: 'bellSound' | 'fontFamily' | 'termName' | 'wordSeparator', value: string): void;\n  public setOption(key: 'fontWeight' | 'fontWeightBold', value: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number): void;\n  public setOption(key: 'logLevel', value: 'debug' | 'info' | 'warn' | 'error' | 'off'): void;\n  public setOption(key: 'bellStyle', value: 'none' | 'visual' | 'sound' | 'both'): void;\n  public setOption(key: 'cursorStyle', value: 'block' | 'underline' | 'bar'): void;\n  public setOption(key: 'allowTransparency' | 'altClickMovesCursor' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'disableStdin' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'visualBell', value: boolean): void;\n  public setOption(key: 'fontSize' | 'letterSpacing' | 'lineHeight' | 'tabStopWidth' | 'scrollback', value: number): void;\n  public setOption(key: 'theme', value: ITheme): void;\n  public setOption(key: 'cols' | 'rows', value: number): void;\n  public setOption(key: string, value: any): void;\n  public setOption(key: any, value: any): void {\n    this._checkReadonlyOptions(key);\n    this._core.optionsService.setOption(key, value);\n  }\n  public refresh(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.refresh(start, end);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public clearTextureAtlas(): void {\n    this._core.clearTextureAtlas();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    return this._addonManager.loadAddon(this, addon);\n  }\n  public static get strings(): ILocalizableStrings {\n    return Strings;\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n\n  private _verifyPositiveIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value && (value === Infinity || isNaN(value) || value % 1 !== 0 || value < 0)) {\n        throw new Error('This API only accepts positive integers');\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions, IRenderLayer } from 'browser/renderer/Types';\nimport { ICellData, IColor } from 'common/Types';\nimport { DEFAULT_COLOR, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_CODE, Attributes } from 'common/buffer/Constants';\nimport { IGlyphIdentifier } from 'browser/renderer/atlas/Types';\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR, TEXT_BASELINE } from 'browser/renderer/atlas/Constants';\nimport { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';\nimport { acquireCharAtlas } from 'browser/renderer/atlas/CharAtlasCache';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { IColorSet } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { excludeFromContrastRatioDemands, throwIfFalsy } from 'browser/renderer/RendererUtils';\nimport { channels, color, rgba } from 'common/Color';\nimport { removeElementFromParent } from 'browser/Dom';\nimport { tryDrawCustomChar } from 'browser/renderer/CustomGlyphs';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  private _selectionStart: [number, number] | undefined;\n  private _selectionEnd: [number, number] | undefined;\n  private _columnSelectMode: boolean = false;\n\n  protected _charAtlas: BaseCharAtlas | undefined;\n\n  /**\n   * An object that's reused when drawing glyphs in order to reduce GC.\n   */\n  private _currentGlyphIdentifier: IGlyphIdentifier = {\n    chars: '',\n    code: 0,\n    bg: 0,\n    fg: 0,\n    bold: false,\n    dim: false,\n    italic: false\n  };\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet,\n    private _rendererId: number,\n    protected readonly _bufferService: IBufferService,\n    protected readonly _optionsService: IOptionsService,\n    protected readonly _decorationService: IDecorationService\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    removeElementFromParent(this._canvas);\n    this._charAtlas?.dispose();\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(): void {}\n  public onBlur(): void {}\n  public onFocus(): void {}\n  public onCursorMove(): void {}\n  public onGridChanged(startRow: number, endRow: number): void {}\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public setColors(colorSet: IColorSet): void {\n    this._refreshCharAtlas(colorSet);\n  }\n\n  protected _setTransparency(alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(this._colors);\n    this.onGridChanged(0, this._bufferService.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(this._optionsService.rawOptions, this._rendererId, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(this._colors);\n  }\n\n  public abstract reset(): void;\n\n  public clearTextureAtlas(): void {\n    this._charAtlas?.clear();\n  }\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n     * Fills a 1px line (2px on HDPI) at the middle of the cell. This uses the\n     * existing fillStyle on the context.\n     * @param x The column to fill.\n     * @param y The row to fill.\n     */\n  protected _fillMiddleLineAtCells(x: number, y: number, width: number = 1): void {\n    const cellOffset = Math.ceil(this._scaledCellHeight * 0.5);\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - cellOffset - window.devicePixelRatio,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      window.devicePixelRatio * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + window.devicePixelRatio / 2,\n      y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n      width * this._scaledCellWidth - window.devicePixelRatio,\n      (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipRow(y);\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._scaledCellWidth, y * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n    }\n  }\n\n  /**\n   * Draws one or more characters at a cell. If possible this will draw using\n   * the character atlas to reduce draw time.\n   * @param chars The character or characters.\n   * @param code The character code.\n   * @param width The width of the characters.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param bg The background color, in the format stored within the attributes.\n   * This is used to validate whether a cached image can be used.\n   * @param bold Whether the text is bold.\n   */\n  protected _drawChars(cell: ICellData, x: number, y: number): void {\n    const contrastColor = this._getContrastColor(cell, x, y);\n\n    // skip cache right away if we draw in RGB\n    // Note: to avoid bad runtime JoinedCellData will be skipped\n    //       in the cache handler itself (atlasDidDraw == false) and\n    //       fall through to uncached later down below\n    if (contrastColor || cell.isFgRGB() || cell.isBgRGB()) {\n      this._drawUncachedChars(cell, x, y, contrastColor);\n      return;\n    }\n\n    let fg;\n    let bg;\n    if (cell.isInverse()) {\n      fg = (cell.isBgDefault()) ? INVERTED_DEFAULT_COLOR : cell.getBgColor();\n      bg = (cell.isFgDefault()) ? INVERTED_DEFAULT_COLOR : cell.getFgColor();\n    } else {\n      bg = (cell.isBgDefault()) ? DEFAULT_COLOR : cell.getBgColor();\n      fg = (cell.isFgDefault()) ? DEFAULT_COLOR : cell.getFgColor();\n    }\n\n    const drawInBrightColor = this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8;\n\n    fg += drawInBrightColor ? 8 : 0;\n    this._currentGlyphIdentifier.chars = cell.getChars() || WHITESPACE_CELL_CHAR;\n    this._currentGlyphIdentifier.code = cell.getCode() || WHITESPACE_CELL_CODE;\n    this._currentGlyphIdentifier.bg = bg;\n    this._currentGlyphIdentifier.fg = fg;\n    this._currentGlyphIdentifier.bold = !!cell.isBold();\n    this._currentGlyphIdentifier.dim = !!cell.isDim();\n    this._currentGlyphIdentifier.italic = !!cell.isItalic();\n\n    // Don't try cache the glyph if it uses any decoration foreground/background override.\n    let hasOverrides = false;\n    for (const d of this._decorationService.getDecorationsAtCell(x, y)) {\n      if (d.backgroundColorRGB || d.foregroundColorRGB) {\n        hasOverrides = true;\n        break;\n      }\n    }\n\n    const atlasDidDraw = hasOverrides ? false : this._charAtlas?.draw(this._ctx, this._currentGlyphIdentifier, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n\n    if (!atlasDidDraw) {\n      this._drawUncachedChars(cell, x, y);\n    }\n  }\n\n  /**\n   * Draws one or more characters at one or more cells. The character(s) will be\n   * clipped to ensure that they fit with the cell(s), including the cell to the\n   * right if the last character is a wide character.\n   * @param chars The character.\n   * @param width The width of the character.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   */\n  private _drawUncachedChars(cell: ICellData, x: number, y: number, fgOverride?: IColor): void {\n    this._ctx.save();\n    this._ctx.font = this._getFont(!!cell.isBold(), !!cell.isItalic());\n    this._ctx.textBaseline = TEXT_BASELINE;\n\n    if (cell.isInverse()) {\n      if (fgOverride) {\n        this._ctx.fillStyle = fgOverride.css;\n      } else if (cell.isBgDefault()) {\n        this._ctx.fillStyle = color.opaque(this._colors.background).css;\n      } else if (cell.isBgRGB()) {\n        this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n      } else {\n        let bg = cell.getBgColor();\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && bg < 8) {\n          bg += 8;\n        }\n        this._ctx.fillStyle = this._colors.ansi[bg].css;\n      }\n    } else {\n      if (fgOverride) {\n        this._ctx.fillStyle = fgOverride.css;\n      } else if (cell.isFgDefault()) {\n        this._ctx.fillStyle = this._colors.foreground.css;\n      } else if (cell.isFgRGB()) {\n        this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n      } else {\n        let fg = cell.getFgColor();\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n          fg += 8;\n        }\n        this._ctx.fillStyle = this._colors.ansi[fg].css;\n      }\n    }\n\n    this._clipRow(y);\n\n    // Apply alpha to dim the character\n    if (cell.isDim()) {\n      this._ctx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._scaledCellWidth, y * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n    }\n\n    this._ctx.restore();\n  }\n\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param y The row to clip.\n   */\n  private _clipRow(y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._scaledCellHeight,\n      this._bufferService.cols * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? this._optionsService.rawOptions.fontWeightBold : this._optionsService.rawOptions.fontWeight;\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${this._optionsService.rawOptions.fontSize * window.devicePixelRatio}px ${this._optionsService.rawOptions.fontFamily}`;\n  }\n\n  private _getContrastColor(cell: CellData, x: number, y: number): IColor | undefined {\n    // Get any decoration foreground/background overrides, this must be fetched before the early\n    // exist but applied after inverse\n    let bgOverride: number | undefined;\n    let fgOverride: number | undefined;\n    let isTop = false;\n    for (const d of this._decorationService.getDecorationsAtCell(x, y)) {\n      if (d.options.layer !== 'top' && isTop) {\n        continue;\n      }\n      if (d.backgroundColorRGB) {\n        bgOverride = d.backgroundColorRGB.rgba;\n      }\n      if (d.foregroundColorRGB) {\n        fgOverride = d.foregroundColorRGB.rgba;\n      }\n      isTop = d.options.layer === 'top';\n    }\n\n    // Apply selection foreground if applicable\n    if (!isTop) {\n      if (this._colors.selectionForeground && this._isCellInSelection(x, y)) {\n        fgOverride = this._colors.selectionForeground.rgba;\n      }\n    }\n\n    if (!bgOverride && !fgOverride && (this._optionsService.rawOptions.minimumContrastRatio === 1 || excludeFromContrastRatioDemands(cell.getCode()))) {\n      return undefined;\n    }\n\n    if (!bgOverride && !fgOverride) {\n      // Try get from cache\n      const adjustedColor = this._colors.contrastCache.getColor(cell.bg, cell.fg);\n      if (adjustedColor !== undefined) {\n        return adjustedColor || undefined;\n      }\n    }\n\n    let fgColor = cell.getFgColor();\n    let fgColorMode = cell.getFgColorMode();\n    let bgColor = cell.getBgColor();\n    let bgColorMode = cell.getBgColorMode();\n    const isInverse = !!cell.isInverse();\n    const isBold = !!cell.isInverse();\n    if (isInverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgOverride !== undefined ? Attributes.CM_RGB : bgColorMode, bgOverride ?? bgColor, isInverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, isInverse, isBold);\n    let result = rgba.ensureContrastRatio(bgOverride ?? bgRgba, fgOverride ?? fgRgba, this._optionsService.rawOptions.minimumContrastRatio);\n\n    if (!result) {\n      if (!fgOverride) {\n        this._colors.contrastCache.setColor(cell.bg, cell.fg, null);\n        return undefined;\n      }\n      // If it was an override and there was no contrast change, set as the result\n      result = fgOverride;\n    }\n\n    const color: IColor = {\n      css: channels.toCss(\n        (result >> 24) & 0xFF,\n        (result >> 16) & 0xFF,\n        (result >> 8) & 0xFF\n      ),\n      rgba: result\n    };\n    if (!bgOverride && !fgOverride) {\n      this._colors.contrastCache.setColor(cell.bg, cell.fg, color);\n    }\n\n    return color;\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._colors.ansi[bgColor].rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._colors.foreground.rgba;\n        }\n        return this._colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._colors.ansi[fgColor].rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._colors.background.rgba;\n        }\n        return this._colors.foreground.rgba;\n    }\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      return x >= start[0] && y >= start[1] &&\n        x < end[0] && y < end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from 'browser/renderer/BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IBufferService, IOptionsService, ICoreService, IDecorationService } from 'common/services/Services';\nimport { IEventEmitter } from 'common/EventEmitter';\nimport { ICoreBrowserService } from 'browser/services/Services';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    private _onRequestRedraw: IEventEmitter<IRequestRedrawEvent>,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IDecorationService decorationService: IDecorationService\n  ) {\n    super(container, 'cursor', zIndex, true, colors, rendererId, bufferService, optionsService, decorationService);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n  }\n\n  public dispose(): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    super.dispose();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(): void {\n    this._clearCursor();\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n    this.onOptionsChanged();\n  }\n\n  public onBlur(): void {\n    this._cursorBlinkStateManager?.pause();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onFocus(): void {\n    this._cursorBlinkStateManager?.resume();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onOptionsChanged(): void {\n    if (this._optionsService.rawOptions.cursorBlink) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(this._coreBrowserService.isFocused, () => {\n          this._render(true);\n        });\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onCursorMove(): void {\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n  }\n\n  public onGridChanged(startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation();\n    }\n  }\n\n  private _render(triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    if (!this._coreService.isCursorInitialized || this._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const viewportRelativeCursorY = cursorY - this._bufferService.buffer.ydisp;\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= this._bufferService.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    this._bufferService.buffer.lines.get(cursorY)!.loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!this._coreBrowserService.isFocused) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === this._coreBrowserService.isFocused &&\n          this._state.style === this._optionsService.rawOptions.cursorStyle &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[this._optionsService.rawOptions.cursorStyle || 'block'](cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = this._optionsService.rawOptions.cursorStyle;\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      // Avoid potential rounding errors when device pixel ratio is less than 1\n      if (window.devicePixelRatio < 1) {\n        this._clearAll();\n      } else {\n        this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      }\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, this._optionsService.rawOptions.cursorWidth);\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    isFocused: boolean,\n    private _renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '\u2580': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '\u2581': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '\u2582': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '\u2583': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '\u2584': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '\u2585': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '\u2586': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '\u2587': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '\u2588': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '\u2589': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '\u258A': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '\u258B': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '\u258C': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '\u258D': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '\u258E': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '\u258F': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '\u2590': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '\u2594': [{ x: 0, y: 0, w: 9, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '\u2595': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '\u2596': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '\u2597': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '\u2598': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '\u2599': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '\u259A': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '\u259B': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '\u259C': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '\u259D': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '\u259E': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '\u259F': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '\u2591': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '\u2592': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '\u2593': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** \u2502 */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** \u2500 */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** \u2514 */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** \u2518 */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** \u2510 */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** \u250C */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** \u2575 */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** \u2574 */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** \u2576 */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** \u2577 */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** \u2534 */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** \u2524 */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** \u251C */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** \u252C */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** \u253C */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** \u254C */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** \u2504 */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** \u2509 */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** \u254E */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** \u2506 */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** \u250A */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | ((xp: number, yp: number) => string) } | undefined } = {\n  // Uniform normal and bold\n  '\u2500': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '\u2501': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '\u2502': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '\u2503': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '\u250C': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '\u250F': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '\u2510': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '\u2513': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '\u2514': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '\u2517': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '\u2518': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '\u251B': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '\u251C': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '\u2523': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '\u2524': { [Style.NORMAL]: Shapes.T_LEFT },\n  '\u252B': { [Style.BOLD]:   Shapes.T_LEFT },\n  '\u252C': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '\u2533': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '\u2534': { [Style.NORMAL]: Shapes.T_TOP },\n  '\u253B': { [Style.BOLD]:   Shapes.T_TOP },\n  '\u253C': { [Style.NORMAL]: Shapes.CROSS },\n  '\u254B': { [Style.BOLD]:   Shapes.CROSS },\n  '\u2574': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '\u2578': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '\u2575': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '\u2579': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '\u2576': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '\u257A': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '\u2577': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u257B': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '\u2550': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '\u2551': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '\u2552': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '\u2553': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '\u2554': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '\u2555': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '\u2556': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '\u2557': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '\u2558': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '\u2559': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '\u255A': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '\u255B': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '\u255C': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '\u255D': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '\u255E': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '\u255F': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '\u2560': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '\u2561': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '\u2562': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '\u2563': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '\u2564': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '\u2565': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '\u2566': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '\u2567': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '\u2568': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '\u2569': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '\u256A': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '\u256B': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '\u256C': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '\u2571': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '\u2572': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '\u2573': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '\u257C': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u257D': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u257E': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u257F': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u250D': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u250E': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2511': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u2512': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2515': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u2516': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u2519': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u251A': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u251D': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u251E': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u251F': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2520': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '\u2521': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '\u2522': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '\u2525': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u2526': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u2527': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2528': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '\u2529': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '\u252A': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '\u252D': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u252E': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u252F': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '\u2530': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2531': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '\u2532': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '\u2535': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u2536': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u2537': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '\u2538': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u2539': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '\u253A': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '\u253D': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u253E': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u253F': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '\u2540': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u2541': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2542': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '\u2543': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '\u2544': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '\u2545': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '\u2546': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '\u2547': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '\u2548': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '\u2549': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '\u254A': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '\u254C': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '\u254D': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '\u2504': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '\u2505': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '\u2508': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '\u2509': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '\u254E': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '\u254F': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '\u2506': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '\u2507': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '\u250A': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '\u250B': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '\u256D': { [Style.NORMAL]: 'C.5,1,.5,.5,1,.5' },\n  '\u256E': { [Style.NORMAL]: 'C.5,1,.5,.5,0,.5' },\n  '\u256F': { [Style.NORMAL]: 'C.5,0,.5,.5,0,.5' },\n  '\u2570': { [Style.NORMAL]: 'C.5,0,.5,.5,1,.5' }\n};\n\ninterface IVectorShape {\n  d: string;\n  type: VectorType;\n  /** Padding to apply to the vector's x axis in CSS pixels. */\n  horizontalPadding?: number;\n}\n\nconst enum VectorType {\n  FILL,\n  STROKE\n}\n\n/**\n * This contains the definitions of the primarily used box drawing characters as vector shapes. The\n * reason these characters are defined specially is to avoid common problems if a user's font has\n * not been patched with powerline characters and also to get pixel perfect rendering as rendering\n * issues can occur around AA/SPAA.\n *\n * Original symbols defined in https://github.com/powerline/fontpatcher\n */\nexport const powerlineDefinitions: { [index: string]: IVectorShape } = {\n  // Right triangle solid\n  '\\u{E0B0}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.FILL },\n  // Right triangle line\n  '\\u{E0B1}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.STROKE, horizontalPadding: 0.5 },\n  // Left triangle solid\n  '\\u{E0B2}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.FILL },\n  // Left triangle line\n  '\\u{E0B3}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.STROKE, horizontalPadding: 0.5 }\n};\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const powerlineDefinition = powerlineDefinitions[c];\n  if (powerlineDefinition) {\n    drawPowerlineChar(ctx, powerlineDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = scaledCellWidth / 8;\n    const yEighth = scaledCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.slice(1, 3), 16);\n      g = parseInt(fillStyle.slice(3, 5), 16);\n      b = parseInt(fillStyle.slice(5, 7), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.slice(7, 9), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       \u250E\u2530\u2512\u250D\u252F\u2511\u2553\u2565\u2556\u2552\u2564\u2555 \u250F\u2533\u2513\u250C\u2532\u2513\u250C\u252C\u2510\u250F\u2531\u2510\n * \u250C\u2500\u252C\u2500\u2510 \u250F\u2501\u2533\u2501\u2513 \u2554\u2550\u2566\u2550\u2557 \u2520\u2542\u2528\u251D\u253F\u2525\u255F\u256B\u2562\u255E\u256A\u2561 \u2521\u2547\u2529\u251C\u254A\u252B\u2522\u2548\u252A\u2523\u2549\u2524\n * \u2502 \u2502 \u2502 \u2503 \u2503 \u2503 \u2551 \u2551 \u2551 \u2516\u2538\u251A\u2515\u2537\u2519\u2559\u2568\u255C\u2558\u2567\u255B \u2514\u2534\u2518\u2514\u253A\u251B\u2517\u253B\u251B\u2517\u2539\u2518\n * \u251C\u2500\u253C\u2500\u2524 \u2523\u2501\u254B\u2501\u252B \u2560\u2550\u256C\u2550\u2563 \u250F\u2531\u2510\u250C\u2532\u2513\u250C\u252C\u2510\u250C\u252C\u2510 \u250F\u2533\u2513\u250C\u252E\u2513\u250C\u252C\u2510\u250F\u252D\u2510\n * \u2502 \u2502 \u2502 \u2503 \u2503 \u2503 \u2551 \u2551 \u2551 \u2521\u2543\u2524\u251C\u2544\u2529\u251C\u2546\u252A\u2522\u2545\u2524 \u251E\u2540\u2526\u251C\u253E\u252B\u251F\u2541\u2527\u2523\u253D\u2524\n * \u2514\u2500\u2534\u2500\u2518 \u2517\u2501\u253B\u2501\u251B \u255A\u2550\u2569\u2550\u255D \u2514\u2534\u2518\u2514\u2534\u2518\u2514\u253A\u251B\u2517\u2539\u2518 \u2514\u2534\u2518\u2514\u2536\u251B\u2517\u253B\u251B\u2517\u2535\u2518\n *\n * Other:\n * \u256D\u2500\u256E \u2572 \u2571 \u2577\u257B\u254E\u254F\u2506\u2507\u250A\u250B \u257A\u257E\u2574 \u254C\u254C\u254C \u2504\u2504\u2504 \u2508\u2508\u2508\n * \u2502 \u2502  \u2573  \u257D\u257F\u254E\u254F\u2506\u2507\u250A\u250B \u2576\u257C\u2578 \u254D\u254D\u254D \u2505\u2505\u2505 \u2509\u2509\u2509\n * \u2570\u2500\u256F \u2571 \u2572 \u2579\u2575\u254E\u254F\u2506\u2507\u250A\u250B\n *\n * All box drawing characters:\n * \u2500 \u2501 \u2502 \u2503 \u2504 \u2505 \u2506 \u2507 \u2508 \u2509 \u250A \u250B \u250C \u250D \u250E \u250F\n * \u2510 \u2511 \u2512 \u2513 \u2514 \u2515 \u2516 \u2517 \u2518 \u2519 \u251A \u251B \u251C \u251D \u251E \u251F\n * \u2520 \u2521 \u2522 \u2523 \u2524 \u2525 \u2526 \u2527 \u2528 \u2529 \u252A \u252B \u252C \u252D \u252E \u252F\n * \u2530 \u2531 \u2532 \u2533 \u2534 \u2535 \u2536 \u2537 \u2538 \u2539 \u253A \u253B \u253C \u253D \u253E \u253F\n * \u2540 \u2541 \u2542 \u2543 \u2544 \u2545 \u2546 \u2547 \u2548 \u2549 \u254A \u254B \u254C \u254D \u254E \u254F\n * \u2550 \u2551 \u2552 \u2553 \u2554 \u2555 \u2556 \u2557 \u2558 \u2559 \u255A \u255B \u255C \u255D \u255E \u255F\n * \u2560 \u2561 \u2562 \u2563 \u2564 \u2565 \u2566 \u2567 \u2568 \u2569 \u256A \u256B \u256C \u256D \u256E \u256F\n * \u2570 \u2571 \u2572 \u2573 \u2574 \u2575 \u2576 \u2577 \u2578 \u2579 \u257A \u257B \u257C \u257D \u257E \u257F\n *\n * ---\n *\n * Box drawing alignment tests:                                          \u2588\n *                                                                       \u2589\n *   \u2554\u2550\u2550\u2566\u2550\u2550\u2557  \u250C\u2500\u2500\u252C\u2500\u2500\u2510  \u256D\u2500\u2500\u252C\u2500\u2500\u256E  \u256D\u2500\u2500\u252C\u2500\u2500\u256E  \u250F\u2501\u2501\u2533\u2501\u2501\u2513  \u250E\u2512\u250F\u2511   \u2577  \u257B \u250F\u252F\u2513 \u250C\u2530\u2510    \u258A \u2571\u2572\u2571\u2572\u2573\u2573\u2573\n *   \u2551\u250C\u2500\u2568\u2500\u2510\u2551  \u2502\u2554\u2550\u2567\u2550\u2557\u2502  \u2502\u2552\u2550\u256A\u2550\u2555\u2502  \u2502\u2553\u2500\u2541\u2500\u2556\u2502  \u2503\u250C\u2500\u2542\u2500\u2510\u2503  \u2517\u2543\u2544\u2519  \u2576\u253C\u2574\u257A\u254B\u2578\u2520\u253C\u2528 \u251D\u254B\u2525    \u258B \u2572\u2571\u2572\u2571\u2573\u2573\u2573\n *   \u2551\u2502\u2572 \u2571\u2502\u2551  \u2502\u2551   \u2551\u2502  \u2502\u2502 \u2502 \u2502\u2502  \u2502\u2551 \u2503 \u2551\u2502  \u2503\u2502 \u257F \u2502\u2503  \u250D\u2545\u2546\u2513   \u2575  \u2579 \u2517\u2537\u251B \u2514\u2538\u2518    \u258C \u2571\u2572\u2571\u2572\u2573\u2573\u2573\n *   \u2560\u2561 \u2573 \u255E\u2563  \u251C\u2562   \u255F\u2524  \u251C\u253C\u2500\u253C\u2500\u253C\u2524  \u251C\u256B\u2500\u2542\u2500\u256B\u2524  \u2523\u253F\u257E\u253C\u257C\u253F\u252B  \u2515\u251B\u2516\u251A     \u250C\u2504\u2504\u2510 \u254E \u250F\u2505\u2505\u2513 \u250B \u258D \u2572\u2571\u2572\u2571\u2573\u2573\u2573\n *   \u2551\u2502\u2571 \u2572\u2502\u2551  \u2502\u2551   \u2551\u2502  \u2502\u2502 \u2502 \u2502\u2502  \u2502\u2551 \u2503 \u2551\u2502  \u2503\u2502 \u257D \u2502\u2503  \u2591\u2591\u2592\u2592\u2593\u2593\u2588\u2588 \u250A  \u2506 \u254E \u254F  \u2507 \u250B \u258E\n *   \u2551\u2514\u2500\u2565\u2500\u2518\u2551  \u2502\u255A\u2550\u2564\u2550\u255D\u2502  \u2502\u2558\u2550\u256A\u2550\u255B\u2502  \u2502\u2559\u2500\u2540\u2500\u255C\u2502  \u2503\u2514\u2500\u2542\u2500\u2518\u2503  \u2591\u2591\u2592\u2592\u2593\u2593\u2588\u2588 \u250A  \u2506 \u254E \u254F  \u2507 \u250B \u258F\n *   \u255A\u2550\u2550\u2569\u2550\u2550\u255D  \u2514\u2500\u2500\u2534\u2500\u2500\u2518  \u2570\u2500\u2500\u2534\u2500\u2500\u256F  \u2570\u2500\u2500\u2534\u2500\u2500\u256F  \u2517\u2501\u2501\u253B\u2501\u2501\u251B           \u2514\u254C\u254C\u2518 \u254E \u2517\u254D\u254D\u251B \u250B  \u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = window.devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / scaledCellHeight * scaledCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, scaledCellWidth, scaledCellHeight, xOffset, yOffset));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction drawPowerlineChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IVectorShape,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  ctx.beginPath();\n  ctx.lineWidth = window.devicePixelRatio;\n  for (const instruction of charDefinition.d.split(' ')) {\n    const type = instruction[0];\n    const f = svgToCanvasInstructionMap[type];\n    if (!f) {\n      console.error(`Could not find drawing instructions for \"${type}\"`);\n      continue;\n    }\n    const args: string[] = instruction.substring(1).split(',');\n    if (!args[0] || !args[1]) {\n      continue;\n    }\n    f(ctx, translateArgs(args, scaledCellWidth, scaledCellHeight, xOffset, yOffset, charDefinition.horizontalPadding));\n  }\n  if (charDefinition.type === VectorType.STROKE) {\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.stroke();\n  } else {\n    ctx.fill();\n  }\n  ctx.closePath();\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number, horizontalPadding: number = 0): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth - (horizontalPadding * 2 * window.devicePixelRatio);\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset + (horizontalPadding * window.devicePixelRatio);\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class GridCache<T> {\n  public cache: (T | undefined)[][];\n\n  public constructor() {\n    this.cache = [];\n  }\n\n  public resize(width: number, height: number): void {\n    for (let x = 0; x < width; x++) {\n      if (this.cache.length <= x) {\n        this.cache.push([]);\n      }\n      for (let y = this.cache[x].length; y < height; y++) {\n        this.cache[x].push(undefined);\n      }\n      this.cache[x].length = height;\n    }\n    this.cache.length = width;\n  }\n\n  public clear(): void {\n    for (let x = 0; x < this.cache.length; x++) {\n      for (let y = 0; y < this.cache[x].length; y++) {\n        this.cache[x][y] = undefined;\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { is256Color } from 'browser/renderer/atlas/CharAtlasUtils';\nimport { IColorSet, ILinkifierEvent, ILinkifier, ILinkifier2 } from 'browser/Types';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    linkifier: ILinkifier,\n    linkifier2: ILinkifier2,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @IDecorationService decorationService: IDecorationService\n  ) {\n    super(container, 'link', zIndex, true, colors, rendererId, bufferService, optionsService, decorationService);\n    linkifier.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    linkifier.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n\n    linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { TextRenderLayer } from 'browser/renderer/TextRenderLayer';\nimport { SelectionRenderLayer } from 'browser/renderer/SelectionRenderLayer';\nimport { CursorRenderLayer } from 'browser/renderer/CursorRenderLayer';\nimport { IRenderLayer, IRenderer, IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { LinkRenderLayer } from 'browser/renderer/LinkRenderLayer';\nimport { Disposable } from 'common/Lifecycle';\nimport { IColorSet, ILinkifier, ILinkifier2 } from 'browser/Types';\nimport { ICharSizeService } from 'browser/services/Services';\nimport { IBufferService, IOptionsService, IInstantiationService } from 'common/services/Services';\nimport { removeTerminalFromCache } from 'browser/renderer/atlas/CharAtlasCache';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\nlet nextRendererId = 1;\n\nexport class Renderer extends Disposable implements IRenderer {\n  private _id = nextRendererId++;\n\n  private _renderLayers: IRenderLayer[];\n  private _devicePixelRatio: number;\n\n  public dimensions: IRenderDimensions;\n\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  constructor(\n    private _colors: IColorSet,\n    private readonly _screenElement: HTMLElement,\n    linkifier: ILinkifier,\n    linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    const allowTransparency = this._optionsService.rawOptions.allowTransparency;\n    this._renderLayers = [\n      instantiationService.createInstance(TextRenderLayer, this._screenElement, 0, this._colors, allowTransparency, this._id),\n      instantiationService.createInstance(SelectionRenderLayer, this._screenElement, 1, this._colors, this._id),\n      instantiationService.createInstance(LinkRenderLayer, this._screenElement, 2, this._colors, this._id, linkifier, linkifier2),\n      instantiationService.createInstance(CursorRenderLayer, this._screenElement, 3, this._colors, this._id, this._onRequestRedraw)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n    this.onOptionsChanged();\n  }\n\n  public dispose(): void {\n    for (const l of this._renderLayers) {\n      l.dispose();\n    }\n    super.dispose();\n    removeTerminalFromCache(this._id);\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._bufferService.cols, this._bufferService.rows);\n    }\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    for (const l of this._renderLayers) {\n      l.setColors(this._colors);\n      l.reset();\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this.dimensions);\n    }\n\n    // Resize the screen\n    this._screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public onBlur(): void {\n    this._runOperation(l => l.onBlur());\n  }\n\n  public onFocus(): void {\n    this._runOperation(l => l.onFocus());\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this._runOperation(l => l.onSelectionChanged(start, end, columnSelectMode));\n    // Selection foreground requires a full re-render\n    if (this._colors.selectionForeground) {\n      this._onRequestRedraw.fire({ start: 0, end: this._bufferService.rows - 1 });\n    }\n  }\n\n  public onCursorMove(): void {\n    this._runOperation(l => l.onCursorMove());\n  }\n\n  public onOptionsChanged(): void {\n    this._runOperation(l => l.onOptionsChanged());\n  }\n\n  public clear(): void {\n    this._runOperation(l => l.reset());\n  }\n\n  private _runOperation(operation: (layer: IRenderLayer) => void): void {\n    for (const l of this._renderLayers) {\n      operation(l);\n    }\n  }\n\n  /**\n   * Performs the refresh loop callback, calling refresh only if a refresh is\n   * necessary before queueing up the next one.\n   */\n  public renderRows(start: number, end: number): void {\n    for (const l of this._renderLayers) {\n      l.onGridChanged(start, end);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    for (const layer of this._renderLayers) {\n      layer.clearTextureAtlas();\n    }\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    if (!this._charSizeService.hasValidSize) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\n    // clipped to ensure there is no overlap with the next cell.\n    this.dimensions.scaledCharWidth = Math.floor(this._charSizeService.width * window.devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case\n    // devicePixelRatio is a floating point number in order to ensure there is\n    // enough space to draw the character to the cell.\n    this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\n    // will be floored because since lineHeight can never be lower then 1, there\n    // is a guarentee that the scaled line height will always be larger than\n    // scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight);\n\n    // Calculate the y coordinate within a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharTop = this._optionsService.rawOptions.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing);\n\n    // Calculate the x coordinate with a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._optionsService.rawOptions.letterSpacing / 2);\n\n    // Recalculate the canvas dimensions; scaled* define the actual number of\n    // pixel in the canvas\n    this.dimensions.scaledCanvasHeight = this._bufferService.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._bufferService.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's very important that this\n    // rounds to nearest integer and not ceils as browsers often set\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\n    // pixel too large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n\n    // Get the _actual_ dimensions of an individual cell. This needs to be\n    // derived from the canvasWidth/Height calculated above which takes into\n    // account window.devicePixelRatio. ICharSizeService.width/height by itself\n    // is insufficient when the page is not at 100% zoom level as it's measured\n    // in CSS pixels, but the actual char size on the canvas can differ.\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows;\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <=  0xE0D6;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return (0x2500 <= codepoint && codepoint <= 0x259F);\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from 'browser/renderer/BaseRenderLayer';\nimport { IColorSet } from 'browser/Types';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\ninterface ISelectionState {\n  start?: [number, number];\n  end?: [number, number];\n  columnSelectMode?: boolean;\n  ydisp?: number;\n}\n\nexport class SelectionRenderLayer extends BaseRenderLayer {\n  private _state!: ISelectionState;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @IDecorationService decorationService: IDecorationService\n  ) {\n    super(container, 'selection', zIndex, true, colors, rendererId, bufferService, optionsService, decorationService);\n    this._clearState();\n  }\n\n  private _clearState(): void {\n    this._state = {\n      start: undefined,\n      end: undefined,\n      columnSelectMode: undefined,\n      ydisp: undefined\n    };\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._clearState();\n  }\n\n  public reset(): void {\n    if (this._state.start && this._state.end) {\n      this._clearState();\n      this._clearAll();\n    }\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    super.onSelectionChanged(start, end, columnSelectMode);\n\n    // Selection has not changed\n    if (!this._didStateChange(start, end, columnSelectMode, this._bufferService.buffer.ydisp)) {\n      return;\n    }\n\n    // Remove all selections\n    this._clearAll();\n\n    // Selection does not exist\n    if (!start || !end) {\n      this._clearState();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      this._state.ydisp = this._bufferService.buffer.ydisp;\n      return;\n    }\n\n    this._ctx.fillStyle = this._colors.selectionTransparent.css;\n\n    if (columnSelectMode) {\n      const startCol = start[0];\n      const width = end[0] - startCol;\n      const height = viewportCappedEndRow - viewportCappedStartRow + 1;\n      this._fillCells(startCol, viewportCappedStartRow, width, height);\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const startRowEndCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      this._fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\n      this._fillCells(0, viewportCappedStartRow + 1, this._bufferService.cols, middleRowsCount);\n\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        this._fillCells(0, viewportCappedEndRow, endCol, 1);\n      }\n    }\n\n    // Save state for next render\n    this._state.start = [start[0], start[1]];\n    this._state.end = [end[0], end[1]];\n    this._state.columnSelectMode = columnSelectMode;\n    this._state.ydisp = this._bufferService.buffer.ydisp;\n  }\n\n  private _didStateChange(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean, ydisp: number): boolean {\n    return !this._areCoordinatesEqual(start, this._state.start) ||\n      !this._areCoordinatesEqual(end, this._state.end) ||\n      columnSelectMode !== this._state.columnSelectMode ||\n      ydisp !== this._state.ydisp;\n  }\n\n  private _areCoordinatesEqual(coord1: [number, number] | undefined, coord2: [number, number] | undefined): boolean {\n    if (!coord1 || !coord2) {\n      return false;\n    }\n\n    return coord1[0] === coord2[0] && coord1[1] === coord2[1];\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CharData, ICellData } from 'common/Types';\nimport { GridCache } from 'browser/renderer/GridCache';\nimport { BaseRenderLayer } from 'browser/renderer/BaseRenderLayer';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { NULL_CELL_CODE, Content } from 'common/buffer/Constants';\nimport { IColorSet } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IOptionsService, IBufferService, IDecorationService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\n\n/**\n * This CharData looks like a null character, which will forc a clear and render\n * when the character changes (a regular space ' ' character may not as it's\n * drawn state is a cleared cell).\n */\n// const OVERLAP_OWNED_CHAR_DATA: CharData = [null, '', 0, -1];\n\nexport class TextRenderLayer extends BaseRenderLayer {\n  private _state: GridCache<CharData>;\n  private _characterWidth: number = 0;\n  private _characterFont: string = '';\n  private _characterOverlapCache: { [key: string]: boolean } = {};\n  private _workCell = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    alpha: boolean,\n    rendererId: number,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IDecorationService decorationService: IDecorationService\n  ) {\n    super(container, 'text', zIndex, alpha, colors, rendererId, bufferService, optionsService, decorationService);\n    this._state = new GridCache<CharData>();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n\n    // Clear the character width cache if the font or width has changed\n    const terminalFont = this._getFont(false, false);\n    if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\n      this._characterWidth = dim.scaledCharWidth;\n      this._characterFont = terminalFont;\n      this._characterOverlapCache = {};\n    }\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state.clear();\n    this._state.resize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public reset(): void {\n    this._state.clear();\n    this._clearAll();\n  }\n\n  private _forEachCell(\n    firstRow: number,\n    lastRow: number,\n    callback: (\n      cell: ICellData,\n      x: number,\n      y: number\n    ) => void\n  ): void {\n    for (let y = firstRow; y <= lastRow; y++) {\n      const row = y + this._bufferService.buffer.ydisp;\n      const line = this._bufferService.buffer.lines.get(row);\n      const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (let x = 0; x < this._bufferService.cols; x++) {\n        line!.loadCell(x, this._workCell);\n        let cell = this._workCell;\n\n        // If true, indicates that the current character(s) to draw were joined.\n        let isJoined = false;\n        let lastCharX = x;\n\n        // The character to the left is a wide character, drawing is owned by\n        // the char at x-1\n        if (cell.getWidth() === 0) {\n          continue;\n        }\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          const range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly\n          cell = new JoinedCellData(\n            this._workCell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        // If the character is an overlapping char and the character to the\n        // right is a space, take ownership of the cell to the right. We skip\n        // this check for joined characters because their rendering likely won't\n        // yield the same result as rendering the last character individually.\n        if (!isJoined && this._isOverlapping(cell)) {\n          // If the character is overlapping, we want to force a re-render on every\n          // frame. This is specifically to work around the case where two\n          // overlaping chars `a` and `b` are adjacent, the cursor is moved to b and a\n          // space is added. Without this, the first half of `b` would never\n          // get removed, and `a` would not re-render because it thinks it's\n          // already in the correct state.\n          // this._state.cache[x][y] = OVERLAP_OWNED_CHAR_DATA;\n          if (lastCharX < line!.length - 1 && line!.getCodePoint(lastCharX + 1) === NULL_CELL_CODE) {\n            // patch width to 2\n            cell.content &= ~Content.WIDTH_MASK;\n            cell.content |= 2 << Content.WIDTH_SHIFT;\n            // this._clearChar(x + 1, y);\n            // The overlapping char's char data will force a clear and render when the\n            // overlapping char is no longer to the left of the character and also when\n            // the space changes to another character.\n            // this._state.cache[x + 1][y] = OVERLAP_OWNED_CHAR_DATA;\n          }\n        }\n\n        callback(\n          cell,\n          x,\n          y\n        );\n\n        x = lastCharX;\n      }\n    }\n  }\n\n  /**\n   * Draws the background for a specified range of columns. Tries to batch adjacent cells of the\n   * same color together to reduce draw calls.\n   */\n  private _drawBackground(firstRow: number, lastRow: number): void {\n    const ctx = this._ctx;\n    const cols = this._bufferService.cols;\n    let startX: number = 0;\n    let startY: number = 0;\n    let prevFillStyle: string | null = null;\n\n    ctx.save();\n\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\n      // libvte and xterm both draw the background (but not foreground) of invisible characters,\n      // so we should too.\n      let nextFillStyle = null; // null represents default background color\n\n      if (cell.isInverse()) {\n        if (cell.isFgDefault()) {\n          nextFillStyle = this._colors.foreground.css;\n        } else if (cell.isFgRGB()) {\n          nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n        } else {\n          nextFillStyle = this._colors.ansi[cell.getFgColor()].css;\n        }\n      } else if (cell.isBgRGB()) {\n        nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n      } else if (cell.isBgPalette()) {\n        nextFillStyle = this._colors.ansi[cell.getBgColor()].css;\n      }\n\n      // Get any decoration foreground/background overrides, this must be fetched before the early\n      // exist but applied after inverse\n      let isTop = false;\n      for (const d of this._decorationService.getDecorationsAtCell(x, this._bufferService.buffer.ydisp + y)) {\n        if (d.options.layer !== 'top' && isTop) {\n          continue;\n        }\n        if (d.backgroundColorRGB) {\n          nextFillStyle = d.backgroundColorRGB.css;\n        }\n        isTop = d.options.layer === 'top';\n      }\n\n      if (prevFillStyle === null) {\n        // This is either the first iteration, or the default background was set. Either way, we\n        // don't need to draw anything.\n        startX = x;\n        startY = y;\n      }\n\n      if (y !== startY) {\n        // our row changed, draw the previous row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, cols - startX, 1);\n        startX = x;\n        startY = y;\n      } else if (prevFillStyle !== nextFillStyle) {\n        // our color changed, draw the previous characters in this row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, x - startX, 1);\n        startX = x;\n        startY = y;\n      }\n\n      prevFillStyle = nextFillStyle;\n    });\n\n    // flush the last color we encountered\n    if (prevFillStyle !== null) {\n      ctx.fillStyle = prevFillStyle;\n      this._fillCells(startX, startY, cols - startX, 1);\n    }\n\n    ctx.restore();\n  }\n\n  private _drawForeground(firstRow: number, lastRow: number): void {\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\n      if (cell.isInvisible()) {\n        return;\n      }\n      this._drawChars(cell, x, y);\n      if (cell.isUnderline() || cell.isStrikethrough()) {\n        this._ctx.save();\n\n        if (cell.isInverse()) {\n          if (cell.isBgDefault()) {\n            this._ctx.fillStyle = this._colors.background.css;\n          } else if (cell.isBgRGB()) {\n            this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n          } else {\n            let bg = cell.getBgColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && bg < 8) {\n              bg += 8;\n            }\n            this._ctx.fillStyle = this._colors.ansi[bg].css;\n          }\n        } else {\n          if (cell.isFgDefault()) {\n            this._ctx.fillStyle = this._colors.foreground.css;\n          } else if (cell.isFgRGB()) {\n            this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n          } else {\n            let fg = cell.getFgColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n              fg += 8;\n            }\n            this._ctx.fillStyle = this._colors.ansi[fg].css;\n          }\n        }\n\n        if (cell.isStrikethrough()) {\n          this._fillMiddleLineAtCells(x, y, cell.getWidth());\n        }\n        if (cell.isUnderline()) {\n          this._fillBottomLineAtCells(x, y, cell.getWidth());\n        }\n        this._ctx.restore();\n      }\n    });\n  }\n\n  public onGridChanged(firstRow: number, lastRow: number): void {\n    // Resize has not been called yet\n    if (this._state.cache.length === 0) {\n      return;\n    }\n\n    if (this._charAtlas) {\n      this._charAtlas.beginFrame();\n    }\n\n    this._clearCells(0, firstRow, this._bufferService.cols, lastRow - firstRow + 1);\n    this._drawBackground(firstRow, lastRow);\n    this._drawForeground(firstRow, lastRow);\n  }\n\n  public onOptionsChanged(): void {\n    this._setTransparency(this._optionsService.rawOptions.allowTransparency);\n  }\n\n  /**\n   * Whether a character is overlapping to the next cell.\n   */\n  private _isOverlapping(cell: ICellData): boolean {\n    // Only single cell characters can be overlapping, rendering issues can\n    // occur without this check\n    if (cell.getWidth() !== 1) {\n      return false;\n    }\n\n    // We assume that any ascii character will not overlap\n    if (cell.getCode() < 256) {\n      return false;\n    }\n\n    const chars = cell.getChars();\n\n    // Deliver from cache if available\n    if (this._characterOverlapCache.hasOwnProperty(chars)) {\n      return this._characterOverlapCache[chars];\n    }\n\n    // Setup the font\n    this._ctx.save();\n    this._ctx.font = this._characterFont;\n\n    // Measure the width of the character, but Math.floor it\n    // because that is what the renderer does when it calculates\n    // the character dimensions we are comparing against\n    const overlaps = Math.floor(this._ctx.measureText(chars).width) > this._characterWidth;\n\n    // Restore the original context\n    this._ctx.restore();\n\n    // Cache and return\n    this._characterOverlapCache[chars] = overlaps;\n    return overlaps;\n  }\n\n  /**\n   * Clear the charcater at the cell specified.\n   * @param x The column of the char.\n   * @param y The row of the char.\n   */\n  // private _clearChar(x: number, y: number): void {\n  //   let colsToClear = 1;\n  //   // Clear the adjacent character if it was wide\n  //   const state = this._state.cache[x][y];\n  //   if (state && state[CHAR_DATA_WIDTH_INDEX] === 2) {\n  //     colsToClear = 2;\n  //   }\n  //   this.clearCells(x, y, colsToClear, 1);\n  // }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IGlyphIdentifier } from 'browser/renderer/atlas/Types';\nimport { IDisposable } from 'common/Types';\n\nexport abstract class BaseCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  public dispose(): void { }\n\n  /**\n   * Perform any work needed to warm the cache before it can be used. May be called multiple times.\n   * Implement _doWarmUp instead if you only want to get called once.\n   */\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  /**\n   * Perform any work needed to warm the cache before it can be used. Used by the default\n   * implementation of warmUp(), and will only be called once.\n   */\n  private _doWarmUp(): void { }\n\n  public clear(): void { }\n\n  /**\n   * Called when we start drawing a new frame.\n   *\n   * TODO: We rely on this getting called by TextRenderLayer. This should really be called by\n   * Renderer instead, but we need to make Renderer the source-of-truth for the char atlas, instead\n   * of BaseRenderLayer.\n   */\n  public beginFrame(): void { }\n\n  /**\n   * May be called before warmUp finishes, however it is okay for the implementation to\n   * do nothing and return false in that case.\n   *\n   * @param ctx Where to draw the character onto.\n   * @param glyph Information about what to draw\n   * @param x The position on the context to start drawing at\n   * @param y The position on the context to start drawing at\n   * @returns The success state. True if we drew the character.\n   */\n  public abstract draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from 'browser/renderer/atlas/CharAtlasUtils';\nimport { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';\nimport { DynamicCharAtlas } from 'browser/renderer/atlas/DynamicCharAtlas';\nimport { ICharAtlasConfig } from 'browser/renderer/atlas/Types';\nimport { IColorSet } from 'browser/Types';\nimport { ITerminalOptions } from 'common/services/Services';\n\ninterface ICharAtlasCacheEntry {\n  atlas: BaseCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: number[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n */\nexport function acquireCharAtlas(\n  options: ITerminalOptions,\n  rendererId: number,\n  colors: IColorSet,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): BaseCharAtlas {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, options, colors);\n\n  // Check to see if the renderer already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(rendererId);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the renderer from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the renderer to the cache entry and return\n      entry.ownedBy.push(rendererId);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new DynamicCharAtlas(\n      document,\n      newConfig\n    ),\n    config: newConfig,\n    ownedBy: [rendererId]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n */\nexport function removeTerminalFromCache(rendererId: number): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(rendererId);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only renderer\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from 'browser/renderer/atlas/Types';\nimport { DEFAULT_COLOR } from 'common/buffer/Constants';\nimport { IColorSet, IPartialColorSet } from 'browser/Types';\nimport { ITerminalOptions } from 'common/services/Services';\n\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, options: ITerminalOptions, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IPartialColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: undefined,\n    cursorAccent: undefined,\n    selection: undefined,\n    ansi: colors.ansi.slice()\n  };\n  return {\n    devicePixelRatio: window.devicePixelRatio,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: options.fontFamily,\n    fontSize: options.fontSize,\n    fontWeight: options.fontWeight,\n    fontWeightBold: options.fontWeightBold,\n    allowTransparency: options.allowTransparency,\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return colorCode < DEFAULT_COLOR;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge would\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR, TEXT_BASELINE } from 'browser/renderer/atlas/Constants';\nimport { IGlyphIdentifier, ICharAtlasConfig } from 'browser/renderer/atlas/Types';\nimport { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';\nimport { DEFAULT_ANSI_COLORS } from 'browser/ColorManager';\nimport { LRUMap } from 'browser/renderer/atlas/LRUMap';\nimport { isFirefox, isSafari } from 'common/Platform';\nimport { IColor } from 'common/Types';\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\nimport { color } from 'common/Color';\n\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n// Drawing to the cache is expensive: If we have to draw more than this number of glyphs to the\n// cache in a single frame, give up on trying to cache anything else, and try to finish the current\n// frame ASAP.\n//\n// This helps to limit the amount of damage a program can do when it would otherwise thrash the\n// cache.\nconst FRAME_CACHE_DRAW_LIMIT = 100;\n\n/**\n * The number of milliseconds to wait before generating the ImageBitmap, this is to debounce/batch\n * the operation as window.createImageBitmap is asynchronous.\n */\nconst GLYPH_BITMAP_COMMIT_DELAY = 100;\n\ninterface IGlyphCacheValue {\n  index: number;\n  isEmpty: boolean;\n  inBitmap: boolean;\n}\n\nexport function getGlyphCacheKey(glyph: IGlyphIdentifier): number {\n  // Note that this only returns a valid key when code < 256\n  // Layout:\n  // 0b00000000000000000000000000000001: italic (1)\n  // 0b00000000000000000000000000000010: dim (1)\n  // 0b00000000000000000000000000000100: bold (1)\n  // 0b00000000000000000000111111111000: fg (9)\n  // 0b00000000000111111111000000000000: bg (9)\n  // 0b00011111111000000000000000000000: code (8)\n  // 0b11100000000000000000000000000000: unused (3)\n  return glyph.code << 21 | glyph.bg << 12 | glyph.fg << 3 | (glyph.bold ? 0 : 4) + (glyph.dim ? 0 : 2) + (glyph.italic ? 0 : 1);\n}\n\nexport class DynamicCharAtlas extends BaseCharAtlas {\n  // An ordered map that we're using to keep track of where each glyph is in the atlas texture.\n  // It's ordered so that we can determine when to remove the old entries.\n  private _cacheMap: LRUMap<IGlyphCacheValue>;\n\n  // The texture that the atlas is drawn to\n  private _cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // The number of characters stored in the atlas by width/height\n  private _width: number;\n  private _height: number;\n\n  private _drawToCacheCount: number = 0;\n\n  // An array of glyph keys that are waiting on the bitmap to be generated.\n  private _glyphsWaitingOnBitmap: IGlyphCacheValue[] = [];\n\n  // The timeout that is used to batch bitmap generation so it's not requested for every new glyph.\n  private _bitmapCommitTimeout: number | null = null;\n\n  // The bitmap to draw from, this is much faster on other browsers than others.\n  private _bitmap: ImageBitmap | null = null;\n\n  constructor(document: Document, private _config: ICharAtlasConfig) {\n    super();\n    this._cacheCanvas = document.createElement('canvas');\n    this._cacheCanvas.width = TEXTURE_WIDTH;\n    this._cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this._cacheCanvas.getContext('2d', { alpha: true }));\n\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = this._config.scaledCharWidth;\n    tmpCanvas.height = this._config.scaledCharHeight;\n    this._tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d', { alpha: this._config.allowTransparency }));\n\n    this._width = Math.floor(TEXTURE_WIDTH / this._config.scaledCharWidth);\n    this._height = Math.floor(TEXTURE_HEIGHT / this._config.scaledCharHeight);\n    const capacity = this._width * this._height;\n    this._cacheMap = new LRUMap(capacity);\n    this._cacheMap.prealloc(capacity);\n\n    // This is useful for debugging\n    // document.body.appendChild(this._cacheCanvas);\n  }\n\n  public dispose(): void {\n    if (this._bitmapCommitTimeout !== null) {\n      window.clearTimeout(this._bitmapCommitTimeout);\n      this._bitmapCommitTimeout = null;\n    }\n  }\n\n  public beginFrame(): void {\n    this._drawToCacheCount = 0;\n  }\n\n  public clear(): void {\n    if (this._cacheMap.size > 0) {\n      const capacity = this._width * this._height;\n      this._cacheMap = new LRUMap(capacity);\n      this._cacheMap.prealloc(capacity);\n    }\n    this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n    this._tmpCtx.clearRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n  }\n\n  public draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean {\n    // Space is always an empty cell, special case this as it's so common\n    if (glyph.code === 32) {\n      return true;\n    }\n\n    // Exit early for uncachable glyphs\n    if (!this._canCache(glyph)) {\n      return false;\n    }\n\n    const glyphKey = getGlyphCacheKey(glyph);\n    const cacheValue = this._cacheMap.get(glyphKey);\n    if (cacheValue !== null && cacheValue !== undefined) {\n      this._drawFromCache(ctx, cacheValue, x, y);\n      return true;\n    }\n    if (this._drawToCacheCount < FRAME_CACHE_DRAW_LIMIT) {\n      let index;\n      if (this._cacheMap.size < this._cacheMap.capacity) {\n        index = this._cacheMap.size;\n      } else {\n        // we're out of space, so our call to set will delete this item\n        index = this._cacheMap.peek()!.index;\n      }\n      const cacheValue = this._drawToCache(glyph, index);\n      this._cacheMap.set(glyphKey, cacheValue);\n      this._drawFromCache(ctx, cacheValue, x, y);\n      return true;\n    }\n    return false;\n  }\n\n  private _canCache(glyph: IGlyphIdentifier): boolean {\n    // Only cache ascii and extended characters for now, to be safe. In the future, we could do\n    // something more complicated to determine the expected width of a character.\n    //\n    // If we switch the renderer over to webgl at some point, we may be able to use blending modes\n    // to draw overlapping glyphs from the atlas:\n    // https://github.com/servo/webrender/issues/464#issuecomment-255632875\n    // https://webglfundamentals.org/webgl/lessons/webgl-text-texture.html\n    return glyph.code < 256;\n  }\n\n  private _toCoordinateX(index: number): number {\n    return (index % this._width) * this._config.scaledCharWidth;\n  }\n\n  private _toCoordinateY(index: number): number {\n    return Math.floor(index / this._width) * this._config.scaledCharHeight;\n  }\n\n  private _drawFromCache(\n    ctx: CanvasRenderingContext2D,\n    cacheValue: IGlyphCacheValue,\n    x: number,\n    y: number\n  ): void {\n    // We don't actually need to do anything if this is whitespace.\n    if (cacheValue.isEmpty) {\n      return;\n    }\n    const cacheX = this._toCoordinateX(cacheValue.index);\n    const cacheY = this._toCoordinateY(cacheValue.index);\n    ctx.drawImage(\n      cacheValue.inBitmap ? this._bitmap! : this._cacheCanvas,\n      cacheX,\n      cacheY,\n      this._config.scaledCharWidth,\n      this._config.scaledCharHeight,\n      x,\n      y,\n      this._config.scaledCharWidth,\n      this._config.scaledCharHeight\n    );\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx < this._config.colors.ansi.length) {\n      return this._config.colors.ansi[idx];\n    }\n    return DEFAULT_ANSI_COLORS[idx];\n  }\n\n  private _getBackgroundColor(glyph: IGlyphIdentifier): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n    if (glyph.bg === INVERTED_DEFAULT_COLOR) {\n      return this._config.colors.foreground;\n    }\n    if (glyph.bg < 256) {\n      return this._getColorFromAnsiIndex(glyph.bg);\n    }\n    return this._config.colors.background;\n  }\n\n  private _getForegroundColor(glyph: IGlyphIdentifier): IColor {\n    if (glyph.fg === INVERTED_DEFAULT_COLOR) {\n      return color.opaque(this._config.colors.background);\n    }\n    if (glyph.fg < 256) {\n      // 256 color support\n      return this._getColorFromAnsiIndex(glyph.fg);\n    }\n    return this._config.colors.foreground;\n  }\n\n  // TODO: We do this (or something similar) in multiple places. We should split this off\n  // into a shared function.\n  private _drawToCache(glyph: IGlyphIdentifier, index: number): IGlyphCacheValue {\n    this._drawToCacheCount++;\n\n    this._tmpCtx.save();\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(glyph);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = glyph.bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = glyph.italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    this._tmpCtx.fillStyle = this._getForegroundColor(glyph).css;\n\n    // Apply alpha to dim the character\n    if (glyph.dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n    // Draw the character\n    this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight);\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    let imageData = this._tmpCtx.getImageData(\n      0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight\n    );\n    let isEmpty = false;\n    if (!this._config.allowTransparency) {\n      isEmpty = clearColor(imageData, backgroundColor);\n    }\n\n    // If this charcater is underscore and empty, shift it up until it is visible, try for a maximum\n    // of 5 pixels.\n    if (isEmpty && glyph.chars === '_' && !this._config.allowTransparency) {\n      for (let offset = 1; offset <= 5; offset++) {\n        // Draw the character\n        this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight - offset);\n\n        // clear the background from the character to avoid issues with drawing over the previous\n        // character if it extends past it's bounds\n        imageData = this._tmpCtx.getImageData(\n          0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight\n        );\n        isEmpty = clearColor(imageData, backgroundColor);\n        if (!isEmpty) {\n          break;\n        }\n      }\n    }\n\n    this._tmpCtx.restore();\n\n    // copy the data from imageData to _cacheCanvas\n    const x = this._toCoordinateX(index);\n    const y = this._toCoordinateY(index);\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(imageData, x, y);\n\n    // Add the glyph and queue it to the bitmap (if the browser supports it)\n    const cacheValue = {\n      index,\n      isEmpty,\n      inBitmap: false\n    };\n    this._addGlyphToBitmap(cacheValue);\n\n    return cacheValue;\n  }\n\n  private _addGlyphToBitmap(cacheValue: IGlyphCacheValue): void {\n    // Support is patchy for createImageBitmap at the moment, pass a canvas back\n    // if support is lacking as drawImage works there too. Firefox is also\n    // included here as ImageBitmap appears both buggy and has horrible\n    // performance (tested on v55).\n    if (!('createImageBitmap' in window) || isFirefox || isSafari) {\n      return;\n    }\n\n    // Add the glyph to the queue\n    this._glyphsWaitingOnBitmap.push(cacheValue);\n\n    // Check if bitmap generation timeout already exists\n    if (this._bitmapCommitTimeout !== null) {\n      return;\n    }\n\n    this._bitmapCommitTimeout = window.setTimeout(() => this._generateBitmap(), GLYPH_BITMAP_COMMIT_DELAY);\n  }\n\n  private _generateBitmap(): void {\n    const glyphsMovingToBitmap = this._glyphsWaitingOnBitmap;\n    this._glyphsWaitingOnBitmap = [];\n    window.createImageBitmap(this._cacheCanvas).then(bitmap => {\n      // Set bitmap\n      this._bitmap = bitmap;\n\n      // Mark all new glyphs as in bitmap, excluding glyphs that came in after\n      // the bitmap was requested\n      for (let i = 0; i < glyphsMovingToBitmap.length; i++) {\n        const value = glyphsMovingToBitmap[i];\n        // It doesn't matter if the value was already evicted, it will be\n        // released from memory after this block if so.\n        value.inBitmap = true;\n      }\n    });\n    this._bitmapCommitTimeout = null;\n  }\n}\n\n// This is used for debugging the renderer, just swap out `new DynamicCharAtlas` with\n// `new NoneCharAtlas`.\nexport class NoneCharAtlas extends BaseCharAtlas {\n  constructor(document: Document, config: ICharAtlasConfig) {\n    super();\n  }\n\n  public draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean {\n    return false;\n  }\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface ILinkedListNode<T> {\n  prev: ILinkedListNode<T> | null;\n  next: ILinkedListNode<T> | null;\n  key: number | null;\n  value: T | null;\n}\n\nexport class LRUMap<T> {\n  private _map: { [key: number]: ILinkedListNode<T> } = {};\n  private _head: ILinkedListNode<T> | null = null;\n  private _tail: ILinkedListNode<T> | null = null;\n  private _nodePool: ILinkedListNode<T>[] = [];\n  public size: number = 0;\n\n  constructor(public capacity: number) { }\n\n  private _unlinkNode(node: ILinkedListNode<T>): void {\n    const prev = node.prev;\n    const next = node.next;\n    if (node === this._head) {\n      this._head = next;\n    }\n    if (node === this._tail) {\n      this._tail = prev;\n    }\n    if (prev !== null) {\n      prev.next = next;\n    }\n    if (next !== null) {\n      next.prev = prev;\n    }\n  }\n\n  private _appendNode(node: ILinkedListNode<T>): void {\n    const tail = this._tail;\n    if (tail !== null) {\n      tail.next = node;\n    }\n    node.prev = tail;\n    node.next = null;\n    this._tail = node;\n    if (this._head === null) {\n      this._head = node;\n    }\n  }\n\n  /**\n   * Preallocate a bunch of linked-list nodes. Allocating these nodes ahead of time means that\n   * they're more likely to live next to each other in memory, which seems to improve performance.\n   *\n   * Each empty object only consumes about 60 bytes of memory, so this is pretty cheap, even for\n   * large maps.\n   */\n  public prealloc(count: number): void {\n    const nodePool = this._nodePool;\n    for (let i = 0; i < count; i++) {\n      nodePool.push({\n        prev: null,\n        next: null,\n        key: null,\n        value: null\n      });\n    }\n  }\n\n  public get(key: number): T | null {\n    // This is unsafe: We're assuming our keyspace doesn't overlap with Object.prototype. However,\n    // it's faster than calling hasOwnProperty, and in our case, it would never overlap.\n    const node = this._map[key];\n    if (node !== undefined) {\n      this._unlinkNode(node);\n      this._appendNode(node);\n      return node.value;\n    }\n    return null;\n  }\n\n  /**\n   * Gets a value from a key without marking it as the most recently used item.\n   */\n  public peekValue(key: number): T | null {\n    const node = this._map[key];\n    if (node !== undefined) {\n      return node.value;\n    }\n    return null;\n  }\n\n  public peek(): T | null {\n    const head = this._head;\n    return head === null ? null : head.value;\n  }\n\n  public set(key: number, value: T): void {\n    // This is unsafe: See note above.\n    let node = this._map[key];\n    if (node !== undefined) {\n      // already exists, we just need to mutate it and move it to the end of the list\n      node = this._map[key];\n      this._unlinkNode(node);\n      node.value = value;\n    } else if (this.size >= this.capacity) {\n      // we're out of space: recycle the head node, move it to the tail\n      node = this._head!;\n      this._unlinkNode(node);\n      delete this._map[node.key!];\n      node.key = key;\n      node.value = value;\n      this._map[key] = node;\n    } else {\n      // make a new element\n      const nodePool = this._nodePool;\n      if (nodePool.length > 0) {\n        // use a preallocated node if we can\n        node = nodePool.pop()!;\n        node.key = key;\n        node.value = value;\n      } else {\n        node = {\n          prev: null,\n          next: null,\n          key,\n          value\n        };\n      }\n      this._map[key] = node;\n      this.size++;\n    }\n    this._appendNode(node);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderer, IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { BOLD_CLASS, ITALIC_CLASS, CURSOR_CLASS, CURSOR_STYLE_BLOCK_CLASS, CURSOR_BLINK_CLASS, CURSOR_STYLE_BAR_CLASS, CURSOR_STYLE_UNDERLINE_CLASS, DomRendererRowFactory } from 'browser/renderer/dom/DomRendererRowFactory';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { Disposable } from 'common/Lifecycle';\nimport { IColorSet, ILinkifierEvent, ILinkifier, ILinkifier2 } from 'browser/Types';\nimport { ICharSizeService } from 'browser/services/Services';\nimport { IOptionsService, IBufferService, IInstantiationService, IDecorationService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { color } from 'common/Color';\nimport { removeElementFromParent } from 'browser/Dom';\n\nconst TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\nconst ROW_CONTAINER_CLASS = 'xterm-rows';\nconst FG_CLASS_PREFIX = 'xterm-fg-';\nconst BG_CLASS_PREFIX = 'xterm-bg-';\nconst FOCUS_CLASS = 'xterm-focus';\nconst SELECTION_CLASS = 'xterm-selection';\n\nlet nextTerminalId = 1;\n\n/**\n * A fallback renderer for when canvas is slow. This is not meant to be\n * particularly fast or feature complete, more just stable and usable for when\n * canvas is not an option.\n */\nexport class DomRenderer extends Disposable implements IRenderer {\n  private _rowFactory: DomRendererRowFactory;\n  private _terminalClass: number = nextTerminalId++;\n\n  private _themeStyleElement!: HTMLStyleElement;\n  private _dimensionsStyleElement!: HTMLStyleElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[] = [];\n  private _selectionContainer: HTMLElement;\n\n  public dimensions: IRenderDimensions;\n\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return new EventEmitter<IRequestRedrawEvent>().event; }\n\n  constructor(\n    private _colors: IColorSet,\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _linkifier: ILinkifier,\n    private readonly _linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n    this._rowContainer.style.lineHeight = 'normal';\n    this._rowContainer.setAttribute('aria-hidden', 'true');\n    this._refreshRowElements(this._bufferService.cols, this._bufferService.rows);\n    this._selectionContainer = document.createElement('div');\n    this._selectionContainer.classList.add(SELECTION_CLASS);\n    this._selectionContainer.setAttribute('aria-hidden', 'true');\n\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._updateDimensions();\n    this._injectCss();\n\n    this._rowFactory = instantiationService.createInstance(DomRendererRowFactory, document, this._colors);\n\n    this._element.classList.add(TERMINAL_CLASS_PREFIX + this._terminalClass);\n    this._screenElement.appendChild(this._rowContainer);\n    this._screenElement.appendChild(this._selectionContainer);\n\n    this.register(this._linkifier.onShowLinkUnderline(e => this._onLinkHover(e)));\n    this.register(this._linkifier.onHideLinkUnderline(e => this._onLinkLeave(e)));\n\n    this.register(this._linkifier2.onShowLinkUnderline(e => this._onLinkHover(e)));\n    this.register(this._linkifier2.onHideLinkUnderline(e => this._onLinkLeave(e)));\n  }\n\n  public dispose(): void {\n    this._element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n\n    // Outside influences such as React unmounts may manipulate the DOM before our disposal.\n    // https://github.com/xtermjs/xterm.js/issues/2960\n    removeElementFromParent(this._rowContainer, this._selectionContainer, this._themeStyleElement, this._dimensionsStyleElement);\n\n    super.dispose();\n  }\n\n  private _updateDimensions(): void {\n    this.dimensions.scaledCharWidth = this._charSizeService.width * window.devicePixelRatio;\n    this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio);\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.scaledCharLeft = 0;\n    this.dimensions.scaledCharTop = 0;\n    this.dimensions.scaledCanvasWidth = this.dimensions.scaledCellWidth * this._bufferService.cols;\n    this.dimensions.scaledCanvasHeight = this.dimensions.scaledCellHeight * this._bufferService.rows;\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols;\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows;\n\n    for (const element of this._rowElements) {\n      element.style.width = `${this.dimensions.canvasWidth}px`;\n      element.style.height = `${this.dimensions.actualCellHeight}px`;\n      element.style.lineHeight = `${this.dimensions.actualCellHeight}px`;\n      // Make sure rows don't overflow onto following row\n      element.style.overflow = 'hidden';\n    }\n\n    if (!this._dimensionsStyleElement) {\n      this._dimensionsStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._dimensionsStyleElement);\n    }\n\n    const styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} span {` +\n      ` display: inline-block;` +\n      ` height: 100%;` +\n      ` vertical-align: top;` +\n      ` width: ${this.dimensions.actualCellWidth}px` +\n      `}`;\n\n    this._dimensionsStyleElement.textContent = styles;\n\n    this._selectionContainer.style.height = this._viewportElement.style.height;\n    this._screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    this._injectCss();\n  }\n\n  private _injectCss(): void {\n    if (!this._themeStyleElement) {\n      this._themeStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._themeStyleElement);\n    }\n\n    // Base CSS\n    let styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} {` +\n      ` color: ${this._colors.foreground.css};` +\n      ` font-family: ${this._optionsService.rawOptions.fontFamily};` +\n      ` font-size: ${this._optionsService.rawOptions.fontSize}px;` +\n      `}`;\n    // Text styles\n    styles +=\n      `${this._terminalSelector} span:not(.${BOLD_CLASS}) {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeight};` +\n      `}` +\n      `${this._terminalSelector} span.${BOLD_CLASS} {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeightBold};` +\n      `}` +\n      `${this._terminalSelector} span.${ITALIC_CLASS} {` +\n      ` font-style: italic;` +\n      `}`;\n    // Blink animation\n    styles +=\n      `@keyframes blink_box_shadow` + `_` + this._terminalClass + ` {` +\n      ` 50% {` +\n      `  box-shadow: none;` +\n      ` }` +\n      `}`;\n    styles +=\n      `@keyframes blink_block` + `_` + this._terminalClass + ` {` +\n      ` 0% {` +\n      `  background-color: ${this._colors.cursor.css};` +\n      `  color: ${this._colors.cursorAccent.css};` +\n      ` }` +\n      ` 50% {` +\n      `  background-color: ${this._colors.cursorAccent.css};` +\n      `  color: ${this._colors.cursor.css};` +\n      ` }` +\n      `}`;\n    // Cursor\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}:not(.${FOCUS_CLASS}) .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` outline: 1px solid ${this._colors.cursor.css};` +\n      ` outline-offset: -1px;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}:not(.${CURSOR_STYLE_BLOCK_CLASS}) {` +\n      ` animation: blink_box_shadow` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` animation: blink_block` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` background-color: ${this._colors.cursor.css};` +\n      ` color: ${this._colors.cursorAccent.css};` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BAR_CLASS} {` +\n      ` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${this._colors.cursor.css} inset;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_UNDERLINE_CLASS} {` +\n      ` box-shadow: 0 -1px 0 ${this._colors.cursor.css} inset;` +\n      `}`;\n    // Selection\n    styles +=\n      `${this._terminalSelector} .${SELECTION_CLASS} {` +\n      ` position: absolute;` +\n      ` top: 0;` +\n      ` left: 0;` +\n      ` z-index: 1;` +\n      ` pointer-events: none;` +\n      `}` +\n      `${this._terminalSelector} .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${this._colors.selectionOpaque.css};` +\n      `}`;\n    // Colors\n    this._colors.ansi.forEach((c, i) => {\n      styles +=\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i} { color: ${c.css}; }` +\n        `${this._terminalSelector} .${BG_CLASS_PREFIX}${i} { background-color: ${c.css}; }`;\n    });\n    styles +=\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { color: ${color.opaque(this._colors.background).css}; }` +\n      `${this._terminalSelector} .${BG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { background-color: ${this._colors.foreground.css}; }`;\n\n    this._themeStyleElement.textContent = styles;\n  }\n\n  public onDevicePixelRatioChange(): void {\n    this._updateDimensions();\n  }\n\n  private _refreshRowElements(cols: number, rows: number): void {\n    // Add missing elements\n    for (let i = this._rowElements.length; i <= rows; i++) {\n      const row = document.createElement('div');\n      this._rowContainer.appendChild(row);\n      this._rowElements.push(row);\n    }\n    // Remove excess elements\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    this._refreshRowElements(cols, rows);\n    this._updateDimensions();\n  }\n\n  public onCharSizeChanged(): void {\n    this._updateDimensions();\n  }\n\n  public onBlur(): void {\n    this._rowContainer.classList.remove(FOCUS_CLASS);\n  }\n\n  public onFocus(): void {\n    this._rowContainer.classList.add(FOCUS_CLASS);\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Remove all selections\n    while (this._selectionContainer.children.length) {\n      this._selectionContainer.removeChild(this._selectionContainer.children[0]);\n    }\n\n    this._rowFactory.onSelectionChanged(start, end, columnSelectMode);\n    this.renderRows(0, this._bufferService.rows - 1);\n\n    // Selection does not exist\n    if (!start || !end) {\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    // Create the selections\n    const documentFragment = document.createDocumentFragment();\n\n    if (columnSelectMode) {\n      const isXFlipped = start[0] > end[0];\n      documentFragment.appendChild(\n        this._createSelectionElement(viewportCappedStartRow, isXFlipped ? end[0] : start[0], isXFlipped ? start[0] : end[0], viewportCappedEndRow - viewportCappedStartRow + 1)\n      );\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const endCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n      // Draw middle rows\n      const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._bufferService.cols, middleRowsCount));\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewporttartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\n      }\n    }\n    this._selectionContainer.appendChild(documentFragment);\n  }\n\n  /**\n   * Creates a selection element at the specified position.\n   * @param row The row of the selection.\n   * @param colStart The start column.\n   * @param colEnd The end columns.\n   */\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\n    const element = document.createElement('div');\n    element.style.height = `${rowCount * this.dimensions.actualCellHeight}px`;\n    element.style.top = `${row * this.dimensions.actualCellHeight}px`;\n    element.style.left = `${colStart * this.dimensions.actualCellWidth}px`;\n    element.style.width = `${this.dimensions.actualCellWidth * (colEnd - colStart)}px`;\n    return element;\n  }\n\n  public onCursorMove(): void {\n    // No-op, the cursor is drawn when rows are drawn\n  }\n\n  public onOptionsChanged(): void {\n    // Force a refresh\n    this._updateDimensions();\n    this._injectCss();\n  }\n\n  public clear(): void {\n    for (const e of this._rowElements) {\n      e.innerText = '';\n    }\n  }\n\n  public renderRows(start: number, end: number): void {\n    const cursorAbsoluteY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n\n    for (let y = start; y <= end; y++) {\n      const rowElement = this._rowElements[y];\n      rowElement.innerText = '';\n      const row = y + this._bufferService.buffer.ydisp;\n      const lineData = this._bufferService.buffer.lines.get(row);\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      rowElement.appendChild(this._rowFactory.createRow(lineData!, row, row === cursorAbsoluteY, cursorStyle, cursorX, cursorBlink, this.dimensions.actualCellWidth, this._bufferService.cols));\n    }\n  }\n\n  private get _terminalSelector(): string {\n    return `.${TERMINAL_CLASS_PREFIX}${this._terminalClass}`;\n  }\n\n  private _onLinkHover(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n  }\n\n  private _onLinkLeave(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n  }\n\n  private _setCellUnderline(x: number, x2: number, y: number, y2: number, cols: number, enabled: boolean): void {\n    while (x !== x2 || y !== y2) {\n      const row = this._rowElements[y];\n      if (!row) {\n        return;\n      }\n      const span = row.children[x] as HTMLElement;\n      if (span) {\n        span.style.textDecoration = enabled ? 'underline' : 'none';\n      }\n      if (++x >= cols) {\n        x = 0;\n        y++;\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, IColor } from 'common/Types';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Attributes } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { color, rgba } from 'common/Color';\nimport { IColorSet } from 'browser/Types';\nimport { ICharacterJoinerService, ISelectionService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\nimport { excludeFromContrastRatioDemands } from 'browser/renderer/RendererUtils';\n\nexport const BOLD_CLASS = 'xterm-bold';\nexport const DIM_CLASS = 'xterm-dim';\nexport const ITALIC_CLASS = 'xterm-italic';\nexport const UNDERLINE_CLASS = 'xterm-underline';\nexport const STRIKETHROUGH_CLASS = 'xterm-strikethrough';\nexport const CURSOR_CLASS = 'xterm-cursor';\nexport const CURSOR_BLINK_CLASS = 'xterm-cursor-blink';\nexport const CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block';\nexport const CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar';\nexport const CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline';\n\nexport class DomRendererRowFactory {\n  private _workCell: CellData = new CellData();\n\n  private _selectionStart: [number, number] | undefined;\n  private _selectionEnd: [number, number] | undefined;\n  private _columnSelectMode: boolean = false;\n\n  constructor(\n    private readonly _document: Document,\n    private _colors: IColorSet,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IDecorationService private readonly _decorationService: IDecorationService\n  ) {\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public createRow(lineData: IBufferLine, row: number, isCursorRow: boolean, cursorStyle: string | undefined, cursorX: number, cursorBlink: boolean, cellWidth: number, cols: number): DocumentFragment {\n    const fragment = this._document.createDocumentFragment();\n\n    const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n    // Find the line length first, this prevents the need to output a bunch of\n    // empty cells at the end. This cannot easily be integrated into the main\n    // loop below because of the colCount feature (which can be removed after we\n    // properly support reflow and disallow data to go beyond the right-side of\n    // the viewport).\n    let lineLength = 0;\n    for (let x = Math.min(lineData.length, cols) - 1; x >= 0; x--) {\n      if (lineData.loadCell(x, this._workCell).getCode() !== NULL_CELL_CODE || (isCursorRow && x === cursorX)) {\n        lineLength = x + 1;\n        break;\n      }\n    }\n\n    for (let x = 0; x < lineLength; x++) {\n      lineData.loadCell(x, this._workCell);\n      let width = this._workCell.getWidth();\n\n      // The character to the left is a wide character, drawing is owned by the char at x-1\n      if (width === 0) {\n        continue;\n      }\n\n      // If true, indicates that the current character(s) to draw were joined.\n      let isJoined = false;\n      let lastCharX = x;\n\n      // Process any joined character ranges as needed. Because of how the\n      // ranges are produced, we know that they are valid for the characters\n      // and attributes of our input.\n      let cell = this._workCell;\n      if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n        isJoined = true;\n        const range = joinedRanges.shift()!;\n\n        // We already know the exact start and end column of the joined range,\n        // so we get the string and width representing it directly\n        cell = new JoinedCellData(\n          this._workCell,\n          lineData.translateToString(true, range[0], range[1]),\n          range[1] - range[0]\n        );\n\n        // Skip over the cells occupied by this range in the loop\n        lastCharX = range[1] - 1;\n\n        // Recalculate width\n        width = cell.getWidth();\n      }\n\n      const charElement = this._document.createElement('span');\n      if (width > 1) {\n        charElement.style.width = `${cellWidth * width}px`;\n      }\n\n      if (isJoined) {\n        // Ligatures in the DOM renderer must use display inline, as they may not show with\n        // inline-block if they are outside the bounds of the element\n        charElement.style.display = 'inline';\n\n        // The DOM renderer colors the background of the cursor but for ligatures all cells are\n        // joined. The workaround here is to show a cursor around the whole ligature so it shows up,\n        // the cursor looks the same when on any character of the ligature though\n        if (cursorX >= x && cursorX <= lastCharX) {\n          cursorX = x;\n        }\n      }\n\n      if (!this._coreService.isCursorHidden && isCursorRow && x === cursorX) {\n        charElement.classList.add(CURSOR_CLASS);\n\n        if (cursorBlink) {\n          charElement.classList.add(CURSOR_BLINK_CLASS);\n        }\n\n        switch (cursorStyle) {\n          case 'bar':\n            charElement.classList.add(CURSOR_STYLE_BAR_CLASS);\n            break;\n          case 'underline':\n            charElement.classList.add(CURSOR_STYLE_UNDERLINE_CLASS);\n            break;\n          default:\n            charElement.classList.add(CURSOR_STYLE_BLOCK_CLASS);\n            break;\n        }\n      }\n\n      if (cell.isBold()) {\n        charElement.classList.add(BOLD_CLASS);\n      }\n\n      if (cell.isItalic()) {\n        charElement.classList.add(ITALIC_CLASS);\n      }\n\n      if (cell.isDim()) {\n        charElement.classList.add(DIM_CLASS);\n      }\n\n      if (cell.isUnderline()) {\n        charElement.classList.add(UNDERLINE_CLASS);\n      }\n\n      if (cell.isInvisible()) {\n        charElement.textContent = WHITESPACE_CELL_CHAR;\n      } else {\n        charElement.textContent = cell.getChars() || WHITESPACE_CELL_CHAR;\n      }\n\n      if (cell.isStrikethrough()) {\n        charElement.classList.add(STRIKETHROUGH_CLASS);\n      }\n\n      let fg = cell.getFgColor();\n      let fgColorMode = cell.getFgColorMode();\n      let bg = cell.getBgColor();\n      let bgColorMode = cell.getBgColorMode();\n      const isInverse = !!cell.isInverse();\n      if (isInverse) {\n        const temp = fg;\n        fg = bg;\n        bg = temp;\n        const temp2 = fgColorMode;\n        fgColorMode = bgColorMode;\n        bgColorMode = temp2;\n      }\n\n      // Apply any decoration foreground/background overrides, this must happen after inverse has\n      // been applied\n      let bgOverride: IColor | undefined;\n      let fgOverride: IColor | undefined;\n      let isTop = false;\n      for (const d of this._decorationService.getDecorationsAtCell(x, row)) {\n        if (d.options.layer !== 'top' && isTop) {\n          continue;\n        }\n        if (d.backgroundColorRGB) {\n          bgColorMode = Attributes.CM_RGB;\n          bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          bgOverride = d.backgroundColorRGB;\n        }\n        if (d.foregroundColorRGB) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          fgOverride = d.foregroundColorRGB;\n        }\n        isTop = d.options.layer === 'top';\n      }\n\n      // Apply selection foreground if applicable\n      const isInSelection = this._isCellInSelection(x, row);\n      if (!isTop) {\n        if (this._colors.selectionForeground && isInSelection) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = this._colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n          fgOverride = this._colors.selectionForeground;\n        }\n      }\n\n      // If in the selection, force the element to be above the selection to improve contrast and\n      // support opaque selections\n      if (isInSelection) {\n        bgOverride = this._colors.selectionOpaque;\n        isTop = true;\n      }\n\n      // If it's a top decoration, render above the selection\n      if (isTop) {\n        charElement.classList.add(`xterm-decoration-top`);\n      }\n\n      // Background\n      let resolvedBg: IColor;\n      switch (bgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          resolvedBg = this._colors.ansi[bg];\n          charElement.classList.add(`xterm-bg-${bg}`);\n          break;\n        case Attributes.CM_RGB:\n          resolvedBg = rgba.toColor(bg >> 16, bg >> 8 & 0xFF, bg & 0xFF);\n          this._addStyle(charElement, `background-color:#${padStart((bg >>> 0).toString(16), '0', 6)}`);\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (isInverse) {\n            resolvedBg = this._colors.foreground;\n            charElement.classList.add(`xterm-bg-${INVERTED_DEFAULT_COLOR}`);\n          } else {\n            resolvedBg = this._colors.background;\n          }\n      }\n\n      // Foreground\n      switch (fgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          if (cell.isBold() && fg < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors) {\n            fg += 8;\n          }\n          if (!this._applyMinimumContrast(charElement, resolvedBg, this._colors.ansi[fg], cell, bgOverride, undefined)) {\n            charElement.classList.add(`xterm-fg-${fg}`);\n          }\n          break;\n        case Attributes.CM_RGB:\n          const color = rgba.toColor(\n            (fg >> 16) & 0xFF,\n            (fg >>  8) & 0xFF,\n            (fg      ) & 0xFF\n          );\n          if (!this._applyMinimumContrast(charElement, resolvedBg, color, cell, bgOverride, fgOverride)) {\n            this._addStyle(charElement, `color:#${padStart(fg.toString(16), '0', 6)}`);\n          }\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (!this._applyMinimumContrast(charElement, resolvedBg, this._colors.foreground, cell, bgOverride, undefined)) {\n            if (isInverse) {\n              charElement.classList.add(`xterm-fg-${INVERTED_DEFAULT_COLOR}`);\n            }\n          }\n      }\n\n      fragment.appendChild(charElement);\n\n      x = lastCharX;\n    }\n    return fragment;\n  }\n\n  private _applyMinimumContrast(element: HTMLElement, bg: IColor, fg: IColor, cell: ICellData, bgOverride: IColor | undefined, fgOverride: IColor | undefined): boolean {\n    if (this._optionsService.rawOptions.minimumContrastRatio === 1 || excludeFromContrastRatioDemands(cell.getCode())) {\n      return false;\n    }\n\n    // Try get from cache first, only use the cache when there are no decoration overrides\n    let adjustedColor: IColor | undefined | null = undefined;\n    if (!bgOverride && !fgOverride) {\n      adjustedColor = this._colors.contrastCache.getColor(bg.rgba, fg.rgba);\n    }\n\n    // Calculate and store in cache\n    if (adjustedColor === undefined) {\n      adjustedColor = color.ensureContrastRatio(bgOverride || bg, fgOverride || fg, this._optionsService.rawOptions.minimumContrastRatio);\n      this._colors.contrastCache.setColor((bgOverride || bg).rgba, (fgOverride || fg).rgba, adjustedColor ?? null);\n    }\n\n    if (adjustedColor) {\n      this._addStyle(element, `color:${adjustedColor.css}`);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _addStyle(element: HTMLElement, style: string): void {\n    element.setAttribute('style', `${element.getAttribute('style') || ''}${style};`);\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      if (start[0] <= end[0]) {\n        return x >= start[0] && y >= start[1] &&\n          x < end[0] && y <= end[1];\n      }\n      return x < start[0] && y >= start[1] &&\n        x >= end[0] && y <= end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\nfunction padStart(text: string, padChar: string, length: number): string {\n  while (text.length < length) {\n    text = padChar + text;\n  }\n  return text;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService } from 'common/services/Services';\n\n/**\n * Represents a selection within the buffer. This model only cares about column\n * and row coordinates, not wide characters.\n */\nexport class SelectionModel {\n  /**\n   * Whether select all is currently active.\n   */\n  public isSelectAllActive: boolean = false;\n\n  /**\n   * The minimal length of the selection from the start position. When double\n   * clicking on a word, the word will be selected which makes the selection\n   * start at the start of the word and makes this variable the length.\n   */\n  public selectionStartLength: number = 0;\n\n  /**\n   * The [x, y] position the selection starts at.\n   */\n  public selectionStart: [number, number] | undefined;\n\n  /**\n   * The [x, y] position the selection ends at.\n   */\n  public selectionEnd: [number, number] | undefined;\n\n  constructor(\n    private _bufferService: IBufferService\n  ) {\n  }\n\n  /**\n   * Clears the current selection.\n   */\n  public clearSelection(): void {\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n    this.isSelectAllActive = false;\n    this.selectionStartLength = 0;\n  }\n\n  /**\n   * The final selection start, taking into consideration select all.\n   */\n  public get finalSelectionStart(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [0, 0];\n    }\n\n    if (!this.selectionEnd || !this.selectionStart) {\n      return this.selectionStart;\n    }\n\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n  }\n\n  /**\n   * The final selection end, taking into consideration select all, double click\n   * word selection and triple click line selection.\n   */\n  public get finalSelectionEnd(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];\n    }\n\n    if (!this.selectionStart) {\n      return undefined;\n    }\n\n    // Use the selection start + length if the end doesn't exist or they're reversed\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n      const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n      if (startPlusLength > this._bufferService.cols) {\n        // Ensure the trailing EOL isn't included when the selection ends on the right edge\n        if (startPlusLength % this._bufferService.cols === 0) {\n          return [this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols) - 1];\n        }\n        return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n      }\n      return [startPlusLength, this.selectionStart[1]];\n    }\n\n    // Ensure the the word/line is selected after a double/triple click\n    if (this.selectionStartLength) {\n      // Select the larger of the two when start and end are on the same line\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\n        // Keep the whole wrapped word/line selected if the content wraps multiple lines\n        const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n        if (startPlusLength > this._bufferService.cols) {\n          return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n        }\n        return [Math.max(startPlusLength, this.selectionEnd[0]), this.selectionEnd[1]];\n      }\n    }\n    return this.selectionEnd;\n  }\n\n  /**\n   * Returns whether the selection start and end are reversed.\n   */\n  public areSelectionValuesReversed(): boolean {\n    const start = this.selectionStart;\n    const end = this.selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   * @return Whether a refresh is necessary.\n   */\n  public onTrim(amount: number): boolean {\n    // Adjust the selection position based on the trimmed amount.\n    if (this.selectionStart) {\n      this.selectionStart[1] -= amount;\n    }\n    if (this.selectionEnd) {\n      this.selectionEnd[1] -= amount;\n    }\n\n    // The selection has moved off the buffer, clear it.\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\n      this.clearSelection();\n      return true;\n    }\n\n    // If the selection start is trimmed, ensure the start column is 0.\n    if (this.selectionStart && this.selectionStart[1] < 0) {\n      this.selectionStart[1] = 0;\n    }\n    return false;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { IEvent, EventEmitter } from 'common/EventEmitter';\nimport { ICharSizeService } from 'browser/services/Services';\n\nexport class CharSizeService implements ICharSizeService {\n  public serviceBrand: undefined;\n\n  public width: number = 0;\n  public height: number = 0;\n  private _measureStrategy: IMeasureStrategy;\n\n  public get hasValidSize(): boolean { return this.width > 0 && this.height > 0; }\n\n  private _onCharSizeChange = new EventEmitter<void>();\n  public get onCharSizeChange(): IEvent<void> { return this._onCharSizeChange.event; }\n\n  constructor(\n    document: Document,\n    parentElement: HTMLElement,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    this._measureStrategy = new DomMeasureStrategy(document, parentElement, this._optionsService);\n  }\n\n  public measure(): void {\n    const result = this._measureStrategy.measure();\n    if (result.width !== this.width || result.height !== this.height) {\n      this.width = result.width;\n      this.height = result.height;\n      this._onCharSizeChange.fire();\n    }\n  }\n}\n\ninterface IMeasureStrategy {\n  measure(): IReadonlyMeasureResult;\n}\n\ninterface IReadonlyMeasureResult {\n  readonly width: number;\n  readonly height: number;\n}\n\ninterface IMeasureResult {\n  width: number;\n  height: number;\n}\n\n// TODO: For supporting browsers we should also provide a CanvasCharDimensionsProvider that uses ctx.measureText\nclass DomMeasureStrategy implements IMeasureStrategy {\n  private _result: IMeasureResult = { width: 0, height: 0 };\n  private _measureElement: HTMLElement;\n\n  constructor(\n    private _document: Document,\n    private _parentElement: HTMLElement,\n    private _optionsService: IOptionsService\n  ) {\n    this._measureElement = this._document.createElement('span');\n    this._measureElement.classList.add('xterm-char-measure-element');\n    this._measureElement.textContent = 'W';\n    this._measureElement.setAttribute('aria-hidden', 'true');\n    this._parentElement.appendChild(this._measureElement);\n  }\n\n  public measure(): IReadonlyMeasureResult {\n    this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n    this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;\n\n    // Note that this triggers a synchronous layout\n    const geometry = this._measureElement.getBoundingClientRect();\n\n    // If values are 0 then the element is likely currently display:none, in which case we should\n    // retain the previous value.\n    if (geometry.width !== 0 && geometry.height !== 0) {\n      this._result.width = geometry.width;\n      this._result.height = Math.ceil(geometry.height);\n    }\n\n    return this._result;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from './Services';\n\nexport class CoreBrowserService implements ICoreBrowserService {\n  public serviceBrand: undefined;\n\n  constructor(\n    private _textarea: HTMLTextAreaElement\n  ) {\n  }\n\n  public get isFocused(): boolean {\n    const docOrShadowRoot = this._textarea.getRootNode ? this._textarea.getRootNode() as Document | ShadowRoot : document;\n    return docOrShadowRoot.activeElement === this._textarea && document.hasFocus();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharSizeService, IRenderService, IMouseService } from './Services';\nimport { getCoords, getRawByteCoords } from 'browser/input/Mouse';\n\nexport class MouseService implements IMouseService {\n  public serviceBrand: undefined;\n\n  constructor(\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService\n  ) {\n  }\n\n  public getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined {\n    return getCoords(\n      window,\n      event,\n      element,\n      colCount,\n      rowCount,\n      this._charSizeService.hasValidSize,\n      this._renderService.dimensions.actualCellWidth,\n      this._renderService.dimensions.actualCellHeight,\n      isSelection\n    );\n  }\n\n  public getRawByteCoords(event: MouseEvent, element: HTMLElement, colCount: number, rowCount: number): { x: number, y: number } | undefined {\n    const coords = this.getCoords(event, element, colCount, rowCount);\n    return getRawByteCoords(coords);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderer, IRenderDimensions } from 'browser/renderer/Types';\nimport { RenderDebouncer } from 'browser/RenderDebouncer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IRenderDebouncer, IRenderDebouncerWithCallback } from 'browser/Types';\nimport { IOptionsService, IBufferService, IDecorationService } from 'common/services/Services';\nimport { ICharSizeService, IRenderService } from 'browser/services/Services';\n\ninterface ISelectionState {\n  start: [number, number] | undefined;\n  end: [number, number] | undefined;\n  columnSelectMode: boolean;\n}\n\nexport class RenderService extends Disposable implements IRenderService {\n  public serviceBrand: undefined;\n\n  private _renderDebouncer: IRenderDebouncerWithCallback;\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _isPaused: boolean = false;\n  private _needsFullRefresh: boolean = false;\n  private _isNextRenderRedrawOnly: boolean = true;\n  private _needsSelectionRefresh: boolean = false;\n  private _canvasWidth: number = 0;\n  private _canvasHeight: number = 0;\n  private _selectionState: ISelectionState = {\n    start: undefined,\n    end: undefined,\n    columnSelectMode: false\n  };\n\n  private _onDimensionsChange = new EventEmitter<IRenderDimensions>();\n  public get onDimensionsChange(): IEvent<IRenderDimensions> { return this._onDimensionsChange.event; }\n  private _onRenderedViewportChange = new EventEmitter<{ start: number, end: number }>();\n  public get onRenderedViewportChange(): IEvent<{ start: number, end: number }> { return this._onRenderedViewportChange.event; }\n  private _onRender = new EventEmitter<{ start: number, end: number }>();\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._onRender.event; }\n  private _onRefreshRequest = new EventEmitter<{ start: number, end: number }>();\n  public get onRefreshRequest(): IEvent<{ start: number, end: number }> { return this._onRefreshRequest.event; }\n\n  public get dimensions(): IRenderDimensions { return this._renderer.dimensions; }\n\n  constructor(\n    private _renderer: IRenderer,\n    private _rowCount: number,\n    screenElement: HTMLElement,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IDecorationService decorationService: IDecorationService,\n    @IBufferService bufferService: IBufferService\n  ) {\n    super();\n\n    this.register({ dispose: () => this._renderer.dispose() });\n\n    this._renderDebouncer = new RenderDebouncer((start, end) => this._renderRows(start, end));\n    this.register(this._renderDebouncer);\n\n    this._screenDprMonitor = new ScreenDprMonitor();\n    this._screenDprMonitor.setListener(() => this.onDevicePixelRatioChange());\n    this.register(this._screenDprMonitor);\n\n    this.register(bufferService.onResize(() => this._fullRefresh()));\n    this.register(bufferService.buffers.onBufferActivate(() => this._renderer?.clear()));\n    this.register(optionsService.onOptionChange(() => this._handleOptionsChanged()));\n    this.register(this._charSizeService.onCharSizeChange(() => this.onCharSizeChanged()));\n\n    // Do a full refresh whenever any decoration is added or removed. This may not actually result\n    // in changes but since decorations should be used sparingly or added/removed all in the same\n    // frame this should have minimal performance impact.\n    this.register(decorationService.onDecorationRegistered(() => this._fullRefresh()));\n    this.register(decorationService.onDecorationRemoved(() => this._fullRefresh()));\n\n    // No need to register this as renderer is explicitly disposed in RenderService.dispose\n    this._renderer.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // dprchange should handle this case, we need this as well for browsers that don't support the\n    // matchMedia query.\n    this.register(addDisposableDomListener(window, 'resize', () => this.onDevicePixelRatioChange()));\n\n    // Detect whether IntersectionObserver is detected and enable renderer pause\n    // and resume based on terminal visibility if so\n    if ('IntersectionObserver' in window) {\n      const observer = new IntersectionObserver(e => this._onIntersectionChange(e[e.length - 1]), { threshold: 0 });\n      observer.observe(screenElement);\n      this.register({ dispose: () => observer.disconnect() });\n    }\n  }\n\n  private _onIntersectionChange(entry: IntersectionObserverEntry): void {\n    this._isPaused = entry.isIntersecting === undefined ? (entry.intersectionRatio === 0) : !entry.isIntersecting;\n\n    // Terminal was hidden on open\n    if (!this._isPaused && !this._charSizeService.hasValidSize) {\n      this._charSizeService.measure();\n    }\n\n    if (!this._isPaused && this._needsFullRefresh) {\n      this.refreshRows(0, this._rowCount - 1);\n      this._needsFullRefresh = false;\n    }\n  }\n\n  public refreshRows(start: number, end: number, isRedrawOnly: boolean = false): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n      return;\n    }\n    if (!isRedrawOnly) {\n      this._isNextRenderRedrawOnly = false;\n    }\n    this._renderDebouncer.refresh(start, end, this._rowCount);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    this._renderer.renderRows(start, end);\n\n    // Update selection if needed\n    if (this._needsSelectionRefresh) {\n      this._renderer.onSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode);\n      this._needsSelectionRefresh = false;\n    }\n\n    // Fire render event only if it was not a redraw\n    if (!this._isNextRenderRedrawOnly) {\n      this._onRenderedViewportChange.fire({ start, end });\n    }\n    this._onRender.fire({ start, end });\n    this._isNextRenderRedrawOnly = true;\n  }\n\n  public resize(cols: number, rows: number): void {\n    this._rowCount = rows;\n    this._fireOnCanvasResize();\n  }\n\n  private _handleOptionsChanged(): void {\n    this._renderer.onOptionsChanged();\n    this.refreshRows(0, this._rowCount - 1);\n    this._fireOnCanvasResize();\n  }\n\n  private _fireOnCanvasResize(): void {\n    // Don't fire the event if the dimensions haven't changed\n    if (this._renderer.dimensions.canvasWidth === this._canvasWidth && this._renderer.dimensions.canvasHeight === this._canvasHeight) {\n      return;\n    }\n    this._onDimensionsChange.fire(this._renderer.dimensions);\n  }\n\n  public dispose(): void {\n    super.dispose();\n  }\n\n  public setRenderer(renderer: IRenderer): void {\n    // TODO: RenderService should be the only one to dispose the renderer\n    this._renderer.dispose();\n    this._renderer = renderer;\n    this._renderer.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // Force a refresh\n    this._needsSelectionRefresh = true;\n    this._fullRefresh();\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    return this._renderDebouncer.addRefreshCallback(callback);\n  }\n\n  private _fullRefresh(): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n    } else {\n      this.refreshRows(0, this._rowCount - 1);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearTextureAtlas?.();\n    this._fullRefresh();\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._renderer.setColors(colors);\n    this._fullRefresh();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // Force char size measurement as DomMeasureStrategy(getBoundingClientRect) is not stable\n    // when devicePixelRatio changes\n    this._charSizeService.measure();\n\n    this._renderer.onDevicePixelRatioChange();\n    this.refreshRows(0, this._rowCount - 1);\n  }\n\n  public onResize(cols: number, rows: number): void {\n    this._renderer.onResize(cols, rows);\n    this._fullRefresh();\n  }\n\n  // TODO: Is this useful when we have onResize?\n  public onCharSizeChanged(): void {\n    this._renderer.onCharSizeChanged();\n  }\n\n  public onBlur(): void {\n    this._renderer.onBlur();\n  }\n\n  public onFocus(): void {\n    this._renderer.onFocus();\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionState.start = start;\n    this._selectionState.end = end;\n    this._selectionState.columnSelectMode = columnSelectMode;\n    this._renderer.onSelectionChanged(start, end, columnSelectMode);\n  }\n\n  public onCursorMove(): void {\n    this._renderer.onCursorMove();\n  }\n\n  public clear(): void {\n    this._renderer.clear();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionRedrawRequestEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferLine, IDisposable } from 'common/Types';\nimport * as Browser from 'common/Platform';\nimport { SelectionModel } from 'browser/selection/SelectionModel';\nimport { CellData } from 'common/buffer/CellData';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IMouseService, ISelectionService, IRenderService } from 'browser/services/Services';\nimport { IBufferRange, ILinkifier2 } from 'browser/Types';\nimport { IBufferService, IOptionsService, ICoreService } from 'common/services/Services';\nimport { getCoordsRelativeToElement } from 'browser/input/Mouse';\nimport { moveToCellSequence } from 'browser/input/MoveToCell';\nimport { Disposable } from 'common/Lifecycle';\nimport { getRangeLength } from 'common/buffer/BufferRange';\n\n/**\n * The number of pixels the mouse needs to be above or below the viewport in\n * order to scroll at the maximum speed.\n */\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\n\n/**\n * The maximum scrolling speed\n */\nconst DRAG_SCROLL_MAX_SPEED = 15;\n\n/**\n * The number of milliseconds between drag scroll updates.\n */\nconst DRAG_SCROLL_INTERVAL = 50;\n\n/**\n * The maximum amount of time that can have elapsed for an alt click to move the\n * cursor.\n */\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\n\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\n\n/**\n * Represents a position of a word on a line.\n */\ninterface IWordPosition {\n  start: number;\n  length: number;\n}\n\n/**\n * A selection mode, this drives how the selection behaves on mouse move.\n */\nexport const enum SelectionMode {\n  NORMAL,\n  WORD,\n  LINE,\n  COLUMN\n}\n\n/**\n * A class that manages the selection of the terminal. With help from\n * SelectionModel, SelectionService handles with all logic associated with\n * dealing with the selection, including handling mouse interaction, wide\n * characters and fetching the actual text within the selection. Rendering is\n * not handled by the SelectionService but the onRedrawRequest event is fired\n * when the selection is ready to be redrawn (on an animation frame).\n */\nexport class SelectionService extends Disposable implements ISelectionService {\n  public serviceBrand: undefined;\n\n  protected _model: SelectionModel;\n\n  /**\n   * The amount to scroll every drag scroll update (depends on how far the mouse\n   * drag is above or below the terminal).\n   */\n  private _dragScrollAmount: number = 0;\n\n  /**\n   * The current selection mode.\n   */\n  protected _activeSelectionMode: SelectionMode;\n\n  /**\n   * A setInterval timer that is active while the mouse is down whose callback\n   * scrolls the viewport when necessary.\n   */\n  private _dragScrollIntervalTimer: number | undefined;\n\n  /**\n   * The animation frame ID used for refreshing the selection.\n   */\n  private _refreshAnimationFrame: number | undefined;\n\n  /**\n   * Whether selection is enabled.\n   */\n  private _enabled = true;\n\n  private _mouseMoveListener: EventListener;\n  private _mouseUpListener: EventListener;\n  private _trimListener: IDisposable;\n  private _workCell: CellData = new CellData();\n\n  private _mouseDownTimeStamp: number = 0;\n  private _oldHasSelection: boolean = false;\n  private _oldSelectionStart: [number, number] | undefined = undefined;\n  private _oldSelectionEnd: [number, number] | undefined = undefined;\n\n  private _onLinuxMouseSelection = this.register(new EventEmitter<string>());\n  public get onLinuxMouseSelection(): IEvent<string> { return this._onLinuxMouseSelection.event; }\n  private _onRedrawRequest = this.register(new EventEmitter<ISelectionRedrawRequestEvent>());\n  public get onRequestRedraw(): IEvent<ISelectionRedrawRequestEvent> { return this._onRedrawRequest.event; }\n  private _onSelectionChange = this.register(new EventEmitter<void>());\n  public get onSelectionChange(): IEvent<void> { return this._onSelectionChange.event; }\n  private _onRequestScrollLines = this.register(new EventEmitter<ISelectionRequestScrollLinesEvent>());\n  public get onRequestScrollLines(): IEvent<ISelectionRequestScrollLinesEvent> { return this._onRequestScrollLines.event; }\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _linkifier: ILinkifier2,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    // Init listeners\n    this._mouseMoveListener = event => this._onMouseMove(event as MouseEvent);\n    this._mouseUpListener = event => this._onMouseUp(event as MouseEvent);\n    this._coreService.onUserInput(() => {\n      if (this.hasSelection) {\n        this.clearSelection();\n      }\n    });\n    this._trimListener = this._bufferService.buffer.lines.onTrim(amount => this._onTrim(amount));\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._onBufferActivate(e)));\n\n    this.enable();\n\n    this._model = new SelectionModel(this._bufferService);\n    this._activeSelectionMode = SelectionMode.NORMAL;\n  }\n\n  public dispose(): void {\n    this._removeMouseDownListeners();\n  }\n\n  public reset(): void {\n    this.clearSelection();\n  }\n\n  /**\n   * Disables the selection manager. This is useful for when terminal mouse\n   * are enabled.\n   */\n  public disable(): void {\n    this.clearSelection();\n    this._enabled = false;\n  }\n\n  /**\n   * Enable the selection manager.\n   */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  public get selectionStart(): [number, number] | undefined { return this._model.finalSelectionStart; }\n  public get selectionEnd(): [number, number] | undefined { return this._model.finalSelectionEnd; }\n\n  /**\n   * Gets whether there is an active text selection.\n   */\n  public get hasSelection(): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[0] !== end[0] || start[1] !== end[1];\n  }\n\n  /**\n   * Gets the text currently selected.\n   */\n  public get selectionText(): string {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return '';\n    }\n\n    const buffer = this._bufferService.buffer;\n    const result: string[] = [];\n\n    if (this._activeSelectionMode === SelectionMode.COLUMN) {\n      // Ignore zero width selections\n      if (start[0] === end[0]) {\n        return '';\n      }\n\n      // For column selection it's not enough to rely on final selection's swapping of reversed\n      // values, it also needs the x coordinates to swap independently of the y coordinate is needed\n      const startCol = start[0] < end[0] ? start[0] : end[0];\n      const endCol = start[0] < end[0] ? end[0] : start[0];\n      for (let i = start[1]; i <= end[1]; i++) {\n        const lineText = buffer.translateBufferLineToString(i, true, startCol, endCol);\n        result.push(lineText);\n      }\n    } else {\n      // Get first row\n      const startRowEndCol = start[1] === end[1] ? end[0] : undefined;\n      result.push(buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n\n      // Get middle rows\n      for (let i = start[1] + 1; i <= end[1] - 1; i++) {\n        const bufferLine = buffer.lines.get(i);\n        const lineText = buffer.translateBufferLineToString(i, true);\n        if (bufferLine?.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      // Get final row\n      if (start[1] !== end[1]) {\n        const bufferLine = buffer.lines.get(end[1]);\n        const lineText = buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n        if (bufferLine && bufferLine!.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n    }\n\n    // Format string by replacing non-breaking space chars with regular spaces\n    // and joining the array into a multi-line string.\n    const formattedResult = result.map(line => {\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n    }).join(Browser.isWindows ? '\\r\\n' : '\\n');\n\n    return formattedResult;\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Queues a refresh, redrawing the selection on the next opportunity.\n   * @param isLinuxMouseSelection Whether the selection should be registered as a new\n   * selection on Linux.\n   */\n  public refresh(isLinuxMouseSelection?: boolean): void {\n    // Queue the refresh for the renderer\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = window.requestAnimationFrame(() => this._refresh());\n    }\n\n    // If the platform is Linux and the refresh call comes from a mouse event,\n    // we need to update the selection for middle click to paste selection.\n    if (Browser.isLinux && isLinuxMouseSelection) {\n      const selectionText = this.selectionText;\n      if (selectionText.length) {\n        this._onLinuxMouseSelection.fire(this.selectionText);\n      }\n    }\n  }\n\n  /**\n   * Fires the refresh event, causing consumers to pick it up and redraw the\n   * selection state.\n   */\n  private _refresh(): void {\n    this._refreshAnimationFrame = undefined;\n    this._onRedrawRequest.fire({\n      start: this._model.finalSelectionStart,\n      end: this._model.finalSelectionEnd,\n      columnSelectMode: this._activeSelectionMode === SelectionMode.COLUMN\n    });\n  }\n\n  /**\n   * Checks if the current click was inside the current selection\n   * @param event The mouse event\n   */\n  private _isClickInSelection(event: MouseEvent): boolean {\n    const coords = this._getMouseBufferCoords(event);\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n\n    if (!start || !end || !coords) {\n      return false;\n    }\n\n    return this._areCoordsInSelection(coords, start, end);\n  }\n\n  public isCellInSelection(x: number, y: number): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return this._areCoordsInSelection([x, y], start, end);\n  }\n\n  protected _areCoordsInSelection(coords: [number, number], start: [number, number], end: [number, number]): boolean {\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n  }\n\n  /**\n   * Selects word at the current mouse event coordinates.\n   * @param event The mouse event.\n   */\n  private _selectWordAtCursor(event: MouseEvent, allowWhitespaceOnlySelection: boolean): boolean {\n    // Check if there is a link under the cursor first and select that if so\n    const range = this._linkifier.currentLink?.link?.range;\n    if (range) {\n      this._model.selectionStart = [range.start.x - 1, range.start.y - 1];\n      this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._selectWordAt(coords, allowWhitespaceOnlySelection);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._model.isSelectAllActive = true;\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._model.clearSelection();\n    start = Math.max(start, 0);\n    end = Math.min(end, this._bufferService.buffer.lines.length - 1);\n    this._model.selectionStart = [0, start];\n    this._model.selectionEnd = [this._bufferService.cols, end];\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   */\n  private _onTrim(amount: number): void {\n    const needsRefresh = this._model.onTrim(amount);\n    if (needsRefresh) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\n   * @param event The mouse event.\n   */\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] | undefined {\n    const coords = this._mouseService.getCoords(event, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);\n    if (!coords) {\n      return undefined;\n    }\n\n    // Convert to 0-based\n    coords[0]--;\n    coords[1]--;\n\n    // Convert viewport coords to buffer coords\n    coords[1] += this._bufferService.buffer.ydisp;\n    return coords;\n  }\n\n  /**\n   * Gets the amount the viewport should be scrolled based on how far out of the\n   * terminal the mouse is.\n   * @param event The mouse event.\n   */\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\n    let offset = getCoordsRelativeToElement(window, event, this._screenElement)[1];\n    const terminalHeight = this._renderService.dimensions.canvasHeight;\n    if (offset >= 0 && offset <= terminalHeight) {\n      return 0;\n    }\n    if (offset > terminalHeight) {\n      offset -= terminalHeight;\n    }\n\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n  }\n\n  /**\n   * Returns whether the selection manager should force selection, regardless of\n   * whether the terminal is in mouse events mode.\n   * @param event The mouse event.\n   */\n  public shouldForceSelection(event: MouseEvent): boolean {\n    if (Browser.isMac) {\n      return event.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection;\n    }\n\n    return event.shiftKey;\n  }\n\n  /**\n   * Handles te mousedown event, setting up for a new selection.\n   * @param event The mousedown event.\n   */\n  public onMouseDown(event: MouseEvent): void {\n    this._mouseDownTimeStamp = event.timeStamp;\n    // If we have selection, we want the context menu on right click even if the\n    // terminal is in mouse mode.\n    if (event.button === 2 && this.hasSelection) {\n      return;\n    }\n\n    // Only action the primary button\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Allow selection when using a specific modifier key, even when disabled\n    if (!this._enabled) {\n      if (!this.shouldForceSelection(event)) {\n        return;\n      }\n\n      // Don't send the mouse down event to the current process, we want to select\n      event.stopPropagation();\n    }\n\n    // Tell the browser not to start a regular selection\n    event.preventDefault();\n\n    // Reset drag scroll state\n    this._dragScrollAmount = 0;\n\n    if (this._enabled && event.shiftKey) {\n      this._onIncrementalClick(event);\n    } else {\n      if (event.detail === 1) {\n        this._onSingleClick(event);\n      } else if (event.detail === 2) {\n        this._onDoubleClick(event);\n      } else if (event.detail === 3) {\n        this._onTripleClick(event);\n      }\n    }\n\n    this._addMouseDownListeners();\n    this.refresh(true);\n  }\n\n  /**\n   * Adds listeners when mousedown is triggered.\n   */\n  private _addMouseDownListeners(): void {\n    // Listen on the document so that dragging outside of viewport works\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n    }\n    this._dragScrollIntervalTimer = window.setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\n  }\n\n  /**\n   * Removes the listeners that are registered when mousedown is triggered.\n   */\n  private _removeMouseDownListeners(): void {\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n    }\n    clearInterval(this._dragScrollIntervalTimer);\n    this._dragScrollIntervalTimer = undefined;\n  }\n\n  /**\n   * Performs an incremental click, setting the selection end position to the mouse\n   * position.\n   * @param event The mouse event.\n   */\n  private _onIncrementalClick(event: MouseEvent): void {\n    if (this._model.selectionStart) {\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\n    }\n  }\n\n  /**\n   * Performs a single click, resetting relevant state and setting the selection\n   * start position.\n   * @param event The mouse event.\n   */\n  private _onSingleClick(event: MouseEvent): void {\n    this._model.selectionStartLength = 0;\n    this._model.isSelectAllActive = false;\n    this._activeSelectionMode = this.shouldColumnSelect(event) ? SelectionMode.COLUMN : SelectionMode.NORMAL;\n\n    // Initialize the new selection\n    this._model.selectionStart = this._getMouseBufferCoords(event);\n    if (!this._model.selectionStart) {\n      return;\n    }\n    this._model.selectionEnd = undefined;\n\n    // Ensure the line exists\n    const line = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);\n    if (!line) {\n      return;\n    }\n\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\n    if (line.length === this._model.selectionStart[0]) {\n      return;\n    }\n\n    // If the mouse is over the second half of a wide character, adjust the\n    // selection to cover the whole character\n    if (line.hasWidth(this._model.selectionStart[0]) === 0) {\n      this._model.selectionStart[0]++;\n    }\n  }\n\n  /**\n   * Performs a double click, selecting the current word.\n   * @param event The mouse event.\n   */\n  private _onDoubleClick(event: MouseEvent): void {\n    if (this._selectWordAtCursor(event, true)) {\n      this._activeSelectionMode = SelectionMode.WORD;\n    }\n  }\n\n  /**\n   * Performs a triple click, selecting the current line and activating line\n   * select mode.\n   * @param event The mouse event.\n   */\n  private _onTripleClick(event: MouseEvent): void {\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.LINE;\n      this._selectLineAt(coords[1]);\n    }\n  }\n\n  /**\n   * Returns whether the selection manager should operate in column select mode\n   * @param event the mouse or keyboard event\n   */\n  public shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean {\n    return event.altKey && !(Browser.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);\n  }\n\n  /**\n   * Handles the mousemove event when the mouse button is down, recording the\n   * end of the selection and refreshing the selection.\n   * @param event The mousemove event.\n   */\n  private _onMouseMove(event: MouseEvent): void {\n    // If the mousemove listener is active it means that a selection is\n    // currently being made, we should stop propagation to prevent mouse events\n    // to be sent to the pty.\n    event.stopImmediatePropagation();\n\n    // Do nothing if there is no selection start, this can happen if the first\n    // click in the terminal is an incremental click\n    if (!this._model.selectionStart) {\n      return;\n    }\n\n    // Record the previous position so we know whether to redraw the selection\n    // at the end.\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n\n    // Set the initial selection end based on the mouse coordinates\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\n    if (!this._model.selectionEnd) {\n      this.refresh(true);\n      return;\n    }\n\n    // Select the entire line if line select mode is active.\n    if (this._activeSelectionMode === SelectionMode.LINE) {\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n        this._model.selectionEnd[0] = 0;\n      } else {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      }\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\n      this._selectToWordAt(this._model.selectionEnd);\n    }\n\n    // Determine the amount of scrolling that will happen.\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n\n    // If the cursor was above or below the viewport, make sure it's at the\n    // start or end of the viewport respectively. This should only happen when\n    // NOT in column select mode.\n    if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n      if (this._dragScrollAmount > 0) {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      } else if (this._dragScrollAmount < 0) {\n        this._model.selectionEnd[0] = 0;\n      }\n    }\n\n    // If the character is a wide character include the cell to the right in the\n    // selection. Note that selections at the very end of the line will never\n    // have a character.\n    const buffer = this._bufferService.buffer;\n    if (this._model.selectionEnd[1] < buffer.lines.length) {\n      const line = buffer.lines.get(this._model.selectionEnd[1]);\n      if (line && line.hasWidth(this._model.selectionEnd[0]) === 0) {\n        this._model.selectionEnd[0]++;\n      }\n    }\n\n    // Only draw here if the selection changes.\n    if (!previousSelectionEnd ||\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n      this.refresh(true);\n    }\n  }\n\n  /**\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\n   * scrolling of the viewport.\n   */\n  private _dragScroll(): void {\n    if (!this._model.selectionEnd || !this._model.selectionStart) {\n      return;\n    }\n    if (this._dragScrollAmount) {\n      this._onRequestScrollLines.fire({ amount: this._dragScrollAmount, suppressScrollEvent: false });\n      // Re-evaluate selection\n      // If the cursor was above or below the viewport, make sure it's at the\n      // start or end of the viewport respectively. This should only happen when\n      // NOT in column select mode.\n      const buffer = this._bufferService.buffer;\n      if (this._dragScrollAmount > 0) {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = this._bufferService.cols;\n        }\n        this._model.selectionEnd[1] = Math.min(buffer.ydisp + this._bufferService.rows, buffer.lines.length - 1);\n      } else {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = 0;\n        }\n        this._model.selectionEnd[1] = buffer.ydisp;\n      }\n      this.refresh();\n    }\n  }\n\n  /**\n   * Handles the mouseup event, removing the mousedown listeners.\n   * @param event The mouseup event.\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    const timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n\n    this._removeMouseDownListeners();\n\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME && event.altKey && this._optionsService.getOption('altClickMovesCursor')) {\n      if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {\n        const coordinates = this._mouseService.getCoords(\n          event,\n          this._element,\n          this._bufferService.cols,\n          this._bufferService.rows,\n          false\n        );\n        if (coordinates && coordinates[0] !== undefined && coordinates[1] !== undefined) {\n          const sequence = moveToCellSequence(coordinates[0] - 1, coordinates[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);\n          this._coreService.triggerDataEvent(sequence, true);\n        }\n      }\n    } else {\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  private _fireEventIfSelectionChanged(): void {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    const hasSelection = !!start && !!end && (start[0] !== end[0] || start[1] !== end[1]);\n\n    if (!hasSelection) {\n      if (this._oldHasSelection) {\n        this._fireOnSelectionChange(start, end, hasSelection);\n      }\n      return;\n    }\n\n    // Sanity check, these should not be undefined as there is a selection\n    if (!start || !end) {\n      return;\n    }\n\n    if (!this._oldSelectionStart || !this._oldSelectionEnd || (\n      start[0] !== this._oldSelectionStart[0] || start[1] !== this._oldSelectionStart[1] ||\n      end[0] !== this._oldSelectionEnd[0] || end[1] !== this._oldSelectionEnd[1])) {\n\n      this._fireOnSelectionChange(start, end, hasSelection);\n    }\n  }\n\n  private _fireOnSelectionChange(start: [number, number] | undefined, end: [number, number] | undefined, hasSelection: boolean): void {\n    this._oldSelectionStart = start;\n    this._oldSelectionEnd = end;\n    this._oldHasSelection = hasSelection;\n    this._onSelectionChange.fire();\n  }\n\n  private _onBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\n    this.clearSelection();\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\n    // reverseIndex) and delete in a splice is only ever used when the same\n    // number of elements was just added. Given this is could actually be\n    // beneficial to leave the selection as is for these cases.\n    this._trimListener.dispose();\n    this._trimListener = e.activeBuffer.lines.onTrim(amount => this._onTrim(amount));\n  }\n\n  /**\n   * Converts a viewport column to the character index on the buffer line, the\n   * latter takes into account wide characters.\n   * @param coords The coordinates to find the 2 index for.\n   */\n  private _convertViewportColToCharacterIndex(bufferLine: IBufferLine, coords: [number, number]): number {\n    let charIndex = coords[0];\n    for (let i = 0; coords[0] >= i; i++) {\n      const length = bufferLine.loadCell(i, this._workCell).getChars().length;\n      if (this._workCell.getWidth() === 0) {\n        // Wide characters aren't included in the line string so decrement the\n        // index so the index is back on the wide character.\n        charIndex--;\n      } else if (length > 1 && coords[0] !== i) {\n        // Emojis take up multiple characters, so adjust accordingly. For these\n        // we don't want ot include the character at the column as we're\n        // returning the start index in the string, not the end index.\n        charIndex += length - 1;\n      }\n    }\n    return charIndex;\n  }\n\n  public setSelection(col: number, row: number, length: number): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this._model.selectionStart = [col, row];\n    this._model.selectionStartLength = length;\n    this.refresh();\n    this._fireEventIfSelectionChanged();\n  }\n\n  public rightClickSelect(ev: MouseEvent): void {\n    if (!this._isClickInSelection(ev)) {\n      if (this._selectWordAtCursor(ev, false)) {\n        this.refresh(true);\n      }\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  /**\n   * Gets positional information for the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean, followWrappedLinesAbove: boolean = true, followWrappedLinesBelow: boolean = true): IWordPosition | undefined {\n    // Ensure coords are within viewport (eg. not within scroll bar)\n    if (coords[0] >= this._bufferService.cols) {\n      return undefined;\n    }\n\n    const buffer = this._bufferService.buffer;\n    const bufferLine = buffer.lines.get(coords[1]);\n    if (!bufferLine) {\n      return undefined;\n    }\n\n    const line = buffer.translateBufferLineToString(coords[1], false);\n\n    // Get actual index, taking into consideration wide characters\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\n    let endIndex = startIndex;\n\n    // Record offset to be used later\n    const charOffset = coords[0] - startIndex;\n    let leftWideCharCount = 0;\n    let rightWideCharCount = 0;\n    let leftLongCharOffset = 0;\n    let rightLongCharOffset = 0;\n\n    if (line.charAt(startIndex) === ' ') {\n      // Expand until non-whitespace is hit\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n        startIndex--;\n      }\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n        endIndex++;\n      }\n    } else {\n      // Expand until whitespace is hit. This algorithm works by scanning left\n      // and right from the starting position, keeping both the index format\n      // (line) and the column format (bufferLine) in sync. When a wide\n      // character is hit, it is recorded and the column index is adjusted.\n      let startCol = coords[0];\n      let endCol = coords[0];\n\n      // Consider the initial position, skip it and increment the wide char\n      // variable\n      if (bufferLine.getWidth(startCol) === 0) {\n        leftWideCharCount++;\n        startCol--;\n      }\n      if (bufferLine.getWidth(endCol) === 2) {\n        rightWideCharCount++;\n        endCol++;\n      }\n\n      // Adjust the end index for characters whose length are > 1 (emojis)\n      const length = bufferLine.getString(endCol).length;\n      if (length > 1) {\n        rightLongCharOffset += length - 1;\n        endIndex += length - 1;\n      }\n\n      // Expand the string in both directions until a space is hit\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.loadCell(startCol - 1, this._workCell))) {\n        bufferLine.loadCell(startCol - 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 0) {\n          // If the next character is a wide char, record it and skip the column\n          leftWideCharCount++;\n          startCol--;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          leftLongCharOffset += length - 1;\n          startIndex -= length - 1;\n        }\n        startIndex--;\n        startCol--;\n      }\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.loadCell(endCol + 1, this._workCell))) {\n        bufferLine.loadCell(endCol + 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 2) {\n          // If the next character is a wide char, record it and skip the column\n          rightWideCharCount++;\n          endCol++;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          rightLongCharOffset += length - 1;\n          endIndex += length - 1;\n        }\n        endIndex++;\n        endCol++;\n      }\n    }\n\n    // Incremenet the end index so it is at the start of the next character\n    endIndex++;\n\n    // Calculate the start _column_, converting the the string indexes back to\n    // column coordinates.\n    let start =\n        startIndex // The index of the selection's start char in the line string\n        + charOffset // The difference between the initial char's column and index\n        - leftWideCharCount // The number of wide chars left of the initial char\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n\n    // Calculate the length in _columns_, converting the the string indexes back\n    // to column coordinates.\n    let length = Math.min(this._bufferService.cols, // Disallow lengths larger than the terminal cols\n      endIndex // The index of the selection's end char in the line string\n      - startIndex // The index of the selection's start char in the line string\n      + leftWideCharCount // The number of wide chars left of the initial char\n      + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\n      - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n      - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\n\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n      return undefined;\n    }\n\n    // Recurse upwards if the line is wrapped and the word wraps to the above line\n    if (followWrappedLinesAbove) {\n      if (start === 0 && bufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n        const previousBufferLine = buffer.lines.get(coords[1] - 1);\n        if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n          const previousLineWordPosition = this._getWordAt([this._bufferService.cols - 1, coords[1] - 1], false, true, false);\n          if (previousLineWordPosition) {\n            const offset = this._bufferService.cols - previousLineWordPosition.start;\n            start -= offset;\n            length += offset;\n          }\n        }\n      }\n    }\n\n    // Recurse downwards if the line is wrapped and the word wraps to the next line\n    if (followWrappedLinesBelow) {\n      if (start + length === this._bufferService.cols && bufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n        const nextBufferLine = buffer.lines.get(coords[1] + 1);\n        if (nextBufferLine?.isWrapped && nextBufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n          const nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n          if (nextLineWordPosition) {\n            length += nextLineWordPosition.length;\n          }\n        }\n      }\n    }\n\n    return { start, length };\n  }\n\n  /**\n   * Selects the word at the coordinates specified.\n   * @param coords The coordinates to get the word at.\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\n   */\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n    if (wordPosition) {\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        coords[1]--;\n      }\n      this._model.selectionStart = [wordPosition.start, coords[1]];\n      this._model.selectionStartLength = wordPosition.length;\n    }\n  }\n\n  /**\n   * Sets the selection end to the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _selectToWordAt(coords: [number, number]): void {\n    const wordPosition = this._getWordAt(coords, true);\n    if (wordPosition) {\n      let endRow = coords[1];\n\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        endRow--;\n      }\n\n      // Adjust wrapped length value, this only needs to happen when values are reversed as in that\n      // case we're interested in the start of the word, not the end\n      if (!this._model.areSelectionValuesReversed()) {\n        while (wordPosition.start + wordPosition.length > this._bufferService.cols) {\n          wordPosition.length -= this._bufferService.cols;\n          endRow++;\n        }\n      }\n\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n    }\n  }\n\n  /**\n   * Gets whether the character is considered a word separator by the select\n   * word logic.\n   * @param char The character to check.\n   */\n  private _isCharWordSeparator(cell: CellData): boolean {\n    // Zero width characters are never separators as they are always to the\n    // right of wide characters\n    if (cell.getWidth() === 0) {\n      return false;\n    }\n    return this._optionsService.rawOptions.wordSeparator.indexOf(cell.getChars()) >= 0;\n  }\n\n  /**\n   * Selects the line specified.\n   * @param line The line index.\n   */\n  protected _selectLineAt(line: number): void {\n    const wrappedRange = this._bufferService.buffer.getWrappedRangeForLine(line);\n    const range: IBufferRange = {\n      start: { x: 0, y: wrappedRange.first },\n      end: { x: this._bufferService.cols - 1, y: wrappedRange.last }\n    };\n    this._model.selectionStart = [0, wrappedRange.first];\n    this._model.selectionEnd = undefined;\n    this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/Types';\nimport { IColorSet, IRenderDebouncer } from 'browser/Types';\nimport { ISelectionRedrawRequestEvent as ISelectionRequestRedrawEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDisposable } from 'common/Types';\nimport { IDecorationOptions, IDecoration } from 'xterm';\nimport { IBufferService } from 'common/services/Services';\n\nexport const ICharSizeService = createDecorator<ICharSizeService>('CharSizeService');\nexport interface ICharSizeService {\n  serviceBrand: undefined;\n\n  readonly width: number;\n  readonly height: number;\n  readonly hasValidSize: boolean;\n\n  readonly onCharSizeChange: IEvent<void>;\n\n  measure(): void;\n}\n\nexport const ICoreBrowserService = createDecorator<ICoreBrowserService>('CoreBrowserService');\nexport interface ICoreBrowserService {\n  serviceBrand: undefined;\n\n  readonly isFocused: boolean;\n}\n\nexport const IMouseService = createDecorator<IMouseService>('MouseService');\nexport interface IMouseService {\n  serviceBrand: undefined;\n\n  getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined;\n  getRawByteCoords(event: MouseEvent, element: HTMLElement, colCount: number, rowCount: number): { x: number, y: number } | undefined;\n}\n\nexport const IRenderService = createDecorator<IRenderService>('RenderService');\nexport interface IRenderService extends IDisposable {\n  serviceBrand: undefined;\n\n  onDimensionsChange: IEvent<IRenderDimensions>;\n  /**\n   * Fires when buffer changes are rendered. This does not fire when only cursor\n   * or selections are rendered.\n   */\n  onRenderedViewportChange: IEvent<{ start: number, end: number }>;\n  /**\n   * Fires on render\n   */\n  onRender: IEvent<{ start: number, end: number }>;\n  onRefreshRequest: IEvent<{ start: number, end: number }>;\n\n  dimensions: IRenderDimensions;\n\n  addRefreshCallback(callback: FrameRequestCallback): number;\n\n  refreshRows(start: number, end: number): void;\n  clearTextureAtlas(): void;\n  resize(cols: number, rows: number): void;\n  setRenderer(renderer: IRenderer): void;\n  setColors(colors: IColorSet): void;\n  onDevicePixelRatioChange(): void;\n  onResize(cols: number, rows: number): void;\n  // TODO: Is this useful when we have onResize?\n  onCharSizeChanged(): void;\n  onBlur(): void;\n  onFocus(): void;\n  onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void;\n  onCursorMove(): void;\n  clear(): void;\n}\n\nexport const ISelectionService = createDecorator<ISelectionService>('SelectionService');\nexport interface ISelectionService {\n  serviceBrand: undefined;\n\n  readonly selectionText: string;\n  readonly hasSelection: boolean;\n  readonly selectionStart: [number, number] | undefined;\n  readonly selectionEnd: [number, number] | undefined;\n\n  readonly onLinuxMouseSelection: IEvent<string>;\n  readonly onRequestRedraw: IEvent<ISelectionRequestRedrawEvent>;\n  readonly onRequestScrollLines: IEvent<ISelectionRequestScrollLinesEvent>;\n  readonly onSelectionChange: IEvent<void>;\n\n  disable(): void;\n  enable(): void;\n  reset(): void;\n  setSelection(row: number, col: number, length: number): void;\n  selectAll(): void;\n  selectLines(start: number, end: number): void;\n  clearSelection(): void;\n  rightClickSelect(event: MouseEvent): void;\n  shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean;\n  shouldForceSelection(event: MouseEvent): boolean;\n  refresh(isLinuxMouseSelection?: boolean): void;\n  onMouseDown(event: MouseEvent): void;\n  isCellInSelection(x: number, y: number): boolean;\n}\n\nexport const ISoundService = createDecorator<ISoundService>('SoundService');\nexport interface ISoundService {\n  serviceBrand: undefined;\n\n  playBellSound(): void;\n}\n\n\nexport const ICharacterJoinerService = createDecorator<ICharacterJoinerService>('CharacterJoinerService');\nexport interface ICharacterJoinerService {\n  serviceBrand: undefined;\n\n  register(handler: (text: string) => [number, number][]): number;\n  deregister(joinerId: number): boolean;\n  getJoinedCharacters(row: number): [number, number][];\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { ISoundService } from 'browser/services/Services';\n\nexport class SoundService implements ISoundService {\n  public serviceBrand: undefined;\n\n  private static _audioContext: AudioContext;\n\n  public static get audioContext(): AudioContext | null {\n    if (!SoundService._audioContext) {\n      const audioContextCtor: typeof AudioContext = (window as any).AudioContext || (window as any).webkitAudioContext;\n      if (!audioContextCtor) {\n        console.warn('Web Audio API is not supported by this browser. Consider upgrading to the latest version');\n        return null;\n      }\n      SoundService._audioContext = new audioContextCtor();\n    }\n    return SoundService._audioContext;\n  }\n\n  constructor(\n    @IOptionsService private _optionsService: IOptionsService\n  ) {\n  }\n\n  public playBellSound(): void {\n    const ctx = SoundService.audioContext;\n    if (!ctx) {\n      return;\n    }\n    const bellAudioSource = ctx.createBufferSource();\n    ctx.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._optionsService.rawOptions.bellSound)), (buffer) => {\n      bellAudioSource.buffer = buffer;\n      bellAudioSource.connect(ctx.destination);\n      bellAudioSource.start(0);\n    });\n  }\n\n  private _base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binaryString = window.atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    return bytes.buffer;\n  }\n\n  private _removeMimeType(dataURI: string): string {\n    // Split the input to get the mime-type and the data itself\n    const splitUri = dataURI.split(',');\n\n    // Return only the data\n    return splitUri[1];\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public onDeleteEmitter = new EventEmitter<IDeleteEvent>();\n  public get onDelete(): IEvent<IDeleteEvent> { return this.onDeleteEmitter.event; }\n  public onInsertEmitter = new EventEmitter<IInsertEvent>();\n  public get onInsert(): IEvent<IInsertEvent> { return this.onInsertEmitter.event; }\n  public onTrimEmitter = new EventEmitter<number>();\n  public get onTrim(): IEvent<number> { return this.onTrimEmitter.event; }\n\n  constructor(\n    private _maxLength: number\n  ) {\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @return The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @return The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorRGB } from 'common/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    if (css.match(/#[0-9a-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor(r, g, b);\n        }\n        case 5: { // #rgba\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          const a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor(r, g, b, a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) { // rgb() or rgba()\n      const r = parseInt(rgbaMatch[1]);\n      const g = parseInt(rgbaMatch[2]);\n      const b = parseInt(rgbaMatch[3]);\n      const a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor(r, g, b, a);\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, bgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, bgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n", "/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, IDirtyRowService, LogLevelEnum, ITerminalOptions } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IBufferLine, IAttributeData, ICoreTerminal, IKeyboardEvent, IScrollEvent, ScrollSource, ITerminalOptions as IPublicTerminalOptions } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { DirtyRowService } from 'common/services/DirtyRowService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _dirtyRowService: IDirtyRowService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsMode: IDisposable | undefined;\n\n  private _onBinary = new EventEmitter<string>();\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n  private _onData = new EventEmitter<string>();\n  public get onData(): IEvent<string> { return this._onData.event; }\n  protected _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  protected _onScroll = new EventEmitter<IScrollEvent, void>();\n  public get onWriteParsed(): IEvent<void> { return this._onWriteParsed.event; }\n  protected _onWriteParsed = new EventEmitter<void>();\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = new EventEmitter<number, void>();\n      this.register(this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      }));\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): ITerminalOptions { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = new OptionsService(options);\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this._instantiationService.createInstance(LogService);\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService, () => this.scrollToBottom()));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this._instantiationService.createInstance(CoreMouseService);\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this._dirtyRowService = this._instantiationService.createInstance(DirtyRowService);\n    this._instantiationService.setService(IDirtyRowService, this._dirtyRowService);\n    this.unicodeService = this._instantiationService.createInstance(UnicodeService);\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n\n    // Register input handler and handle/forward events\n    this._inputHandler = new InputHandler(this._bufferService, this._charsetService, this.coreService, this._dirtyRowService, this._logService, this.optionsService, this.coreMouseService, this.unicodeService);\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.optionsService.onOptionChange(key => this._updateOptions(key)));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult));\n    this.register(forwardEvent(this._writeBuffer.onWriteParsed, this._onWriteParsed));\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._windowsMode?.dispose();\n    this._windowsMode = undefined;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this._bufferService.scrollPages(pageCount);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this._bufferService.scrollToTop();\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this._bufferService.scrollToBottom();\n  }\n\n  public scrollToLine(line: number): void {\n    this._bufferService.scrollToLine(line);\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    if (this.optionsService.rawOptions.windowsMode) {\n      this._enableWindowsMode();\n    }\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n  protected _updateOptions(key: string): void {\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'scrollback':\n        this.buffers.resize(this.cols, this.rows);\n        break;\n      case 'windowsMode':\n        if (this.optionsService.rawOptions.windowsMode) {\n          this._enableWindowsMode();\n        } else {\n          this._windowsMode?.dispose();\n          this._windowsMode = undefined;\n        }\n        break;\n    }\n  }\n\n  protected _enableWindowsMode(): void {\n    if (!this._windowsMode) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsMode = {\n        dispose: () => {\n          for (const d of disposables) {\n            d.dispose();\n          }\n        }\n      };\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { concat } from 'common/TypedArrayUtils';\nimport { StringToUtf32, stringFromCodePoint, utf32ToString, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, IDirtyRowService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum } from 'common/services/Services';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document common VT features here that are currently unsupported\n */\n// @vt: #N   DCS   SIXEL   \"SIXEL Graphics\"  \"DCS Ps ; Ps ; Ps ; q \tPt ST\"   \"Draw SIXEL image starting at cursor position.\"\n// @vt: #N   OSC    1   \"Set Icon Name\"  \"OSC 1 ; Pt BEL\"  \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n/**\n * DCS subparser implementations\n */\n\n/**\n * DCS $ q Pt ST\n *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n *   Request Status String (DECRQSS), VT420 and up.\n *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n *\n * @vt: #P[See limited support below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the corresponding CSI string,\n * `ESC P 0 ST` for invalid requests.\n *\n * Supported requests and responses:\n *\n * | Type                             | Request           | Response (`Pt`)                                       |\n * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | always reporting `0 \" q` (DECSCA is unsupported)      |\n * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n *\n *\n * TODO:\n * - fix SGR report\n * - either implement DECSCA or remove the report\n * - either check which conformance is better suited or remove the report completely\n *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n */\nclass DECRQSS implements IDcsHandler {\n  private _data: Uint32Array = new Uint32Array(0);\n\n  constructor(\n    private _bufferService: IBufferService,\n    private _coreService: ICoreService,\n    private _logService: ILogService,\n    private _optionsService: IOptionsService\n  ) { }\n\n  public hook(params: IParams): void {\n    this._data = new Uint32Array(0);\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    this._data = concat(this._data, data.subarray(start, end));\n  }\n\n  public unhook(success: boolean): boolean {\n    if (!success) {\n      this._data = new Uint32Array(0);\n      return true;\n    }\n    const data = utf32ToString(this._data);\n    this._data = new Uint32Array(0);\n    switch (data) {\n      // valid: DCS 1 $ r Pt ST (xterm)\n      case '\"q': // DECSCA\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r0\"q${C0.ESC}\\\\`);\n        break;\n      case '\"p': // DECSCL\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r61;1\"p${C0.ESC}\\\\`);\n        break;\n      case 'r': // DECSTBM\n        const pt = '' + (this._bufferService.buffer.scrollTop + 1) +\n          ';' + (this._bufferService.buffer.scrollBottom + 1) + 'r';\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r${pt}${C0.ESC}\\\\`);\n        break;\n      case 'm': // SGR\n        // TODO: report real settings instead of 0m\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r0m${C0.ESC}\\\\`);\n        break;\n      case ' q': // DECSCUSR\n        const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n        let style = STYLES[this._optionsService.rawOptions.cursorStyle];\n        style -= this._optionsService.rawOptions.cursorBlink ? 1 : 0;\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r${style} q${C0.ESC}\\\\`);\n        break;\n      default:\n        // invalid: DCS 0 $ r Pt ST (xterm)\n        this._logService.debug('Unknown DCS $q %s', data);\n        this._coreService.triggerDataEvent(`${C0.ESC}P0$r${C0.ESC}\\\\`);\n    }\n    return true;\n  }\n}\n\n/**\n * DCS Ps; Ps| Pt ST\n *   DECUDK (https://vt100.net/docs/vt510-rm/DECUDK.html)\n *   not supported\n *\n * @vt: #N  DCS   DECUDK   \"User Defined Keys\"  \"DCS Ps ; Ps | Pt ST\"   \"Definitions for user-defined keys.\"\n */\n\n/**\n * DCS + q Pt ST (xterm)\n *   Request Terminfo String\n *   not implemented\n *\n * @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\"  \"DCS + q Pt ST\"   \"Request Terminfo String.\"\n */\n\n/**\n * DCS + p Pt ST (xterm)\n *   Set Terminfo Data\n *   not supported\n *\n * @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"  \"DCS + p Pt ST\"   \"Set Terminfo Data.\"\n */\n\n\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private _onRequestBell = new EventEmitter<void>();\n  public get onRequestBell(): IEvent<void> { return this._onRequestBell.event; }\n  private _onRequestRefreshRows = new EventEmitter<number, number>();\n  public get onRequestRefreshRows(): IEvent<number, number> { return this._onRequestRefreshRows.event; }\n  private _onRequestReset = new EventEmitter<void>();\n  public get onRequestReset(): IEvent<void> { return this._onRequestReset.event; }\n  private _onRequestSendFocus = new EventEmitter<void>();\n  public get onRequestSendFocus(): IEvent<void> { return this._onRequestSendFocus.event; }\n  private _onRequestSyncScrollBar = new EventEmitter<void>();\n  public get onRequestSyncScrollBar(): IEvent<void> { return this._onRequestSyncScrollBar.event; }\n  private _onRequestWindowsOptionsReport = new EventEmitter<WindowsOptionsReportType>();\n  public get onRequestWindowsOptionsReport(): IEvent<WindowsOptionsReportType> { return this._onRequestWindowsOptionsReport.event; }\n\n  private _onA11yChar = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yChar.event; }\n  private _onA11yTab = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTab.event; }\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n  private _onColor = new EventEmitter<IColorEvent>();\n  public get onColor(): IEvent<IColorEvent> { return this._onColor.event; }\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _dirtyRowService: IDirtyRowService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DECRQSS(this._bufferService, this._coreService, this._logService, this._optionsService));\n  }\n\n  public dispose(): void {\n    super.dispose();\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with\n   *   same chunk and the promise resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order and\n   * proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ` \"${Array.prototype.map.call(data, e => String.fromCharCode(e)).join('')}\"`}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowService.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing\n    this._onRequestRefreshRows.fire(this._dirtyRowService.start, this._dirtyRowService.end);\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      chWidth = this._unicodeService.wcwidth(code);\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (!chWidth && this._activeBuffer.x) {\n        if (!bufferRow.getWidth(this._activeBuffer.x - 1)) {\n          // found empty cell after fullwidth, need to go 2 cells back\n          // it is save to step 2 cells back here\n          // since an empty cell is only set by fullwidth chars\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 2, code);\n        } else {\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 1, code);\n        }\n        continue;\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - 1 >= cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          // clear left over cells to the right\n          while (this._activeBuffer.x < cols) {\n            bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n          }\n          this._activeBuffer.x = 0;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth, this._activeBuffer.getNullCell(curAttr), curAttr);\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodePoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x++, code, chWidth, curAttr.fg, curAttr.bg, curAttr.extended);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n    }\n    // store last char in Parser.precedingCodepoint for REP to work correctly\n    // This needs to check whether:\n    //  - fullwidth + surrogates: reset\n    //  - combining: only base char gets carried on (bug in xterm?)\n    if (end - start > 0) {\n      bufferRow.loadCell(this._activeBuffer.x - 1, this._workCell);\n      if (this._workCell.getWidth() === 2 || this._workCell.getCode() > 0xFFFF) {\n        this._parser.precedingCodepoint = 0;\n      } else if (this._workCell.isCombined()) {\n        this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0);\n      } else {\n        this._parser.precedingCodepoint = this._workCell.content;\n      }\n    }\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once before\n          // early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y row index\n   * @param start first cell index to be erased\n   * @param end   end - 1 is last erased cell\n   * @param cleanWrap clear the isWrapped flag\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      this._eraseAttrData()\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()));\n    this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + y);\n    line.isWrapped = false;\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #P[Protection attributes are not supported.] CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Currently the same as ED.\"\n   */\n  public eraseInDisplay(params: IParams): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowService.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #P[Protection attributes are not supported.] CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Currently the same as EL.\"\n   */\n  public eraseInLine(params: IParams): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true);\n        break;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the blank characters.\n   * Text between the cursor and right margin moves to the right. Characters moved past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to the left.\n   * Character attributes move with the characters. The terminal adds blank characters at the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll margins,\n   * moving content to the right. Content at the right margin is lost.\n   * DECIC has no effect outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * Since we propagate the terminal as xterm-256color we have to follow xterm's behavior:\n   *    - fullwidth + surrogate chars are ignored\n   *    - for combining chars only the base char gets repeated\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty,\n   * the preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is set.\n   * REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    if (!this._parser.precedingCodepoint) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const data = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      data[i] = this._parser.precedingCodepoint;\n    }\n    this.print(data, 0, data.length);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM). Always off.   | #N      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          // this._t.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          // this.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM). Always off.     | #N      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          // this._t.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          // this.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #P[Currently outputs a single underline.] |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #P[Currently outputs a single underline.] |\n   * | 3      | Curly underline.                                              | #P[Currently outputs a single underline.] |\n   * | 4      | Dotted underline.                                             | #P[Currently outputs a single underline.] |\n   * | 5      | Dashed underline.                                             | #P[Currently outputs a single underline.] |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38) and background (Ps=48) as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._curAttrData.fg = DEFAULT_ATTR_DATA.fg;\n      this._curAttrData.bg = DEFAULT_ATTR_DATA.bg;\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        attr.fg = DEFAULT_ATTR_DATA.fg;\n        attr.bg = DEFAULT_ATTR_DATA.bg;\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full terminal bootstrap,\n   * DECSTR only resets certain attributes. For most needs DECSTR should be sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from `XParseColor` (see OSC 10 for supported formats).\n   * There may be multipe `c ; spec` pairs present in the same instruction.\n   * If `spec` contains `?` the terminal returns a sequence with the currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (0 <= index && index < 256) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [ColorIndex.FOREGROUND, ColorIndex.BACKGROUND, ColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (0 <= index && index < 256) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowService.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A generic list that is maintained in sorted order and allows values with duplicate keys. This\n * list is based on binary search and as such locating a key will take O(log n) amortized, this\n * includes the by key iterator.\n */\nexport class SortedList<T> {\n  private readonly _array: T[] = [];\n\n  constructor(\n    private readonly _getKey: (value: T) => number\n  ) {\n  }\n\n  public clear(): void {\n    this._array.length = 0;\n  }\n\n  public insert(value: T): void {\n    if (this._array.length === 0) {\n      this._array.push(value);\n      return;\n    }\n    const i = this._search(this._getKey(value), 0, this._array.length - 1);\n    this._array.splice(i, 0, value);\n  }\n\n  public delete(value: T): boolean {\n    if (this._array.length === 0) {\n      return false;\n    }\n    const key = this._getKey(value);\n    let i = this._search(key, 0, this._array.length - 1);\n    if (this._getKey(this._array[i]) !== key) {\n      return false;\n    }\n    do {\n      if (this._array[i] === value) {\n        this._array.splice(i, 1);\n        return true;\n      }\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n    return false;\n  }\n\n  public *getKeyIterator(key: number): IterableIterator<T> {\n    if (this._array.length === 0) {\n      return;\n    }\n    let i = this._search(key, 0, this._array.length - 1);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      yield this._array[i];\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public values(): IterableIterator<T> {\n    return this._array.values();\n  }\n\n  private _search(key: number, min: number, max: number): number {\n    if (max < min) {\n      return min;\n    }\n    let mid = Math.floor((min + max) / 2);\n    if (this._getKey(this._array[mid]) > key) {\n      return this._search(key, min, mid - 1);\n    }\n    if (this._getKey(this._array[mid]) < key) {\n      return this._search(key, mid + 1, max);\n    }\n    // Value found! Since keys can be duplicates, move the result index back to the lowest index\n    // that matches the key.\n    while (mid > 0 && this._getKey(this._array[mid - 1]) === key) {\n      mid--;\n    }\n    return mid;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  constructor(\n    // underline style, NONE is empty\n    public underlineStyle: UnderlineStyle = UnderlineStyle.NONE,\n    // underline color, -1 is empty (same as FG)\n    public underlineColor: number = -1\n  ) {}\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this.underlineStyle, this.underlineColor);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IBuffer, BufferIndex, IBufferStringIterator, IBufferStringIteratorResult } from 'common/buffer/Types';\nimport { IBufferLine, ICellData, IAttributeData, ICharset } from 'common/Types';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from 'common/buffer/Constants';\nimport { reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths, getWrappedLineTrimmedLength } from 'common/buffer/BufferReflow';\nimport { Marker } from 'common/buffer/Marker';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  // TODO: Type me\n  public tabs: any;\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n  private _isClearing: boolean = false;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  // private _reflowSmallerGetLinesNeeded()\n\n  /**\n   * Translates a string index back to a BufferIndex.\n   * To get the correct buffer position the string must start at `startCol` 0\n   * (default in translateBufferLineToString).\n   * The method also works on wrapped line strings given rows were not trimmed.\n   * The method operates on the CharData string length, there are no\n   * additional content or boundary checks. Therefore the string and the buffer\n   * should not be altered in between.\n   * TODO: respect trim flag after fixing #1685\n   * @param lineIndex line index the string was retrieved from\n   * @param stringIndex index within the string\n   * @param startCol column offset the string was retrieved from\n   */\n  public stringIndexToBufferIndex(lineIndex: number, stringIndex: number, trimRight: boolean = false): BufferIndex {\n    while (stringIndex) {\n      const line = this.lines.get(lineIndex);\n      if (!line) {\n        return [-1, -1];\n      }\n      const length = (trimRight) ? line.getTrimmedLength() : line.length;\n      for (let i = 0; i < length; ++i) {\n        if (line.get(i)[CHAR_DATA_WIDTH_INDEX]) {\n          // empty cells report a string length of 0, but get replaced\n          // with a whitespace in translateToString, thus replace with 1\n          stringIndex -= line.get(i)[CHAR_DATA_CHAR_INDEX].length || 1;\n        }\n        if (stringIndex < 0) {\n          return [lineIndex, i];\n        }\n      }\n      lineIndex++;\n    }\n    return [lineIndex, 0];\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Clears markers on single line.\n   * @param y The line to clear.\n   */\n  public clearMarkers(y: number): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].line === y) {\n        this.markers[i].dispose();\n        this.markers.splice(i--, 1);\n      }\n    }\n    this._isClearing = false;\n  }\n\n  /**\n   * Clears markers on all lines\n   */\n  public clearAllMarkers(): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      this.markers[i].dispose();\n      this.markers.splice(i--, 1);\n    }\n    this._isClearing = false;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    if (!this._isClearing) {\n      this.markers.splice(this.markers.indexOf(marker), 1);\n    }\n  }\n\n  public iterator(trimRight: boolean, startIndex?: number, endIndex?: number, startOverscan?: number, endOverscan?: number): IBufferStringIterator {\n    return new BufferStringIterator(this, trimRight, startIndex, endIndex, startOverscan, endOverscan);\n  }\n}\n\n/**\n * Iterator to get unwrapped content strings from the buffer.\n * The iterator returns at least the string data between the borders\n * `startIndex` and `endIndex` (exclusive) and will expand the lines\n * by `startOverscan` to the top and by `endOverscan` to the bottom,\n * if no new line was found in between.\n * It will never read/return string data beyond `startIndex - startOverscan`\n * or `endIndex + endOverscan`. Therefore the first and last line might be truncated.\n * It is possible to always get the full string for the first and last line as well\n * by setting the overscan values to the actual buffer length. This not recommended\n * since it might return the whole buffer within a single string in a worst case scenario.\n */\nexport class BufferStringIterator implements IBufferStringIterator {\n  private _current: number;\n\n  constructor(\n    private _buffer: IBuffer,\n    private _trimRight: boolean,\n    private _startIndex: number = 0,\n    private _endIndex: number = _buffer.lines.length,\n    private _startOverscan: number = 0,\n    private _endOverscan: number = 0\n  ) {\n    if (this._startIndex < 0) {\n      this._startIndex = 0;\n    }\n    if (this._endIndex > this._buffer.lines.length) {\n      this._endIndex = this._buffer.lines.length;\n    }\n    this._current = this._startIndex;\n  }\n\n  public hasNext(): boolean {\n    return this._current < this._endIndex;\n  }\n\n  public next(): IBufferStringIteratorResult {\n    const range = this._buffer.getWrappedRangeForLine(this._current);\n    // limit search window to overscan value at both borders\n    if (range.first < this._startIndex - this._startOverscan) {\n      range.first = this._startIndex - this._startOverscan;\n    }\n    if (range.last > this._endIndex + this._endOverscan) {\n      range.last = this._endIndex + this._endOverscan;\n    }\n    // limit to current buffer length\n    range.first = Math.max(range.first, 0);\n    range.last = Math.min(range.last, this._buffer.lines.length);\n    let content = '';\n    for (let i = range.first; i <= range.last; ++i) {\n      content += this._buffer.translateBufferLineToString(i, this._trimRight);\n    }\n    this._current = range.last + 1;\n    return { range, content };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IBufferLine, ICellData, IAttributeData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Content, BgFlags } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: ExtendedAttrs} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   * */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    const startIndex = index * CELL_SIZE;\n    cell.content = this._data[startIndex + Cell.CONTENT];\n    cell.fg = this._data[startIndex + Cell.FG];\n    cell.bg = this._data[startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index];\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodePoint(index: number, codePoint: number, width: number, fg: number, bg: number, eAttrs: IExtendedAttrs): void {\n    if (bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = eAttrs;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = fg;\n    this._data[index * CELL_SIZE + Cell.BG] = bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n      this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n    }\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodePoint(this.length - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodePoint(pos, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  public resize(cols: number, fillCellData: ICellData): void {\n    if (cols === this.length) {\n      return;\n    }\n    if (cols > this.length) {\n      const data = new Uint32Array(cols * CELL_SIZE);\n      if (this.length) {\n        if (cols * CELL_SIZE < this._data.length) {\n          data.set(this._data.subarray(0, cols * CELL_SIZE));\n        } else {\n          data.set(this._data);\n        }\n      }\n      this._data = data;\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      if (cols) {\n        const data = new Uint32Array(cols * CELL_SIZE);\n        data.set(this._data.subarray(0, cols * CELL_SIZE));\n        this._data = data;\n        // Remove any cut off combined data, FIXME: repeat this for extended attrs\n        const keys = Object.keys(this._combined);\n        for (let i = 0; i < keys.length; i++) {\n          const key = parseInt(keys[i], 10);\n          if (key >= cols) {\n            delete this._combined[key];\n          }\n        }\n      } else {\n        this._data = new Uint32Array(0);\n        this._combined = {};\n      }\n    }\n    this.length = cols;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData): void {\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      result += (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by 1\n    }\n    return result;\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange } from 'xterm';\n\nexport function getRangeLength(range: IBufferRange, bufferCols: number): number {\n  if (range.start.y > range.end.y) {\n    throw new Error(`Buffer range end (${range.end.x}, ${range.end.y}) cannot be before start (${range.start.x}, ${range.start.y})`);\n  }\n  return bufferCols * (range.end.y - range.start.y) + (range.end.x - range.start.x + 1);\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param newCols The columns after resize.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public get onBufferActivate(): IEvent<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}> { return this._onBufferActivate.event; }\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   * @param _terminal - The terminal the BufferSet will belong to\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IMarker } from 'common/Types';\n\nexport class Marker extends Disposable implements IMarker {\n  private static _nextId = 1;\n\n  private _id: number = Marker._nextId++;\n  public isDisposed: boolean = false;\n\n  public get id(): number { return this._id; }\n\n  private _onDispose = new EventEmitter<void>();\n  public get onDispose(): IEvent<void> { return this._onDispose.event; }\n\n  constructor(\n    public line: number\n  ) {\n    super();\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '\u25C6'\n  'a': '\\u2592', // '\u2592'\n  'b': '\\u2409', // '\u2409' (HT)\n  'c': '\\u240c', // '\u240C' (FF)\n  'd': '\\u240d', // '\u240D' (CR)\n  'e': '\\u240a', // '\u240A' (LF)\n  'f': '\\u00b0', // '\u00B0'\n  'g': '\\u00b1', // '\u00B1'\n  'h': '\\u2424', // '\u2424' (NL)\n  'i': '\\u240b', // '\u240B' (VT)\n  'j': '\\u2518', // '\u2518'\n  'k': '\\u2510', // '\u2510'\n  'l': '\\u250c', // '\u250C'\n  'm': '\\u2514', // '\u2514'\n  'n': '\\u253c', // '\u253C'\n  'o': '\\u23ba', // '\u23BA'\n  'p': '\\u23bb', // '\u23BB'\n  'q': '\\u2500', // '\u2500'\n  'r': '\\u23bc', // '\u23BC'\n  's': '\\u23bd', // '\u23BD'\n  't': '\\u251c', // '\u251C'\n  'u': '\\u2524', // '\u2524'\n  'v': '\\u2534', // '\u2534'\n  'w': '\\u252c', // '\u252C'\n  'x': '\\u2502', // '\u2502'\n  'y': '\\u2264', // '\u2264'\n  'z': '\\u2265', // '\u2265'\n  '{': '\\u03c0', // '\u03C0'\n  '|': '\\u2260', // '\u2260'\n  '}': '\\u00a3', // '\u00A3'\n  '~': '\\u00b7'  // '\u00B7'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '\u00A3'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '\u00A3',\n  '@': '\u00BE',\n  '[': 'ij',\n  '\\\\': '\u00BD',\n  ']': '|',\n  '{': '\u00A8',\n  '|': 'f',\n  '}': '\u00BC',\n  '~': '\u00B4'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': '\u00C4',\n  '\\\\': '\u00D6',\n  ']': '\u00C5',\n  '^': '\u00DC',\n  '`': '\u00E9',\n  '{': '\u00E4',\n  '|': '\u00F6',\n  '}': '\u00E5',\n  '~': '\u00FC'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '\u00A3',\n  '@': '\u00E0',\n  '[': '\u00B0',\n  '\\\\': '\u00E7',\n  ']': '\u00A7',\n  '{': '\u00E9',\n  '|': '\u00F9',\n  '}': '\u00E8',\n  '~': '\u00A8'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': '\u00E0',\n  '[': '\u00E2',\n  '\\\\': '\u00E7',\n  ']': '\u00EA',\n  '^': '\u00EE',\n  '`': '\u00F4',\n  '{': '\u00E9',\n  '|': '\u00F9',\n  '}': '\u00E8',\n  '~': '\u00FB'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '\u00A7',\n  '[': '\u00C4',\n  '\\\\': '\u00D6',\n  ']': '\u00DC',\n  '{': '\u00E4',\n  '|': '\u00F6',\n  '}': '\u00FC',\n  '~': '\u00DF'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '\u00A3',\n  '@': '\u00A7',\n  '[': '\u00B0',\n  '\\\\': '\u00E7',\n  ']': '\u00E9',\n  '`': '\u00F9',\n  '{': '\u00E0',\n  '|': '\u00F2',\n  '}': '\u00E8',\n  '~': '\u00EC'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': '\u00C4',\n  '[': '\u00C6',\n  '\\\\': '\u00D8',\n  ']': '\u00C5',\n  '^': '\u00DC',\n  '`': '\u00E4',\n  '{': '\u00E6',\n  '|': '\u00F8',\n  '}': '\u00E5',\n  '~': '\u00FC'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '\u00A3',\n  '@': '\u00A7',\n  '[': '\u00A1',\n  '\\\\': '\u00D1',\n  ']': '\u00BF',\n  '{': '\u00B0',\n  '|': '\u00F1',\n  '}': '\u00E7'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': '\u00C9',\n  '[': '\u00C4',\n  '\\\\': '\u00D6',\n  ']': '\u00C5',\n  '^': '\u00DC',\n  '`': '\u00E9',\n  '{': '\u00E4',\n  '|': '\u00F6',\n  '}': '\u00E5',\n  '~': '\u00FC'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': '\u00F9',\n  '@': '\u00E0',\n  '[': '\u00E9',\n  '\\\\': '\u00E7',\n  ']': '\u00EA',\n  '^': '\u00EE',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': '\u00E8',\n  '`': '\u00F4',\n  '{': '\u00E4',\n  '|': '\u00F6',\n  '}': '\u00FC',\n  '~': '\u00FB'\n};\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\nexport namespace C1_ESCAPED {\n  export const ST = `${C0.ESC}\\\\`;\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IKeyboardEvent, IKeyboardResult, KeyboardResultType } from 'common/Types';\nimport { C0 } from 'common/data/EscapeSequences';\n\n// reg + shift key mappings for digits and special chars\nconst KEYCODE_KEY_MAPPINGS: { [key: number]: [string, string]} = {\n  // digits 0-9\n  48: ['0', ')'],\n  49: ['1', '!'],\n  50: ['2', '@'],\n  51: ['3', '#'],\n  52: ['4', '$'],\n  53: ['5', '%'],\n  54: ['6', '^'],\n  55: ['7', '&'],\n  56: ['8', '*'],\n  57: ['9', '('],\n\n  // special chars\n  186: [';', ':'],\n  187: ['=', '+'],\n  188: [',', '<'],\n  189: ['-', '_'],\n  190: ['.', '>'],\n  191: ['/', '?'],\n  192: ['`', '~'],\n  219: ['[', '{'],\n  220: ['\\\\', '|'],\n  221: [']', '}'],\n  222: ['\\'', '\"']\n};\n\nexport function evaluateKeyboardEvent(\n  ev: IKeyboardEvent,\n  applicationCursorMode: boolean,\n  isMac: boolean,\n  macOptionIsMeta: boolean\n): IKeyboardResult {\n  const result: IKeyboardResult = {\n    type: KeyboardResultType.SEND_KEY,\n    // Whether to cancel event propagation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined\n  };\n  const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n  switch (ev.keyCode) {\n    case 0:\n      if (ev.key === 'UIKeyInputUpArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OA';\n        } else {\n          result.key = C0.ESC + '[A';\n        }\n      }\n      else if (ev.key === 'UIKeyInputLeftArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OD';\n        } else {\n          result.key = C0.ESC + '[D';\n        }\n      }\n      else if (ev.key === 'UIKeyInputRightArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OC';\n        } else {\n          result.key = C0.ESC + '[C';\n        }\n      }\n      else if (ev.key === 'UIKeyInputDownArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OB';\n        } else {\n          result.key = C0.ESC + '[B';\n        }\n      }\n      break;\n    case 8:\n      // backspace\n      if (ev.shiftKey) {\n        result.key = C0.BS; // ^H\n        break;\n      } else if (ev.altKey) {\n        result.key = C0.ESC + C0.DEL; // \\e ^?\n        break;\n      }\n      result.key = C0.DEL; // ^?\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = ev.altKey ? C0.ESC + C0.CR : C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.ESC;\n      }\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3D') {\n          result.key = C0.ESC + (isMac ? 'b' : '[1;5D');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3C') {\n          result.key = C0.ESC + (isMac ? 'f' : '[1;5C');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OH';\n      } else {\n        result.key = C0.ESC + '[H';\n      }\n      break;\n    case 35:\n      // end\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OF';\n      } else {\n        result.key = C0.ESC + '[F';\n      }\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_UP;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[5;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_DOWN;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[6;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          result.key = C0.NUL;\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          result.key = C0.DEL;\n        } else if (ev.keyCode === 219) {\n          result.key = C0.ESC;\n        } else if (ev.keyCode === 220) {\n          result.key = C0.FS;\n        } else if (ev.keyCode === 221) {\n          result.key = C0.GS;\n        }\n      } else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n        // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\n        const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n        const key = keyMapping?.[!ev.shiftKey ? 0 : 1];\n        if (key) {\n          result.key = C0.ESC + key;\n        } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n          let keyString = String.fromCharCode(keyCode);\n          if (ev.shiftKey) {\n            keyString = keyString.toUpperCase();\n          }\n          result.key = C0.ESC + keyString;\n        } else if (ev.key === 'Dead' && ev.code.startsWith('Key')) {\n          // Reference: https://github.com/xtermjs/xterm.js/issues/3725\n          // Alt will produce a \"dead key\" (initate composition) with some\n          // of the letters in US layout (e.g. N/E/U).\n          // It's safe to match against Key* since no other `code` values begin with \"Key\".\n          // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values#code_values_on_mac\n          let keyString = ev.code.slice(3, 4);\n          if (!ev.shiftKey) {\n            keyString = keyString.toLowerCase();\n          }\n          result.key = C0.ESC + keyString;\n          result.cancel = true;\n        }\n      } else if (isMac && !ev.altKey && !ev.ctrlKey && !ev.shiftKey && ev.metaKey) {\n        if (ev.keyCode === 65) { // cmd + a\n          result.type = KeyboardResultType.SELECT_ALL;\n        }\n      } else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\n        // Include only keys that that result in a _single_ character; don't include num lock, volume up, etc.\n        result.key = ev.key;\n      } else if (ev.key && ev.ctrlKey) {\n        if (ev.key === '_') { // ^_\n          result.key = C0.US;\n        }\n        if (ev.key === '@') { // ^ + shift + 2 = ^ + @\n          result.key = C0.NUL;\n        }\n      }\n      break;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider } from 'common/services/Services';\nimport { fill } from 'common/TypedArrayUtils';\n\ntype CharWidth = 0 | 1 | 2;\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      fill(table, 1);\n      table[0] = 0;\n      // control chars\n      fill(table, 0, 1, 32);\n      fill(table, 0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      fill(table, 2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      fill(table, 2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      fill(table, 2, 0xac00, 0xd7a4);\n      fill(table, 2, 0xf900, 0xfb00);\n      fill(table, 2, 0xfe10, 0xfe1a);\n      fill(table, 2, 0xfe30, 0xfe70);\n      fill(table, 2, 0xff00, 0xff61);\n      fill(table, 2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        fill(table, 0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): CharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as CharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n}\n", "\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\n// queueMicrotask polyfill for nodejs < v11\nconst qmt: (cb: () => void) => void = (typeof queueMicrotask === 'undefined')\n  ? (cb: () => void) => { Promise.resolve().then(cb); }\n  : queueMicrotask;\n\n\nexport class WriteBuffer {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n  public get onWriteParsed(): IEvent<void> { return this._onWriteParsed.event; }\n  private _onWriteParsed = new EventEmitter<void>();\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) { }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens took very long).\n         * This cannot be solved here for the handler itself (it is the handlers responsibility to slice hard work),\n         * but we can at least schedule a screen update as we gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          qmt(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n    this._onWriteParsed.fire();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n* Internal actions of EscapeSequenceParser.\n*/\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    fill(this.table, action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingCodepoint: number;\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected _oscParser: IOscParser;\n  protected _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser = new OscParser();\n    this._dcsParser = new DcsParser();\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public dispose(): void {\n    this._csiHandlers = Object.create(null);\n    this._executeHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser.dispose();\n    this._dcsParser.dispose();\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing.\n           * This is a really bad condition with screwed up execution order and prolly messed up\n           * terminal state, therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that,\n           * as the pending async handler still might mess up the terminal later. Instead fix the faulty\n           * async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingCodepoint = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from 'xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  constructor() {\n  }\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from 'xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from 'xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from 'xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { IEvent, EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class BufferNamespaceApi implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n  private _onBufferChange = new EventEmitter<IBufferApi>();\n  public get onBufferChange(): IEvent<IBufferApi> { return this._onBufferChange.event; }\n\n  constructor(private _core: ICoreTerminal) {\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from 'xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from 'xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBufferSet, IBuffer } from 'common/buffer/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(\n    @IOptionsService private _optionsService: IOptionsService\n  ) {\n    super();\n    this.cols = Math.max(_optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(_optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = new BufferSet(_optionsService, this);\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.buffers.dispose();\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    this.buffers.setupTabStops(this.cols);\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this.scrollLines(-this.buffer.ydisp);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: {[key: string]: ICoreMouseProtocol} = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: {[key: string]: CoreMouseEncoding} = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService implements ICoreMouseService {\n  private _protocols: {[name: string]: ICoreMouseProtocol} = {};\n  private _encodings: {[name: string]: CoreMouseEncoding} = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _onProtocolChange = new EventEmitter<CoreMouseEventType>();\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  public get onProtocolChange(): IEvent<CoreMouseEventType> {\n    return this._onProtocolChange.event;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n        || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move at grid level\n    if (e.action === CoreMouseAction.MOVE && this._lastEvent && this._compareEvents(this._lastEvent, e)) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): {[event: string]: boolean} {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _compareEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent): boolean {\n    if (e1.col !== e2.col) return false;\n    if (e1.row !== e2.row) return false;\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreService, ILogService, IOptionsService, IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { clone } from 'common/Clone';\nimport { Disposable } from 'common/Lifecycle';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  // Circular dependency, this must be unset or memory will leak after Terminal.dispose\n  private _scrollToBottom: (() => void) | undefined;\n\n  private _onData = this.register(new EventEmitter<string>());\n  public get onData(): IEvent<string> { return this._onData.event; }\n  private _onUserInput = this.register(new EventEmitter<void>());\n  public get onUserInput(): IEvent<void> { return this._onUserInput.event; }\n  private _onBinary = this.register(new EventEmitter<string>());\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n\n  constructor(\n    // TODO: Move this into a service\n    scrollToBottom: () => void,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._scrollToBottom = scrollToBottom;\n    this.register({ dispose: () => this._scrollToBottom = undefined });\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (buffer.ybase !== buffer.ydisp) {\n      this._scrollToBottom!();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { css } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDecorationService, IInternalDecoration } from 'common/services/Services';\nimport { SortedList } from 'common/SortedList';\nimport { IColor } from 'common/Types';\nimport { IDecorationOptions, IDecoration, IMarker, IEvent } from 'xterm';\n\nexport class DecorationService extends Disposable implements IDecorationService {\n  public serviceBrand: any;\n\n  /**\n   * A list of all decorations, sorted by the marker's line value. This relies on the fact that\n   * while marker line values do change, they should all change by the same amount so this should\n   * never become out of order.\n   */\n  private readonly _decorations: SortedList<IInternalDecoration> = new SortedList(e => e.marker.line);\n\n  private _onDecorationRegistered = this.register(new EventEmitter<IInternalDecoration>());\n  public get onDecorationRegistered(): IEvent<IInternalDecoration> { return this._onDecorationRegistered.event; }\n  private _onDecorationRemoved = this.register(new EventEmitter<IInternalDecoration>());\n  public get onDecorationRemoved(): IEvent<IInternalDecoration> { return this._onDecorationRemoved.event; }\n\n  public get decorations(): IterableIterator<IInternalDecoration> { return this._decorations.values(); }\n\n  constructor() {\n    super();\n  }\n\n  public registerDecoration(options: IDecorationOptions): IDecoration | undefined {\n    if (options.marker.isDisposed) {\n      return undefined;\n    }\n    const decoration = new Decoration(options);\n    if (decoration) {\n      const markerDispose = decoration.marker.onDispose(() => decoration.dispose());\n      decoration.onDispose(() => {\n        if (decoration) {\n          if (this._decorations.delete(decoration)) {\n            this._onDecorationRemoved.fire(decoration);\n          }\n          markerDispose.dispose();\n        }\n      });\n      this._decorations.insert(decoration);\n      this._onDecorationRegistered.fire(decoration);\n    }\n    return decoration;\n  }\n\n  public reset(): void {\n    for (const d of this._decorations.values()) {\n      d.dispose();\n    }\n    this._decorations.clear();\n  }\n\n  public *getDecorationsAtLine(line: number): IterableIterator<IInternalDecoration> {\n    return this._decorations.getKeyIterator(line);\n  }\n\n  public *getDecorationsAtCell(x: number, line: number, layer?: 'bottom' | 'top'): IterableIterator<IInternalDecoration> {\n    let xmin = 0;\n    let xmax = 0;\n    for (const d of this._decorations.getKeyIterator(line)) {\n      xmin = d.options.x ?? 0;\n      xmax = xmin + (d.options.width ?? 1);\n      if (x >= xmin && x < xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        yield d;\n      }\n    }\n  }\n\n  public dispose(): void {\n    for (const d of this._decorations.values()) {\n      this._onDecorationRemoved.fire(d);\n    }\n    this.reset();\n  }\n}\n\nclass Decoration extends Disposable implements IInternalDecoration {\n  public readonly marker: IMarker;\n  public element: HTMLElement | undefined;\n  public isDisposed: boolean = false;\n\n  public readonly onRenderEmitter = this.register(new EventEmitter<HTMLElement>());\n  public readonly onRender = this.onRenderEmitter.event;\n  private _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  private _cachedBg: IColor | undefined | null = null;\n  public get backgroundColorRGB(): IColor | undefined {\n    if (this._cachedBg === null) {\n      if (this.options.backgroundColor) {\n        this._cachedBg = css.toColor(this.options.backgroundColor);\n      } else {\n        this._cachedBg = undefined;\n      }\n    }\n    return this._cachedBg;\n  }\n\n  private _cachedFg: IColor | undefined | null = null;\n  public get foregroundColorRGB(): IColor | undefined {\n    if (this._cachedFg === null) {\n      if (this.options.foregroundColor) {\n        this._cachedFg = css.toColor(this.options.foregroundColor);\n      } else {\n        this._cachedFg = undefined;\n      }\n    }\n    return this._cachedFg;\n  }\n\n  constructor(\n    public readonly options: IDecorationOptions\n  ) {\n    super();\n    this.marker = options.marker;\n    if (this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position) {\n      this.options.overviewRulerOptions.position = 'full';\n    }\n  }\n\n  public override dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IDirtyRowService } from 'common/services/Services';\n\nexport class DirtyRowService implements IDirtyRowService {\n  public serviceBrand: any;\n\n  private _start!: number;\n  private _end!: number;\n\n  public get start(): number { return this._start; }\n  public get end(): number { return this._end; }\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this._start = this._bufferService.buffer.y;\n    this._end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this._start) {\n      this._start = y;\n    } else if (y > this._end) {\n      this._end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      const temp = y1;\n      y1 = y2;\n      y2 = temp;\n    }\n    if (y1 < this._start) {\n      this._start = y1;\n    }\n    if (y2 > this._end) {\n      this._end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    this._entries.forEach((value, key) => callback(key, value));\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService implements ILogService {\n  public serviceBrand: any;\n\n  public logLevel: LogLevelEnum = LogLevelEnum.OFF;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    this._updateLogLevel();\n    this._optionsService.onOptionChange(key => {\n      if (key === 'logLevel') {\n        this._updateLogLevel();\n      }\n    });\n  }\n\n  private _updateLogLevel(): void {\n    this.logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, LOG_PREFIX + message, ...optionalParams);\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.DEBUG) {\n      this._log(console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.INFO) {\n      this._log(console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.WARN) {\n      this._log(console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.ERROR) {\n      this._log(console.error, message, optionalParams);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService, ITerminalOptions, FontWeight } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { isMac } from 'common/Platform';\n\n// Source: https://freesound.org/people/altemark/sounds/45759/\n// This sound is released under the Creative Commons Attribution 3.0 Unported\n// (CC BY 3.0) license. It was created by 'altemark'. No modifications have been\n// made, apart from the conversion to base64.\nexport const DEFAULT_BELL_SOUND = 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq';\n\nexport const DEFAULT_OPTIONS: Readonly<ITerminalOptions> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  customGlyphs: true,\n  bellSound: DEFAULT_BELL_SOUND,\n  bellStyle: 'none',\n  drawBoldTextInBrightColors: true,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  lineHeight: 1.0,\n  linkTooltipHoverDuration: 500,\n  letterSpacing: 0,\n  logLevel: 'info',\n  scrollback: 1000,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: true,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rightClickSelectsWord: isMac,\n  rendererType: 'canvas',\n  windowOptions: {},\n  windowsMode: false,\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false,\n  overviewRulerWidth: undefined\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: ITerminalOptions;\n  public options: ITerminalOptions;\n\n  private _onOptionChange = new EventEmitter<string>();\n  public get onOptionChange(): IEvent<string> { return this._onOptionChange.event; }\n\n  constructor(options: Partial<ITerminalOptions>) {\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  public setOption(key: string, value: any): void {\n    this.options[key] = value;\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'bellStyle':\n      case 'cursorStyle':\n      case 'rendererType':\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n    }\n    return value;\n  }\n\n  public getOption(key: string): any {\n    return this.options[key];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColorRGB, IColor } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration } from 'xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollToBottom(): void;\n  scrollToTop(): void;\n  scrollToLine(line: number): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  scrollPages(pageCount: number): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasFromUser Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer.s\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport const IDirtyRowService = createDecorator<IDirtyRowService>('DirtyRowService');\nexport interface IDirtyRowService {\n  serviceBrand: undefined;\n\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<Args> =\n  Args extends [...IBrandedService[]] ? []\n    : Args extends [infer A1, ...IBrandedService[]] ? [A1]\n      : Args extends [infer A1, infer A2, ...IBrandedService[]] ? [A1, A2]\n        : Args extends [infer A1, infer A2, infer A3, ...IBrandedService[]] ? [A1, A2, A3]\n          : Args extends [infer A1, infer A2, infer A3, infer A4, ...IBrandedService[]] ? [A1, A2, A3, A4]\n            : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, ...IBrandedService[]] ? [A1, A2, A3, A4, A5]\n              : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6]\n                : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7]\n                  : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, infer A8, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7, A8]\n                    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  OFF = 4\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  logLevel: LogLevelEnum;\n\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Readonly<ITerminalOptions>;\n  readonly options: ITerminalOptions;\n\n  readonly onOptionChange: IEvent<string>;\n\n  setOption<T>(key: string, value: T): void;\n  getOption<T>(key: string): T | undefined;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport type RendererType = 'dom' | 'canvas';\n\nexport interface ITerminalOptions {\n  allowProposedApi: boolean;\n  allowTransparency: boolean;\n  altClickMovesCursor: boolean;\n  bellSound: string;\n  bellStyle: 'none' | 'sound' /* | 'visual' | 'both' */;\n  cols: number;\n  convertEol: boolean;\n  cursorBlink: boolean;\n  cursorStyle: 'block' | 'underline' | 'bar';\n  cursorWidth: number;\n  customGlyphs: boolean;\n  disableStdin: boolean;\n  drawBoldTextInBrightColors: boolean;\n  fastScrollModifier: 'alt' | 'ctrl' | 'shift' | undefined;\n  fastScrollSensitivity: number;\n  fontSize: number;\n  fontFamily: string;\n  fontWeight: FontWeight;\n  fontWeightBold: FontWeight;\n  letterSpacing: number;\n  lineHeight: number;\n  linkTooltipHoverDuration: number;\n  logLevel: LogLevel;\n  macOptionIsMeta: boolean;\n  macOptionClickForcesSelection: boolean;\n  minimumContrastRatio: number;\n  rendererType: RendererType;\n  rightClickSelectsWord: boolean;\n  rows: number;\n  screenReaderMode: boolean;\n  scrollback: number;\n  scrollSensitivity: number;\n  tabStopWidth: number;\n  theme: ITheme;\n  windowsMode: boolean;\n  windowOptions: IWindowOptions;\n  wordSeparator: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selection?: string;\n  selectionForeground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /** Iterates over the decorations at a line (in no particular order). */\n  getDecorationsAtLine(line: number): IterableIterator<IInternalDecoration>;\n  /** Iterates over the decorations at a cell (in no particular order). */\n  getDecorationsAtCell(x: number, line: number, layer?: 'bottom' | 'top'): IterableIterator<IInternalDecoration>;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeService, IUnicodeVersionProvider } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\n\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n  private _onChange = new EventEmitter<string>();\n  public get onChange(): IEvent<string> { return this._onChange.event; }\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): number {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      result += this.wcwidth(code);\n    }\n    return result;\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4389);\n", "export default require(\"./node_modules/xterm/lib/xterm.js\");"],
  "mappings": "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AC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,M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",
  "names": []
}
